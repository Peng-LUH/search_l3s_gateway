# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkillSearchDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_size': 'float',
        'page': 'float',
        'name': 'str',
        'level': 'float',
        'skill_map': 'str'
    }

    attribute_map = {
        'page_size': 'pageSize',
        'page': 'page',
        'name': 'name',
        'level': 'level',
        'skill_map': 'skillMap'
    }

    def __init__(self, page_size=None, page=None, name=None, level=None, skill_map=None):  # noqa: E501
        """SkillSearchDto - a model defined in Swagger"""  # noqa: E501
        self._page_size = None
        self._page = None
        self._name = None
        self._level = None
        self._skill_map = None
        self.discriminator = None
        if page_size is not None:
            self.page_size = page_size
        if page is not None:
            self.page = page
        if name is not None:
            self.name = name
        if level is not None:
            self.level = level
        if skill_map is not None:
            self.skill_map = skill_map

    @property
    def page_size(self):
        """Gets the page_size of this SkillSearchDto.  # noqa: E501


        :return: The page_size of this SkillSearchDto.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SkillSearchDto.


        :param page_size: The page_size of this SkillSearchDto.  # noqa: E501
        :type: float
        """

        self._page_size = page_size

    @property
    def page(self):
        """Gets the page of this SkillSearchDto.  # noqa: E501


        :return: The page of this SkillSearchDto.  # noqa: E501
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SkillSearchDto.


        :param page: The page of this SkillSearchDto.  # noqa: E501
        :type: float
        """

        self._page = page

    @property
    def name(self):
        """Gets the name of this SkillSearchDto.  # noqa: E501


        :return: The name of this SkillSearchDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkillSearchDto.


        :param name: The name of this SkillSearchDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def level(self):
        """Gets the level of this SkillSearchDto.  # noqa: E501


        :return: The level of this SkillSearchDto.  # noqa: E501
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SkillSearchDto.


        :param level: The level of this SkillSearchDto.  # noqa: E501
        :type: float
        """

        self._level = level

    @property
    def skill_map(self):
        """Gets the skill_map of this SkillSearchDto.  # noqa: E501


        :return: The skill_map of this SkillSearchDto.  # noqa: E501
        :rtype: str
        """
        return self._skill_map

    @skill_map.setter
    def skill_map(self, skill_map):
        """Sets the skill_map of this SkillSearchDto.


        :param skill_map: The skill_map of this SkillSearchDto.  # noqa: E501
        :type: str
        """

        self._skill_map = skill_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkillSearchDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkillSearchDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
