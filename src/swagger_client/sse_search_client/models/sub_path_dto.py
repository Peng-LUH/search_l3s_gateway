# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubPathDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'skill': 'str',
        'learning_units': 'list[str]'
    }

    attribute_map = {
        'skill': 'skill',
        'learning_units': 'learningUnits'
    }

    def __init__(self, skill=None, learning_units=None):  # noqa: E501
        """SubPathDto - a model defined in Swagger"""  # noqa: E501
        self._skill = None
        self._learning_units = None
        self.discriminator = None
        self.skill = skill
        self.learning_units = learning_units

    @property
    def skill(self):
        """Gets the skill of this SubPathDto.  # noqa: E501


        :return: The skill of this SubPathDto.  # noqa: E501
        :rtype: str
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this SubPathDto.


        :param skill: The skill of this SubPathDto.  # noqa: E501
        :type: str
        """
        if skill is None:
            raise ValueError("Invalid value for `skill`, must not be `None`")  # noqa: E501

        self._skill = skill

    @property
    def learning_units(self):
        """Gets the learning_units of this SubPathDto.  # noqa: E501


        :return: The learning_units of this SubPathDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._learning_units

    @learning_units.setter
    def learning_units(self, learning_units):
        """Sets the learning_units of this SubPathDto.


        :param learning_units: The learning_units of this SubPathDto.  # noqa: E501
        :type: list[str]
        """
        if learning_units is None:
            raise ValueError("Invalid value for `learning_units`, must not be `None`")  # noqa: E501

        self._learning_units = learning_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubPathDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubPathDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
