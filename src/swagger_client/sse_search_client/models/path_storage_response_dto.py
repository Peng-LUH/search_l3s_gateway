# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PathStorageResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'learning_history_id': 'str',
        'path_id': 'str',
        'units': 'list[str]',
        'origin_path_id': 'str',
        'goal': 'list[str]',
        'lifecycle': 'object'
    }

    attribute_map = {
        'user_id': 'userId',
        'learning_history_id': 'learningHistoryId',
        'path_id': 'pathId',
        'units': 'units',
        'origin_path_id': 'originPathId',
        'goal': 'goal',
        'lifecycle': 'lifecycle'
    }

    def __init__(self, user_id=None, learning_history_id=None, path_id=None, units=None, origin_path_id=None, goal=None, lifecycle=None):  # noqa: E501
        """PathStorageResponseDto - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._learning_history_id = None
        self._path_id = None
        self._units = None
        self._origin_path_id = None
        self._goal = None
        self._lifecycle = None
        self.discriminator = None
        self.user_id = user_id
        self.learning_history_id = learning_history_id
        self.path_id = path_id
        self.units = units
        if origin_path_id is not None:
            self.origin_path_id = origin_path_id
        self.goal = goal
        self.lifecycle = lifecycle

    @property
    def user_id(self):
        """Gets the user_id of this PathStorageResponseDto.  # noqa: E501


        :return: The user_id of this PathStorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PathStorageResponseDto.


        :param user_id: The user_id of this PathStorageResponseDto.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def learning_history_id(self):
        """Gets the learning_history_id of this PathStorageResponseDto.  # noqa: E501


        :return: The learning_history_id of this PathStorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._learning_history_id

    @learning_history_id.setter
    def learning_history_id(self, learning_history_id):
        """Sets the learning_history_id of this PathStorageResponseDto.


        :param learning_history_id: The learning_history_id of this PathStorageResponseDto.  # noqa: E501
        :type: str
        """
        if learning_history_id is None:
            raise ValueError("Invalid value for `learning_history_id`, must not be `None`")  # noqa: E501

        self._learning_history_id = learning_history_id

    @property
    def path_id(self):
        """Gets the path_id of this PathStorageResponseDto.  # noqa: E501


        :return: The path_id of this PathStorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._path_id

    @path_id.setter
    def path_id(self, path_id):
        """Sets the path_id of this PathStorageResponseDto.


        :param path_id: The path_id of this PathStorageResponseDto.  # noqa: E501
        :type: str
        """
        if path_id is None:
            raise ValueError("Invalid value for `path_id`, must not be `None`")  # noqa: E501

        self._path_id = path_id

    @property
    def units(self):
        """Gets the units of this PathStorageResponseDto.  # noqa: E501

        The personalized path of the learner to be stored.  # noqa: E501

        :return: The units of this PathStorageResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PathStorageResponseDto.

        The personalized path of the learner to be stored.  # noqa: E501

        :param units: The units of this PathStorageResponseDto.  # noqa: E501
        :type: list[str]
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def origin_path_id(self):
        """Gets the origin_path_id of this PathStorageResponseDto.  # noqa: E501

        The pre-defined learning path which was personalized for the learner. Optional, if the path was selected based on a pre-defined learning paths.  # noqa: E501

        :return: The origin_path_id of this PathStorageResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._origin_path_id

    @origin_path_id.setter
    def origin_path_id(self, origin_path_id):
        """Sets the origin_path_id of this PathStorageResponseDto.

        The pre-defined learning path which was personalized for the learner. Optional, if the path was selected based on a pre-defined learning paths.  # noqa: E501

        :param origin_path_id: The origin_path_id of this PathStorageResponseDto.  # noqa: E501
        :type: str
        """

        self._origin_path_id = origin_path_id

    @property
    def goal(self):
        """Gets the goal of this PathStorageResponseDto.  # noqa: E501

        The learning goals of the path.  # noqa: E501

        :return: The goal of this PathStorageResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this PathStorageResponseDto.

        The learning goals of the path.  # noqa: E501

        :param goal: The goal of this PathStorageResponseDto.  # noqa: E501
        :type: list[str]
        """
        if goal is None:
            raise ValueError("Invalid value for `goal`, must not be `None`")  # noqa: E501

        self._goal = goal

    @property
    def lifecycle(self):
        """Gets the lifecycle of this PathStorageResponseDto.  # noqa: E501


        :return: The lifecycle of this PathStorageResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this PathStorageResponseDto.


        :param lifecycle: The lifecycle of this PathStorageResponseDto.  # noqa: E501
        :type: object
        """
        if lifecycle is None:
            raise ValueError("Invalid value for `lifecycle`, must not be `None`")  # noqa: E501

        self._lifecycle = lifecycle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PathStorageResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PathStorageResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
