# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkillDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nested_skills': 'list[str]',
        'parent_skills': 'list[str]',
        'repository_id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'name': 'str',
        'level': 'float',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'nested_skills': 'nestedSkills',
        'parent_skills': 'parentSkills',
        'repository_id': 'repositoryId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'name': 'name',
        'level': 'level',
        'description': 'description'
    }

    def __init__(self, id=None, nested_skills=None, parent_skills=None, repository_id=None, created_at=None, updated_at=None, name=None, level=None, description=None):  # noqa: E501
        """SkillDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nested_skills = None
        self._parent_skills = None
        self._repository_id = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._level = None
        self._description = None
        self.discriminator = None
        self.id = id
        self.nested_skills = nested_skills
        self.parent_skills = parent_skills
        self.repository_id = repository_id
        self.created_at = created_at
        self.updated_at = updated_at
        self.name = name
        self.level = level
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this SkillDto.  # noqa: E501


        :return: The id of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SkillDto.


        :param id: The id of this SkillDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nested_skills(self):
        """Gets the nested_skills of this SkillDto.  # noqa: E501


        :return: The nested_skills of this SkillDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._nested_skills

    @nested_skills.setter
    def nested_skills(self, nested_skills):
        """Sets the nested_skills of this SkillDto.


        :param nested_skills: The nested_skills of this SkillDto.  # noqa: E501
        :type: list[str]
        """
        if nested_skills is None:
            raise ValueError("Invalid value for `nested_skills`, must not be `None`")  # noqa: E501

        self._nested_skills = nested_skills

    @property
    def parent_skills(self):
        """Gets the parent_skills of this SkillDto.  # noqa: E501


        :return: The parent_skills of this SkillDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_skills

    @parent_skills.setter
    def parent_skills(self, parent_skills):
        """Sets the parent_skills of this SkillDto.


        :param parent_skills: The parent_skills of this SkillDto.  # noqa: E501
        :type: list[str]
        """
        if parent_skills is None:
            raise ValueError("Invalid value for `parent_skills`, must not be `None`")  # noqa: E501

        self._parent_skills = parent_skills

    @property
    def repository_id(self):
        """Gets the repository_id of this SkillDto.  # noqa: E501


        :return: The repository_id of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this SkillDto.


        :param repository_id: The repository_id of this SkillDto.  # noqa: E501
        :type: str
        """
        if repository_id is None:
            raise ValueError("Invalid value for `repository_id`, must not be `None`")  # noqa: E501

        self._repository_id = repository_id

    @property
    def created_at(self):
        """Gets the created_at of this SkillDto.  # noqa: E501


        :return: The created_at of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SkillDto.


        :param created_at: The created_at of this SkillDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SkillDto.  # noqa: E501


        :return: The updated_at of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SkillDto.


        :param updated_at: The updated_at of this SkillDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this SkillDto.  # noqa: E501


        :return: The name of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkillDto.


        :param name: The name of this SkillDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def level(self):
        """Gets the level of this SkillDto.  # noqa: E501


        :return: The level of this SkillDto.  # noqa: E501
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SkillDto.


        :param level: The level of this SkillDto.  # noqa: E501
        :type: float
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def description(self):
        """Gets the description of this SkillDto.  # noqa: E501


        :return: The description of this SkillDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SkillDto.


        :param description: The description of this SkillDto.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkillDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkillDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
