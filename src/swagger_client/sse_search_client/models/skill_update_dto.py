# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkillUpdateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nested_skills': 'list[str]',
        'parent_skills': 'list[str]',
        'repository_id': 'str',
        'name': 'str',
        'level': 'float',
        'description': 'str'
    }

    attribute_map = {
        'nested_skills': 'nestedSkills',
        'parent_skills': 'parentSkills',
        'repository_id': 'repositoryId',
        'name': 'name',
        'level': 'level',
        'description': 'description'
    }

    def __init__(self, nested_skills=None, parent_skills=None, repository_id=None, name=None, level=None, description=None):  # noqa: E501
        """SkillUpdateDto - a model defined in Swagger"""  # noqa: E501
        self._nested_skills = None
        self._parent_skills = None
        self._repository_id = None
        self._name = None
        self._level = None
        self._description = None
        self.discriminator = None
        if nested_skills is not None:
            self.nested_skills = nested_skills
        if parent_skills is not None:
            self.parent_skills = parent_skills
        if repository_id is not None:
            self.repository_id = repository_id
        if name is not None:
            self.name = name
        if level is not None:
            self.level = level
        if description is not None:
            self.description = description

    @property
    def nested_skills(self):
        """Gets the nested_skills of this SkillUpdateDto.  # noqa: E501

        Specifies nested child skills: - If undefined: No change - If null: Remove all nested skills - If specified: Replace all nested skills with the specified ones  # noqa: E501

        :return: The nested_skills of this SkillUpdateDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._nested_skills

    @nested_skills.setter
    def nested_skills(self, nested_skills):
        """Sets the nested_skills of this SkillUpdateDto.

        Specifies nested child skills: - If undefined: No change - If null: Remove all nested skills - If specified: Replace all nested skills with the specified ones  # noqa: E501

        :param nested_skills: The nested_skills of this SkillUpdateDto.  # noqa: E501
        :type: list[str]
        """

        self._nested_skills = nested_skills

    @property
    def parent_skills(self):
        """Gets the parent_skills of this SkillUpdateDto.  # noqa: E501

        Specifies parent skills: - If undefined: No change - If null: Remove all parent skills -> Make this a top level skill - If specified: Replace all parent skills with the specified ones  # noqa: E501

        :return: The parent_skills of this SkillUpdateDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_skills

    @parent_skills.setter
    def parent_skills(self, parent_skills):
        """Sets the parent_skills of this SkillUpdateDto.

        Specifies parent skills: - If undefined: No change - If null: Remove all parent skills -> Make this a top level skill - If specified: Replace all parent skills with the specified ones  # noqa: E501

        :param parent_skills: The parent_skills of this SkillUpdateDto.  # noqa: E501
        :type: list[str]
        """

        self._parent_skills = parent_skills

    @property
    def repository_id(self):
        """Gets the repository_id of this SkillUpdateDto.  # noqa: E501

        Moves this and all nested skills to the specified repository.  # noqa: E501

        :return: The repository_id of this SkillUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this SkillUpdateDto.

        Moves this and all nested skills to the specified repository.  # noqa: E501

        :param repository_id: The repository_id of this SkillUpdateDto.  # noqa: E501
        :type: str
        """

        self._repository_id = repository_id

    @property
    def name(self):
        """Gets the name of this SkillUpdateDto.  # noqa: E501

        Renames the skill.  # noqa: E501

        :return: The name of this SkillUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkillUpdateDto.

        Renames the skill.  # noqa: E501

        :param name: The name of this SkillUpdateDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def level(self):
        """Gets the level of this SkillUpdateDto.  # noqa: E501

        Changes the level of the skill.  # noqa: E501

        :return: The level of this SkillUpdateDto.  # noqa: E501
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SkillUpdateDto.

        Changes the level of the skill.  # noqa: E501

        :param level: The level of this SkillUpdateDto.  # noqa: E501
        :type: float
        """

        self._level = level

    @property
    def description(self):
        """Gets the description of this SkillUpdateDto.  # noqa: E501

        Changes the description of the skill: - If undefined: No change - If null: Remove the description - If specified: Replace the description with the specified one  # noqa: E501

        :return: The description of this SkillUpdateDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SkillUpdateDto.

        Changes the description of the skill: - If undefined: No change - If null: Remove the description - If specified: Replace the description with the specified one  # noqa: E501

        :param description: The description of this SkillUpdateDto.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkillUpdateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkillUpdateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
