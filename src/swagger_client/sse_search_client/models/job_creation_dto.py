# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobCreationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jobtitle': 'str',
        'starttime': 'datetime',
        'endtime': 'datetime',
        'company_id': 'str',
        'user_id': 'str',
        'job_id_at_berufe_net': 'str'
    }

    attribute_map = {
        'jobtitle': 'jobtitle',
        'starttime': 'starttime',
        'endtime': 'endtime',
        'company_id': 'companyId',
        'user_id': 'userId',
        'job_id_at_berufe_net': 'jobIdAtBerufeNet'
    }

    def __init__(self, jobtitle=None, starttime=None, endtime=None, company_id=None, user_id=None, job_id_at_berufe_net=None):  # noqa: E501
        """JobCreationDto - a model defined in Swagger"""  # noqa: E501
        self._jobtitle = None
        self._starttime = None
        self._endtime = None
        self._company_id = None
        self._user_id = None
        self._job_id_at_berufe_net = None
        self.discriminator = None
        self.jobtitle = jobtitle
        self.starttime = starttime
        self.endtime = endtime
        self.company_id = company_id
        self.user_id = user_id
        if job_id_at_berufe_net is not None:
            self.job_id_at_berufe_net = job_id_at_berufe_net

    @property
    def jobtitle(self):
        """Gets the jobtitle of this JobCreationDto.  # noqa: E501


        :return: The jobtitle of this JobCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._jobtitle

    @jobtitle.setter
    def jobtitle(self, jobtitle):
        """Sets the jobtitle of this JobCreationDto.


        :param jobtitle: The jobtitle of this JobCreationDto.  # noqa: E501
        :type: str
        """
        if jobtitle is None:
            raise ValueError("Invalid value for `jobtitle`, must not be `None`")  # noqa: E501

        self._jobtitle = jobtitle

    @property
    def starttime(self):
        """Gets the starttime of this JobCreationDto.  # noqa: E501


        :return: The starttime of this JobCreationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this JobCreationDto.


        :param starttime: The starttime of this JobCreationDto.  # noqa: E501
        :type: datetime
        """
        if starttime is None:
            raise ValueError("Invalid value for `starttime`, must not be `None`")  # noqa: E501

        self._starttime = starttime

    @property
    def endtime(self):
        """Gets the endtime of this JobCreationDto.  # noqa: E501


        :return: The endtime of this JobCreationDto.  # noqa: E501
        :rtype: datetime
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this JobCreationDto.


        :param endtime: The endtime of this JobCreationDto.  # noqa: E501
        :type: datetime
        """
        if endtime is None:
            raise ValueError("Invalid value for `endtime`, must not be `None`")  # noqa: E501

        self._endtime = endtime

    @property
    def company_id(self):
        """Gets the company_id of this JobCreationDto.  # noqa: E501


        :return: The company_id of this JobCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this JobCreationDto.


        :param company_id: The company_id of this JobCreationDto.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def user_id(self):
        """Gets the user_id of this JobCreationDto.  # noqa: E501


        :return: The user_id of this JobCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JobCreationDto.


        :param user_id: The user_id of this JobCreationDto.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def job_id_at_berufe_net(self):
        """Gets the job_id_at_berufe_net of this JobCreationDto.  # noqa: E501


        :return: The job_id_at_berufe_net of this JobCreationDto.  # noqa: E501
        :rtype: str
        """
        return self._job_id_at_berufe_net

    @job_id_at_berufe_net.setter
    def job_id_at_berufe_net(self, job_id_at_berufe_net):
        """Sets the job_id_at_berufe_net of this JobCreationDto.


        :param job_id_at_berufe_net: The job_id_at_berufe_net of this JobCreationDto.  # noqa: E501
        :type: str
        """

        self._job_id_at_berufe_net = job_id_at_berufe_net

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobCreationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobCreationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
