# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalizedPathDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'personalized_path_id': 'str',
        'learning_path_id': 'str',
        'goals': 'list[str]',
        'status': 'object',
        'learning_units': 'list[LearningProgressDto]'
    }

    attribute_map = {
        'personalized_path_id': 'personalizedPathId',
        'learning_path_id': 'learningPathId',
        'goals': 'goals',
        'status': 'status',
        'learning_units': 'learningUnits'
    }

    def __init__(self, personalized_path_id=None, learning_path_id=None, goals=None, status=None, learning_units=None):  # noqa: E501
        """PersonalizedPathDto - a model defined in Swagger"""  # noqa: E501
        self._personalized_path_id = None
        self._learning_path_id = None
        self._goals = None
        self._status = None
        self._learning_units = None
        self.discriminator = None
        self.personalized_path_id = personalized_path_id
        self.learning_path_id = learning_path_id
        self.goals = goals
        self.status = status
        self.learning_units = learning_units

    @property
    def personalized_path_id(self):
        """Gets the personalized_path_id of this PersonalizedPathDto.  # noqa: E501

        The id of the personalized path.  # noqa: E501

        :return: The personalized_path_id of this PersonalizedPathDto.  # noqa: E501
        :rtype: str
        """
        return self._personalized_path_id

    @personalized_path_id.setter
    def personalized_path_id(self, personalized_path_id):
        """Sets the personalized_path_id of this PersonalizedPathDto.

        The id of the personalized path.  # noqa: E501

        :param personalized_path_id: The personalized_path_id of this PersonalizedPathDto.  # noqa: E501
        :type: str
        """
        if personalized_path_id is None:
            raise ValueError("Invalid value for `personalized_path_id`, must not be `None`")  # noqa: E501

        self._personalized_path_id = personalized_path_id

    @property
    def learning_path_id(self):
        """Gets the learning_path_id of this PersonalizedPathDto.  # noqa: E501

        The id of the learning path used as a template for the personalized path. Can be null when the path is created by the learner via goals.  # noqa: E501

        :return: The learning_path_id of this PersonalizedPathDto.  # noqa: E501
        :rtype: str
        """
        return self._learning_path_id

    @learning_path_id.setter
    def learning_path_id(self, learning_path_id):
        """Sets the learning_path_id of this PersonalizedPathDto.

        The id of the learning path used as a template for the personalized path. Can be null when the path is created by the learner via goals.  # noqa: E501

        :param learning_path_id: The learning_path_id of this PersonalizedPathDto.  # noqa: E501
        :type: str
        """
        if learning_path_id is None:
            raise ValueError("Invalid value for `learning_path_id`, must not be `None`")  # noqa: E501

        self._learning_path_id = learning_path_id

    @property
    def goals(self):
        """Gets the goals of this PersonalizedPathDto.  # noqa: E501

        The goals (taught skill ids) of the personalized path (created by a learner). Can be empty when the path is based on an existing learning path.  # noqa: E501

        :return: The goals of this PersonalizedPathDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this PersonalizedPathDto.

        The goals (taught skill ids) of the personalized path (created by a learner). Can be empty when the path is based on an existing learning path.  # noqa: E501

        :param goals: The goals of this PersonalizedPathDto.  # noqa: E501
        :type: list[str]
        """
        if goals is None:
            raise ValueError("Invalid value for `goals`, must not be `None`")  # noqa: E501

        self._goals = goals

    @property
    def status(self):
        """Gets the status of this PersonalizedPathDto.  # noqa: E501

        The status of the personalized path. Can be OPEN (newly enrolled), IN_PROGRESS (currently doing at least one contained learning unit), or FINISHED (all learning units are successfully finished)  # noqa: E501

        :return: The status of this PersonalizedPathDto.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PersonalizedPathDto.

        The status of the personalized path. Can be OPEN (newly enrolled), IN_PROGRESS (currently doing at least one contained learning unit), or FINISHED (all learning units are successfully finished)  # noqa: E501

        :param status: The status of this PersonalizedPathDto.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def learning_units(self):
        """Gets the learning_units of this PersonalizedPathDto.  # noqa: E501

        The sequence of the contained learning unit instances (their id and status)  # noqa: E501

        :return: The learning_units of this PersonalizedPathDto.  # noqa: E501
        :rtype: list[LearningProgressDto]
        """
        return self._learning_units

    @learning_units.setter
    def learning_units(self, learning_units):
        """Sets the learning_units of this PersonalizedPathDto.

        The sequence of the contained learning unit instances (their id and status)  # noqa: E501

        :param learning_units: The learning_units of this PersonalizedPathDto.  # noqa: E501
        :type: list[LearningProgressDto]
        """
        if learning_units is None:
            raise ValueError("Invalid value for `learning_units`, must not be `None`")  # noqa: E501

        self._learning_units = learning_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalizedPathDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalizedPathDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
