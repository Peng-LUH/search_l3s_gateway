# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LearningHistoryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'user': 'object',
        'started_learning_units': 'list[str]',
        'learned_skills': 'list[str]',
        'learning_profile': 'list[str]',
        'personal_paths': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'user': 'user',
        'started_learning_units': 'startedLearningUnits',
        'learned_skills': 'learnedSkills',
        'learning_profile': 'learningProfile',
        'personal_paths': 'personalPaths'
    }

    def __init__(self, id=None, user_id=None, user=None, started_learning_units=None, learned_skills=None, learning_profile=None, personal_paths=None):  # noqa: E501
        """LearningHistoryDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._user = None
        self._started_learning_units = None
        self._learned_skills = None
        self._learning_profile = None
        self._personal_paths = None
        self.discriminator = None
        self.id = id
        if user_id is not None:
            self.user_id = user_id
        if user is not None:
            self.user = user
        if started_learning_units is not None:
            self.started_learning_units = started_learning_units
        if learned_skills is not None:
            self.learned_skills = learned_skills
        if learning_profile is not None:
            self.learning_profile = learning_profile
        if personal_paths is not None:
            self.personal_paths = personal_paths

    @property
    def id(self):
        """Gets the id of this LearningHistoryDto.  # noqa: E501


        :return: The id of this LearningHistoryDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LearningHistoryDto.


        :param id: The id of this LearningHistoryDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this LearningHistoryDto.  # noqa: E501


        :return: The user_id of this LearningHistoryDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LearningHistoryDto.


        :param user_id: The user_id of this LearningHistoryDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this LearningHistoryDto.  # noqa: E501


        :return: The user of this LearningHistoryDto.  # noqa: E501
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LearningHistoryDto.


        :param user: The user of this LearningHistoryDto.  # noqa: E501
        :type: object
        """

        self._user = user

    @property
    def started_learning_units(self):
        """Gets the started_learning_units of this LearningHistoryDto.  # noqa: E501


        :return: The started_learning_units of this LearningHistoryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._started_learning_units

    @started_learning_units.setter
    def started_learning_units(self, started_learning_units):
        """Sets the started_learning_units of this LearningHistoryDto.


        :param started_learning_units: The started_learning_units of this LearningHistoryDto.  # noqa: E501
        :type: list[str]
        """

        self._started_learning_units = started_learning_units

    @property
    def learned_skills(self):
        """Gets the learned_skills of this LearningHistoryDto.  # noqa: E501


        :return: The learned_skills of this LearningHistoryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._learned_skills

    @learned_skills.setter
    def learned_skills(self, learned_skills):
        """Sets the learned_skills of this LearningHistoryDto.


        :param learned_skills: The learned_skills of this LearningHistoryDto.  # noqa: E501
        :type: list[str]
        """

        self._learned_skills = learned_skills

    @property
    def learning_profile(self):
        """Gets the learning_profile of this LearningHistoryDto.  # noqa: E501


        :return: The learning_profile of this LearningHistoryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._learning_profile

    @learning_profile.setter
    def learning_profile(self, learning_profile):
        """Sets the learning_profile of this LearningHistoryDto.


        :param learning_profile: The learning_profile of this LearningHistoryDto.  # noqa: E501
        :type: list[str]
        """

        self._learning_profile = learning_profile

    @property
    def personal_paths(self):
        """Gets the personal_paths of this LearningHistoryDto.  # noqa: E501


        :return: The personal_paths of this LearningHistoryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._personal_paths

    @personal_paths.setter
    def personal_paths(self, personal_paths):
        """Sets the personal_paths of this LearningHistoryDto.


        :param personal_paths: The personal_paths of this LearningHistoryDto.  # noqa: E501
        :type: list[str]
        """

        self._personal_paths = personal_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LearningHistoryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearningHistoryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
