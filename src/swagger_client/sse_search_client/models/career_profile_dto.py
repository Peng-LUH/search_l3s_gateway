# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CareerProfileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'job_history': 'list[JobDto]',
        'professional_interests': 'list[str]',
        'qualifications': 'list[QualificationDto]',
        'self_reported_skills': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'job_history': 'jobHistory',
        'professional_interests': 'professionalInterests',
        'qualifications': 'qualifications',
        'self_reported_skills': 'selfReportedSkills'
    }

    def __init__(self, id=None, job_history=None, professional_interests=None, qualifications=None, self_reported_skills=None):  # noqa: E501
        """CareerProfileDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._job_history = None
        self._professional_interests = None
        self._qualifications = None
        self._self_reported_skills = None
        self.discriminator = None
        self.id = id
        self.job_history = job_history
        self.professional_interests = professional_interests
        self.qualifications = qualifications
        self.self_reported_skills = self_reported_skills

    @property
    def id(self):
        """Gets the id of this CareerProfileDto.  # noqa: E501


        :return: The id of this CareerProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CareerProfileDto.


        :param id: The id of this CareerProfileDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def job_history(self):
        """Gets the job_history of this CareerProfileDto.  # noqa: E501


        :return: The job_history of this CareerProfileDto.  # noqa: E501
        :rtype: list[JobDto]
        """
        return self._job_history

    @job_history.setter
    def job_history(self, job_history):
        """Sets the job_history of this CareerProfileDto.


        :param job_history: The job_history of this CareerProfileDto.  # noqa: E501
        :type: list[JobDto]
        """
        if job_history is None:
            raise ValueError("Invalid value for `job_history`, must not be `None`")  # noqa: E501

        self._job_history = job_history

    @property
    def professional_interests(self):
        """Gets the professional_interests of this CareerProfileDto.  # noqa: E501


        :return: The professional_interests of this CareerProfileDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._professional_interests

    @professional_interests.setter
    def professional_interests(self, professional_interests):
        """Sets the professional_interests of this CareerProfileDto.


        :param professional_interests: The professional_interests of this CareerProfileDto.  # noqa: E501
        :type: list[str]
        """
        if professional_interests is None:
            raise ValueError("Invalid value for `professional_interests`, must not be `None`")  # noqa: E501

        self._professional_interests = professional_interests

    @property
    def qualifications(self):
        """Gets the qualifications of this CareerProfileDto.  # noqa: E501


        :return: The qualifications of this CareerProfileDto.  # noqa: E501
        :rtype: list[QualificationDto]
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """Sets the qualifications of this CareerProfileDto.


        :param qualifications: The qualifications of this CareerProfileDto.  # noqa: E501
        :type: list[QualificationDto]
        """
        if qualifications is None:
            raise ValueError("Invalid value for `qualifications`, must not be `None`")  # noqa: E501

        self._qualifications = qualifications

    @property
    def self_reported_skills(self):
        """Gets the self_reported_skills of this CareerProfileDto.  # noqa: E501


        :return: The self_reported_skills of this CareerProfileDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._self_reported_skills

    @self_reported_skills.setter
    def self_reported_skills(self, self_reported_skills):
        """Sets the self_reported_skills of this CareerProfileDto.


        :param self_reported_skills: The self_reported_skills of this CareerProfileDto.  # noqa: E501
        :type: list[str]
        """
        if self_reported_skills is None:
            raise ValueError("Invalid value for `self_reported_skills`, must not be `None`")  # noqa: E501

        self._self_reported_skills = self_reported_skills

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CareerProfileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CareerProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
