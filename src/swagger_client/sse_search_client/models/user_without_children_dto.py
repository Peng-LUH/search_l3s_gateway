# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserWithoutChildrenDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'learning_profile_id': 'str',
        'career_profile_id': 'str',
        'learning_history_id': 'str',
        'status': 'object'
    }

    attribute_map = {
        'id': 'id',
        'learning_profile_id': 'learningProfileId',
        'career_profile_id': 'careerProfileId',
        'learning_history_id': 'learningHistoryId',
        'status': 'status'
    }

    def __init__(self, id=None, learning_profile_id=None, career_profile_id=None, learning_history_id=None, status=None):  # noqa: E501
        """UserWithoutChildrenDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._learning_profile_id = None
        self._career_profile_id = None
        self._learning_history_id = None
        self._status = None
        self.discriminator = None
        self.id = id
        self.learning_profile_id = learning_profile_id
        self.career_profile_id = career_profile_id
        self.learning_history_id = learning_history_id
        self.status = status

    @property
    def id(self):
        """Gets the id of this UserWithoutChildrenDto.  # noqa: E501


        :return: The id of this UserWithoutChildrenDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserWithoutChildrenDto.


        :param id: The id of this UserWithoutChildrenDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def learning_profile_id(self):
        """Gets the learning_profile_id of this UserWithoutChildrenDto.  # noqa: E501


        :return: The learning_profile_id of this UserWithoutChildrenDto.  # noqa: E501
        :rtype: str
        """
        return self._learning_profile_id

    @learning_profile_id.setter
    def learning_profile_id(self, learning_profile_id):
        """Sets the learning_profile_id of this UserWithoutChildrenDto.


        :param learning_profile_id: The learning_profile_id of this UserWithoutChildrenDto.  # noqa: E501
        :type: str
        """
        if learning_profile_id is None:
            raise ValueError("Invalid value for `learning_profile_id`, must not be `None`")  # noqa: E501

        self._learning_profile_id = learning_profile_id

    @property
    def career_profile_id(self):
        """Gets the career_profile_id of this UserWithoutChildrenDto.  # noqa: E501


        :return: The career_profile_id of this UserWithoutChildrenDto.  # noqa: E501
        :rtype: str
        """
        return self._career_profile_id

    @career_profile_id.setter
    def career_profile_id(self, career_profile_id):
        """Sets the career_profile_id of this UserWithoutChildrenDto.


        :param career_profile_id: The career_profile_id of this UserWithoutChildrenDto.  # noqa: E501
        :type: str
        """
        if career_profile_id is None:
            raise ValueError("Invalid value for `career_profile_id`, must not be `None`")  # noqa: E501

        self._career_profile_id = career_profile_id

    @property
    def learning_history_id(self):
        """Gets the learning_history_id of this UserWithoutChildrenDto.  # noqa: E501


        :return: The learning_history_id of this UserWithoutChildrenDto.  # noqa: E501
        :rtype: str
        """
        return self._learning_history_id

    @learning_history_id.setter
    def learning_history_id(self, learning_history_id):
        """Sets the learning_history_id of this UserWithoutChildrenDto.


        :param learning_history_id: The learning_history_id of this UserWithoutChildrenDto.  # noqa: E501
        :type: str
        """
        if learning_history_id is None:
            raise ValueError("Invalid value for `learning_history_id`, must not be `None`")  # noqa: E501

        self._learning_history_id = learning_history_id

    @property
    def status(self):
        """Gets the status of this UserWithoutChildrenDto.  # noqa: E501


        :return: The status of this UserWithoutChildrenDto.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserWithoutChildrenDto.


        :param status: The status of this UserWithoutChildrenDto.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserWithoutChildrenDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserWithoutChildrenDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
