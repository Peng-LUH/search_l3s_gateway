# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sse_search_client.api_client import ApiClient


class CareerProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def career_profile_controller_add_career_profile(self, body, **kwargs):  # noqa: E501
        """career_profile_controller_add_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_career_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_add_career_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_add_career_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_add_career_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """career_profile_controller_add_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_career_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_add_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_add_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_add_job(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_add_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_job(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: JobCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_add_job_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_add_job_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_add_job_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_add_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_job_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: JobCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_add_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_add_job`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_add_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/job_history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_add_qualification_to_career_profile(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_add_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_qualification_to_career_profile(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_add_qualification_to_career_profile_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_add_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_add_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_add_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_add_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_del_career_profile_by_id(self, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_del_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_del_career_profile_by_id(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_del_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_del_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_del_career_profile_by_id_with_http_info(self, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_del_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_del_career_profile_by_id_with_http_info(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_del_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_del_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_delete_job_history_at_career_profile_by_id(self, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """career_profile_controller_delete_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_delete_job_history_at_career_profile_by_id(career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_delete_job_history_at_career_profile_by_id_with_http_info(self, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """career_profile_controller_delete_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id', 'job_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_delete_job_history_at_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_delete_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'job_history_id' is set
        if ('job_history_id' not in params or
                params['job_history_id'] is None):
            raise ValueError("Missing the required parameter `job_history_id` when calling `career_profile_controller_delete_job_history_at_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'job_history_id' in params:
            path_params['job_history_id'] = params['job_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/{job_history_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_delete_qualification_to_career_profile(self, career_profile_id, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_delete_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_delete_qualification_to_career_profile(career_profile_id, qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualification_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_delete_qualification_to_career_profile_with_http_info(self, career_profile_id, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_delete_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id', 'qualification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_delete_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_delete_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'qualification_id' is set
        if ('qualification_id' not in params or
                params['qualification_id'] is None):
            raise ValueError("Missing the required parameter `qualification_id` when calling `career_profile_controller_delete_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'qualification_id' in params:
            path_params['qualification_id'] = params['qualification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualification_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_get_career_profile_by_filter(self, **kwargs):  # noqa: E501
        """career_profile_controller_get_career_profile_by_filter  # noqa: E501

        If we specify a user ID, we get their career profile(s). Otherwise, get all profiles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_career_profile_by_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by userId
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_get_career_profile_by_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_get_career_profile_by_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def career_profile_controller_get_career_profile_by_filter_with_http_info(self, **kwargs):  # noqa: E501
        """career_profile_controller_get_career_profile_by_filter  # noqa: E501

        If we specify a user ID, we get their career profile(s). Otherwise, get all profiles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_career_profile_by_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by userId
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_get_career_profile_by_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_get_career_profile_by_id(self, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_get_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_career_profile_by_id(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_get_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_get_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_get_career_profile_by_id_with_http_info(self, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_get_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_career_profile_by_id_with_http_info(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_get_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_get_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_get_qualification_for_career_profile(self, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_get_qualification_for_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_qualification_for_career_profile(qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_get_qualification_for_career_profile_with_http_info(qualification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_get_qualification_for_career_profile_with_http_info(qualification_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_get_qualification_for_career_profile_with_http_info(self, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_get_qualification_for_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_get_qualification_for_career_profile_with_http_info(qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qualification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_get_qualification_for_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qualification_id' is set
        if ('qualification_id' not in params or
                params['qualification_id'] is None):
            raise ValueError("Missing the required parameter `qualification_id` when calling `career_profile_controller_get_qualification_for_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qualification_id' in params:
            path_params['qualification_id'] = params['qualification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualification_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_patch_career_profile_by_id(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_career_profile_by_id(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_patch_career_profile_by_id_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_patch_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_patch_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_patch_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_patch_job_history_at_career_profile_by_id(self, body, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_job_history_at_career_profile_by_id(body, career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobUpdateDto body: (required)
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_patch_job_history_at_career_profile_by_id_with_http_info(self, body, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobUpdateDto body: (required)
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id', 'job_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_patch_job_history_at_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'job_history_id' is set
        if ('job_history_id' not in params or
                params['job_history_id'] is None):
            raise ValueError("Missing the required parameter `job_history_id` when calling `career_profile_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'job_history_id' in params:
            path_params['job_history_id'] = params['job_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/{job_history_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def career_profile_controller_patch_qualification_to_career_profile(self, body, career_profile_id, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_qualification_to_career_profile(body, career_profile_id, qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.career_profile_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.career_profile_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualification_id, **kwargs)  # noqa: E501
            return data

    def career_profile_controller_patch_qualification_to_career_profile_with_http_info(self, body, career_profile_id, qualification_id, **kwargs):  # noqa: E501
        """career_profile_controller_patch_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.career_profile_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :param str qualification_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id', 'qualification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method career_profile_controller_patch_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `career_profile_controller_patch_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `career_profile_controller_patch_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'qualification_id' is set
        if ('qualification_id' not in params or
                params['qualification_id'] is None):
            raise ValueError("Missing the required parameter `qualification_id` when calling `career_profile_controller_patch_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'qualification_id' in params:
            path_params['qualification_id'] = params['qualification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualification_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
