# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sse_search_client.api_client import ApiClient


class LearningHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def learning_history_controller_add_learning_history(self, body, **kwargs):  # noqa: E501
        """learning_history_controller_add_learning_history  # noqa: E501

        learningHistoryId Creates a new learningHistory and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_add_learning_history(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :return: LearningHistoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_add_learning_history_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_add_learning_history_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_add_learning_history_with_http_info(self, body, **kwargs):  # noqa: E501
        """learning_history_controller_add_learning_history  # noqa: E501

        learningHistoryId Creates a new learningHistory and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_add_learning_history_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :return: LearningHistoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_add_learning_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `learning_history_controller_add_learning_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningHistoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_del_comp_path_by_id(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_del_comp_path_by_id(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_del_comp_path_by_id_with_http_info(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_del_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `learning_history_controller_del_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `learning_history_controller_del_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_delete_learning_history(self, learning_history_id, **kwargs):  # noqa: E501
        """learning_history_controller_delete_learning_history  # noqa: E501

        Deletes the specified learningHistory from the database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_delete_learning_history(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: LearningHistoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_delete_learning_history_with_http_info(learning_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_delete_learning_history_with_http_info(learning_history_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_delete_learning_history_with_http_info(self, learning_history_id, **kwargs):  # noqa: E501
        """learning_history_controller_delete_learning_history  # noqa: E501

        Deletes the specified learningHistory from the database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_delete_learning_history_with_http_info(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: LearningHistoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_delete_learning_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_history_id' is set
        if ('learning_history_id' not in params or
                params['learning_history_id'] is None):
            raise ValueError("Missing the required parameter `learning_history_id` when calling `learning_history_controller_delete_learning_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_history_id' in params:
            path_params['learningHistoryId'] = params['learning_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{learningHistoryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningHistoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_get_comp_path_by_id(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_comp_path_by_id(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_get_comp_path_by_id_with_http_info(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_get_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `learning_history_controller_get_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `learning_history_controller_get_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_get_comp_paths_ids_by_history_by_id(self, learning_history_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        Fetch all Computed Paths for a given LearningHistoryId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_comp_paths_ids_by_history_by_id(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_get_comp_paths_ids_by_history_by_id_with_http_info(learning_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_get_comp_paths_ids_by_history_by_id_with_http_info(learning_history_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_get_comp_paths_ids_by_history_by_id_with_http_info(self, learning_history_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        Fetch all Computed Paths for a given LearningHistoryId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_comp_paths_ids_by_history_by_id_with_http_info(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_get_comp_paths_ids_by_history_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_history_id' is set
        if ('learning_history_id' not in params or
                params['learning_history_id'] is None):
            raise ValueError("Missing the required parameter `learning_history_id` when calling `learning_history_controller_get_comp_paths_ids_by_history_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_history_id' in params:
            path_params['learningHistoryId'] = params['learning_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{learningHistoryId}/getComputedPaths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_get_learning_history(self, learning_history_id, **kwargs):  # noqa: E501
        """learning_history_controller_get_learning_history  # noqa: E501

        Returns the specified learningHistory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_learning_history(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_get_learning_history_with_http_info(learning_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_get_learning_history_with_http_info(learning_history_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_get_learning_history_with_http_info(self, learning_history_id, **kwargs):  # noqa: E501
        """learning_history_controller_get_learning_history  # noqa: E501

        Returns the specified learningHistory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_get_learning_history_with_http_info(learning_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_get_learning_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_history_id' is set
        if ('learning_history_id' not in params or
                params['learning_history_id'] is None):
            raise ValueError("Missing the required parameter `learning_history_id` when calling `learning_history_controller_get_learning_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_history_id' in params:
            path_params['learningHistoryId'] = params['learning_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{learningHistoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_history_controller_patch_comp_path_by_id(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_patch_comp_path_by_id(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_history_controller_patch_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_history_controller_patch_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def learning_history_controller_patch_comp_path_by_id_with_http_info(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_history_controller_patch_comp_path_by_id_with_http_info(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_history_controller_patch_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `learning_history_controller_patch_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `learning_history_controller_patch_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
