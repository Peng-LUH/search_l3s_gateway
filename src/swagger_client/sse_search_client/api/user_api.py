# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sse_search_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_mgmt_controller_add_career_profile(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_career_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_career_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_career_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_career_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_career_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/add_CareerProfile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_company(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_company(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyCreationDto body: (required)
        :return: CompanyCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_company_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_company_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_company_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_company  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_company_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompanyCreationDto body: (required)
        :return: CompanyCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/add_company', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_job(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_job(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: JobCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_job_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_job_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_job_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_job_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: JobCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_job`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_add_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/job_history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_learning_history(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_learning_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_learning_history(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :return: LearningHistoryCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_learning_history_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_learning_history_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_learning_history_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_learning_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_learning_history_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :return: LearningHistoryCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_learning_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_learning_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/add_LearningHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningHistoryCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_learning_profile(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_learning_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_learning_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileCreationDto body: (required)
        :return: LearningProfileCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_learning_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_learning_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_learning_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_learning_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_learning_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileCreationDto body: (required)
        :return: LearningProfileCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_learning_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_learning_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/add_learningProfile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningProfileCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_qualification_to_career_profile(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_qualification_to_career_profile(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_qualification_to_career_profile_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_qualification_to_career_profile_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_add_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_add_user(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_user  # noqa: E501

        Creates a new user returns the created user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreationDto body: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_add_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_add_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_add_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """user_mgmt_controller_add_user  # noqa: E501

        Creates a new user returns the created user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_add_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserCreationDto body: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_create_learning_history(self, body, history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_create_learning_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_create_learning_history(body, history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :param str history_id: (required)
        :return: LearningHistoryCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_create_learning_history_with_http_info(body, history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_create_learning_history_with_http_info(body, history_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_create_learning_history_with_http_info(self, body, history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_create_learning_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_create_learning_history_with_http_info(body, history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningHistoryCreationDto body: (required)
        :param str history_id: (required)
        :return: LearningHistoryCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_create_learning_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_create_learning_history`")  # noqa: E501
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `user_mgmt_controller_create_learning_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningHistoryCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_create_learning_progress(self, body, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_create_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_create_learning_progress(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLearningProgressDto body: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_create_learning_progress_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_create_learning_progress_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_create_learning_progress_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_create_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_create_learning_progress_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLearningProgressDto body: (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_create_learning_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_create_learning_progress`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_mgmt_controller_create_learning_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{id}/learning-progress', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_del_career_profile_by_id(self, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_del_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_career_profile_by_id(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_del_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_del_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_del_career_profile_by_id_with_http_info(self, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_del_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_career_profile_by_id_with_http_info(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_del_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_del_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_del_comp_path_by_id(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_comp_path_by_id(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_del_comp_path_by_id_with_http_info(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_comp_path_by_id_with_http_info(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_del_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `user_mgmt_controller_del_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `user_mgmt_controller_del_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_del_learning_profile_by_id(self, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_del_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_learning_profile_by_id(learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_del_learning_profile_by_id_with_http_info(learning_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_del_learning_profile_by_id_with_http_info(learning_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_del_learning_profile_by_id_with_http_info(self, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_del_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_del_learning_profile_by_id_with_http_info(learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_del_learning_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_profile_id' is set
        if ('learning_profile_id' not in params or
                params['learning_profile_id'] is None):
            raise ValueError("Missing the required parameter `learning_profile_id` when calling `user_mgmt_controller_del_learning_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_profile_id' in params:
            path_params['learning_profile_id'] = params['learning_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-profiles/{learning_profile_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_delete_job_history_at_career_profile_by_id(self, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_job_history_at_career_profile_by_id(career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_delete_job_history_at_career_profile_by_id_with_http_info(self, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_job_history_at_career_profile_by_id_with_http_info(career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id', 'job_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_delete_job_history_at_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_delete_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'job_history_id' is set
        if ('job_history_id' not in params or
                params['job_history_id'] is None):
            raise ValueError("Missing the required parameter `job_history_id` when calling `user_mgmt_controller_delete_job_history_at_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'job_history_id' in params:
            path_params['job_history_id'] = params['job_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/{job_history_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_delete_learning_progress(self, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_learning_progress(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_delete_learning_progress_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_delete_learning_progress_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_delete_learning_progress_with_http_info(self, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_learning_progress_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_delete_learning_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_mgmt_controller_delete_learning_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{id}/learning-progress', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_delete_qualification_to_career_profile(self, career_profile_id, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_qualification_to_career_profile(career_profile_id, qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualificaion_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualificaion_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_delete_qualification_to_career_profile_with_http_info(self, career_profile_id, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_delete_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_delete_qualification_to_career_profile_with_http_info(career_profile_id, qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id', 'qualificaion_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_delete_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_delete_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'qualificaion_id' is set
        if ('qualificaion_id' not in params or
                params['qualificaion_id'] is None):
            raise ValueError("Missing the required parameter `qualificaion_id` when calling `user_mgmt_controller_delete_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'qualificaion_id' in params:
            path_params['qualificaion_id'] = params['qualificaion_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualificaion_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_deleteuser_profiles(self, user_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_deleteuser_profiles  # noqa: E501

        Deletes the specified user-profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_deleteuser_profiles(user_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_profile_id: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_deleteuser_profiles_with_http_info(user_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_deleteuser_profiles_with_http_info(user_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_deleteuser_profiles_with_http_info(self, user_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_deleteuser_profiles  # noqa: E501

        Deletes the specified user-profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_deleteuser_profiles_with_http_info(user_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_profile_id: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_deleteuser_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_profile_id' is set
        if ('user_profile_id' not in params or
                params['user_profile_id'] is None):
            raise ValueError("Missing the required parameter `user_profile_id` when calling `user_mgmt_controller_deleteuser_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_profile_id' in params:
            path_params['user_profile_id'] = params['user_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user-profiles/{user_profile_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_career_profile_by_filter(self, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_career_profile_by_filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_career_profile_by_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by userId
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_career_profile_by_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_career_profile_by_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_career_profile_by_filter_with_http_info(self, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_career_profile_by_filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_career_profile_by_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by userId
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_career_profile_by_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_career_profile_by_id(self, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_career_profile_by_id(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_career_profile_by_id_with_http_info(career_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_career_profile_by_id_with_http_info(self, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_career_profile_by_id_with_http_info(career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_get_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_comp_path_by_id(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_comp_path_by_id(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_comp_path_by_id_with_http_info(self, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_comp_path_by_id_with_http_info(history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `user_mgmt_controller_get_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `user_mgmt_controller_get_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_learning_history_by_id(self, history_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_learning_history_by_id(history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_learning_history_by_id_with_http_info(history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_learning_history_by_id_with_http_info(history_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_learning_history_by_id_with_http_info(self, history_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_learning_history_by_id_with_http_info(history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_learning_history_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `user_mgmt_controller_get_learning_history_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_learning_profile_by_id(self, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_learning_profile_by_id(learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_learning_profile_by_id_with_http_info(learning_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_learning_profile_by_id_with_http_info(learning_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_learning_profile_by_id_with_http_info(self, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_learning_profile_by_id_with_http_info(learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str learning_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_learning_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learning_profile_id' is set
        if ('learning_profile_id' not in params or
                params['learning_profile_id'] is None):
            raise ValueError("Missing the required parameter `learning_profile_id` when calling `user_mgmt_controller_get_learning_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_profile_id' in params:
            path_params['learning_profile_id'] = params['learning_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-profiles/{learning_profile_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_qualification_for_career_profile(self, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_qualification_for_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_qualification_for_career_profile(qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_qualification_for_career_profile_with_http_info(qualificaion_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_qualification_for_career_profile_with_http_info(qualificaion_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_qualification_for_career_profile_with_http_info(self, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_qualification_for_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_qualification_for_career_profile_with_http_info(qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qualificaion_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_qualification_for_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qualificaion_id' is set
        if ('qualificaion_id' not in params or
                params['qualificaion_id'] is None):
            raise ValueError("Missing the required parameter `qualificaion_id` when calling `user_mgmt_controller_get_qualification_for_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qualificaion_id' in params:
            path_params['qualificaion_id'] = params['qualificaion_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualificaion_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_get_user_learning_progress(self, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_user_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_user_learning_progress(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_get_user_learning_progress_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_get_user_learning_progress_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_get_user_learning_progress_with_http_info(self, id, **kwargs):  # noqa: E501
        """user_mgmt_controller_get_user_learning_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_get_user_learning_progress_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_get_user_learning_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_mgmt_controller_get_user_learning_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{id}/learning-progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_getuser_profiles(self, user_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_getuser_profiles  # noqa: E501

        Returns the specified user-profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_getuser_profiles(user_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_profile_id: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_getuser_profiles_with_http_info(user_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_getuser_profiles_with_http_info(user_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_getuser_profiles_with_http_info(self, user_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_getuser_profiles  # noqa: E501

        Returns the specified user-profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_getuser_profiles_with_http_info(user_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_profile_id: (required)
        :return: UserDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_getuser_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_profile_id' is set
        if ('user_profile_id' not in params or
                params['user_profile_id'] is None):
            raise ValueError("Missing the required parameter `user_profile_id` when calling `user_mgmt_controller_getuser_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_profile_id' in params:
            path_params['user_profile_id'] = params['user_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user-profiles/{user_profile_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_list_users(self, **kwargs):  # noqa: E501
        """user_mgmt_controller_list_users  # noqa: E501

        Lists all users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_list_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_list_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_list_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_list_users_with_http_info(self, **kwargs):  # noqa: E501
        """user_mgmt_controller_list_users  # noqa: E501

        Lists all users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_list_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_list_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/showAllUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_patch_career_profile_by_id(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_career_profile_by_id(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_patch_career_profile_by_id_with_http_info(self, body, career_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_career_profile_by_id_with_http_info(body, career_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CareerProfileCreationDto body: (required)
        :param str career_profile_id: (required)
        :return: CareerProfileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_patch_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_patch_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_patch_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CareerProfileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_patch_comp_path_by_id(self, body, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_comp_path_by_id(body, history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileDto body: (required)
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_patch_comp_path_by_id_with_http_info(body, history_id, comp_path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_patch_comp_path_by_id_with_http_info(body, history_id, comp_path_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_patch_comp_path_by_id_with_http_info(self, body, history_id, comp_path_id, **kwargs):  # noqa: E501
        """Experimental (WIP)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_comp_path_by_id_with_http_info(body, history_id, comp_path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileDto body: (required)
        :param str history_id: (required)
        :param str comp_path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'history_id', 'comp_path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_patch_comp_path_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_patch_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'history_id' is set
        if ('history_id' not in params or
                params['history_id'] is None):
            raise ValueError("Missing the required parameter `history_id` when calling `user_mgmt_controller_patch_comp_path_by_id`")  # noqa: E501
        # verify the required parameter 'comp_path_id' is set
        if ('comp_path_id' not in params or
                params['comp_path_id'] is None):
            raise ValueError("Missing the required parameter `comp_path_id` when calling `user_mgmt_controller_patch_comp_path_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_id' in params:
            path_params['history_id'] = params['history_id']  # noqa: E501
        if 'comp_path_id' in params:
            path_params['comp_path_id'] = params['comp_path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-history/{history_id}/{comp_path_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_patch_job_history_at_career_profile_by_id(self, body, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_job_history_at_career_profile_by_id(body, career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobUpdateDto body: (required)
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_patch_job_history_at_career_profile_by_id_with_http_info(self, body, career_profile_id, job_history_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_job_history_at_career_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_job_history_at_career_profile_by_id_with_http_info(body, career_profile_id, job_history_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobUpdateDto body: (required)
        :param str career_profile_id: (required)
        :param str job_history_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id', 'job_history_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_patch_job_history_at_career_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501
        # verify the required parameter 'job_history_id' is set
        if ('job_history_id' not in params or
                params['job_history_id'] is None):
            raise ValueError("Missing the required parameter `job_history_id` when calling `user_mgmt_controller_patch_job_history_at_career_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'job_history_id' in params:
            path_params['job_history_id'] = params['job_history_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/{job_history_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_patch_learning_profile_by_id(self, body, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_learning_profile_by_id(body, learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileDto body: (required)
        :param str learning_profile_id: (required)
        :return: LearningProfileCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_patch_learning_profile_by_id_with_http_info(body, learning_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_patch_learning_profile_by_id_with_http_info(body, learning_profile_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_patch_learning_profile_by_id_with_http_info(self, body, learning_profile_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_learning_profile_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_learning_profile_by_id_with_http_info(body, learning_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LearningProfileDto body: (required)
        :param str learning_profile_id: (required)
        :return: LearningProfileCreationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'learning_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_patch_learning_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_patch_learning_profile_by_id`")  # noqa: E501
        # verify the required parameter 'learning_profile_id' is set
        if ('learning_profile_id' not in params or
                params['learning_profile_id'] is None):
            raise ValueError("Missing the required parameter `learning_profile_id` when calling `user_mgmt_controller_patch_learning_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'learning_profile_id' in params:
            path_params['learning_profile_id'] = params['learning_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-profiles/{learning_profile_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningProfileCreationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_mgmt_controller_patch_qualification_to_career_profile(self, body, career_profile_id, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_qualification_to_career_profile(body, career_profile_id, qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_mgmt_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualificaion_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_mgmt_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualificaion_id, **kwargs)  # noqa: E501
            return data

    def user_mgmt_controller_patch_qualification_to_career_profile_with_http_info(self, body, career_profile_id, qualificaion_id, **kwargs):  # noqa: E501
        """user_mgmt_controller_patch_qualification_to_career_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_mgmt_controller_patch_qualification_to_career_profile_with_http_info(body, career_profile_id, qualificaion_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :param str career_profile_id: (required)
        :param str qualificaion_id: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'career_profile_id', 'qualificaion_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_mgmt_controller_patch_qualification_to_career_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_mgmt_controller_patch_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'career_profile_id' is set
        if ('career_profile_id' not in params or
                params['career_profile_id'] is None):
            raise ValueError("Missing the required parameter `career_profile_id` when calling `user_mgmt_controller_patch_qualification_to_career_profile`")  # noqa: E501
        # verify the required parameter 'qualificaion_id' is set
        if ('qualificaion_id' not in params or
                params['qualificaion_id'] is None):
            raise ValueError("Missing the required parameter `qualificaion_id` when calling `user_mgmt_controller_patch_qualification_to_career_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'career_profile_id' in params:
            path_params['career_profile_id'] = params['career_profile_id']  # noqa: E501
        if 'qualificaion_id' in params:
            path_params['qualificaion_id'] = params['qualificaion_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/career-profiles/{career_profile_id}/qualifications/{qualificaion_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
