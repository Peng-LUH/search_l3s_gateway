# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sse_search_client.api_client import ApiClient


class LearningPathApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def learning_path_mgmt_controller_create_empty_learning_path(self, body, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_create_empty_learning_path  # noqa: E501

        Creates a new empty learning path for the specified owner (orga-id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_create_empty_learning_path(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEmptyPathRequestDto body: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_create_empty_learning_path_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_create_empty_learning_path_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_create_empty_learning_path_with_http_info(self, body, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_create_empty_learning_path  # noqa: E501

        Creates a new empty learning path for the specified owner (orga-id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_create_empty_learning_path_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEmptyPathRequestDto body: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_create_empty_learning_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `learning_path_mgmt_controller_create_empty_learning_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningPathDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_path_mgmt_controller_delete_learning_path(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_delete_learning_path  # noqa: E501

        Deletes a drafted Learning-Path or returns a 403 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_delete_learning_path(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_delete_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_delete_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_delete_learning_path_with_http_info(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_delete_learning_path  # noqa: E501

        Deletes a drafted Learning-Path or returns a 403 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_delete_learning_path_with_http_info(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_delete_learning_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_id' is set
        if ('path_id' not in params or
                params['path_id'] is None):
            raise ValueError("Missing the required parameter `path_id` when calling `learning_path_mgmt_controller_delete_learning_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_id' in params:
            path_params['pathId'] = params['path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths/{pathId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_path_mgmt_controller_get_learning_path(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_get_learning_path  # noqa: E501

        Returns the specified learningpath.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_get_learning_path(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_get_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_get_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_get_learning_path_with_http_info(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_get_learning_path  # noqa: E501

        Returns the specified learningpath.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_get_learning_path_with_http_info(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_get_learning_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_id' is set
        if ('path_id' not in params or
                params['path_id'] is None):
            raise ValueError("Missing the required parameter `path_id` when calling `learning_path_mgmt_controller_get_learning_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_id' in params:
            path_params['pathId'] = params['path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths/{pathId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningPathDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_path_mgmt_controller_get_learning_paths_of_owner(self, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_get_learning_paths_of_owner  # noqa: E501

        Returns all LearningPaths of the specified owner (orga-id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_get_learning_paths_of_owner(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Filter by owner if value is given, otherwise return all
        :param str page: Page number - set up value if pagination is needed
        :param float page_size: Number of items per page - set up value if pagination is needed
        :return: LearningPathListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_get_learning_paths_of_owner_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_get_learning_paths_of_owner_with_http_info(**kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_get_learning_paths_of_owner_with_http_info(self, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_get_learning_paths_of_owner  # noqa: E501

        Returns all LearningPaths of the specified owner (orga-id).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_get_learning_paths_of_owner_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: Filter by owner if value is given, otherwise return all
        :param str page: Page number - set up value if pagination is needed
        :param float page_size: Number of items per page - set up value if pagination is needed
        :return: LearningPathListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_get_learning_paths_of_owner" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningPathListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_path_mgmt_controller_update_learning_path(self, body, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_update_learning_path  # noqa: E501

        Partially updates a LearningPath. This function considers a tristate logic: - null: The field shall be deleted (reset to default), this is supported only by optional fields - undefined: The field shall not be changed - value: The field shall be updated to the given value  To specify a suggested ordering you need to pass the affected learning unit IDs in the array \"recommendedUnitSequence\" in the desired order. The old order will always be completely overwritten if a \"recommendedUnitSequence\" is defined, i.e., the recommendation of unspecified units will be deleted for this LearningPath. The old order will be kept if \"recommendedUnitSequence\" is undefined/not passed as parameter.  Default ordering of first 5 units of the first DigiMedia chapter: ```json {   \"recommendedUnitSequence\": [\"2001\", \"2002\", \"2005\", \"2003\", \"2004\"] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_update_learning_path(body, path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePathRequestDto body: (required)
        :param str path_id: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_update_learning_path_with_http_info(body, path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_update_learning_path_with_http_info(body, path_id, **kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_update_learning_path_with_http_info(self, body, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_update_learning_path  # noqa: E501

        Partially updates a LearningPath. This function considers a tristate logic: - null: The field shall be deleted (reset to default), this is supported only by optional fields - undefined: The field shall not be changed - value: The field shall be updated to the given value  To specify a suggested ordering you need to pass the affected learning unit IDs in the array \"recommendedUnitSequence\" in the desired order. The old order will always be completely overwritten if a \"recommendedUnitSequence\" is defined, i.e., the recommendation of unspecified units will be deleted for this LearningPath. The old order will be kept if \"recommendedUnitSequence\" is undefined/not passed as parameter.  Default ordering of first 5 units of the first DigiMedia chapter: ```json {   \"recommendedUnitSequence\": [\"2001\", \"2002\", \"2005\", \"2003\", \"2004\"] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_update_learning_path_with_http_info(body, path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePathRequestDto body: (required)
        :param str path_id: (required)
        :return: LearningPathDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_update_learning_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `learning_path_mgmt_controller_update_learning_path`")  # noqa: E501
        # verify the required parameter 'path_id' is set
        if ('path_id' not in params or
                params['path_id'] is None):
            raise ValueError("Missing the required parameter `path_id` when calling `learning_path_mgmt_controller_update_learning_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_id' in params:
            path_params['pathId'] = params['path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths/{pathId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningPathDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def learning_path_mgmt_controller_validate_learning_path(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_validate_learning_path  # noqa: E501

        Re-validates an existing learning path. Checks: - The path contains cycles - The goal can be reached (if actually a path exists)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_validate_learning_path(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.learning_path_mgmt_controller_validate_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
        else:
            (data) = self.learning_path_mgmt_controller_validate_learning_path_with_http_info(path_id, **kwargs)  # noqa: E501
            return data

    def learning_path_mgmt_controller_validate_learning_path_with_http_info(self, path_id, **kwargs):  # noqa: E501
        """learning_path_mgmt_controller_validate_learning_path  # noqa: E501

        Re-validates an existing learning path. Checks: - The path contains cycles - The goal can be reached (if actually a path exists)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.learning_path_mgmt_controller_validate_learning_path_with_http_info(path_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method learning_path_mgmt_controller_validate_learning_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path_id' is set
        if ('path_id' not in params or
                params['path_id'] is None):
            raise ValueError("Missing the required parameter `path_id` when calling `learning_path_mgmt_controller_validate_learning_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_id' in params:
            path_params['pathId'] = params['path_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learning-paths/{pathId}/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
