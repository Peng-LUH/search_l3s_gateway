# coding: utf-8

"""
    L3S Search Service for SEARCH

    Welcome to the Swagger UI documentation site test!  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DtoDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'owner': 'list[str]',
        'entity_id': 'str',
        'entity_id_full': 'str',
        'entity_type': 'str',
        'contents': 'str'
    }

    attribute_map = {
        'id': 'id',
        'owner': 'owner',
        'entity_id': 'entity_id',
        'entity_id_full': 'entity_id_full',
        'entity_type': 'entity_type',
        'contents': 'contents'
    }

    def __init__(self, id=None, owner=None, entity_id=None, entity_id_full=None, entity_type=None, contents=None):  # noqa: E501
        """DtoDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._owner = None
        self._entity_id = None
        self._entity_id_full = None
        self._entity_type = None
        self._contents = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_id_full is not None:
            self.entity_id_full = entity_id_full
        if entity_type is not None:
            self.entity_type = entity_type
        if contents is not None:
            self.contents = contents

    @property
    def id(self):
        """Gets the id of this DtoDocument.  # noqa: E501


        :return: The id of this DtoDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DtoDocument.


        :param id: The id of this DtoDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this DtoDocument.  # noqa: E501

        List of orga-id  # noqa: E501

        :return: The owner of this DtoDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DtoDocument.

        List of orga-id  # noqa: E501

        :param owner: The owner of this DtoDocument.  # noqa: E501
        :type: list[str]
        """

        self._owner = owner

    @property
    def entity_id(self):
        """Gets the entity_id of this DtoDocument.  # noqa: E501


        :return: The entity_id of this DtoDocument.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this DtoDocument.


        :param entity_id: The entity_id of this DtoDocument.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_id_full(self):
        """Gets the entity_id_full of this DtoDocument.  # noqa: E501


        :return: The entity_id_full of this DtoDocument.  # noqa: E501
        :rtype: str
        """
        return self._entity_id_full

    @entity_id_full.setter
    def entity_id_full(self, entity_id_full):
        """Sets the entity_id_full of this DtoDocument.


        :param entity_id_full: The entity_id_full of this DtoDocument.  # noqa: E501
        :type: str
        """

        self._entity_id_full = entity_id_full

    @property
    def entity_type(self):
        """Gets the entity_type of this DtoDocument.  # noqa: E501


        :return: The entity_type of this DtoDocument.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DtoDocument.


        :param entity_type: The entity_type of this DtoDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["skill", "path", "task"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def contents(self):
        """Gets the contents of this DtoDocument.  # noqa: E501


        :return: The contents of this DtoDocument.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this DtoDocument.


        :param contents: The contents of this DtoDocument.  # noqa: E501
        :type: str
        """

        self._contents = contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DtoDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DtoDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
