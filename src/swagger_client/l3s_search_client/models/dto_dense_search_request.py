# coding: utf-8

"""
    L3S Search Service for SEARCH

    Welcome to the Swagger UI documentation site test!  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DtoDenseSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'owner': 'list[str]',
        'query': 'str',
        'use_skill_profile': 'bool',
        'user_learning_profile': 'bool',
        'language_model': 'str',
        'index_method': 'str',
        'entity_type': 'str',
        'nr_result': 'int'
    }

    attribute_map = {
        'user_id': 'user_id',
        'owner': 'owner',
        'query': 'query',
        'use_skill_profile': 'use_skill_profile',
        'user_learning_profile': 'user_learning_profile',
        'language_model': 'language_model',
        'index_method': 'index_method',
        'entity_type': 'entity_type',
        'nr_result': 'nr_result'
    }

    def __init__(self, user_id=None, owner=None, query='Elektrotechnik 1 Versuch 8: Wirkleistung von Wechselspannungen; Wirkleistung der Sinuswechselspannung in der praktischen Ãœbung', use_skill_profile=False, user_learning_profile=False, language_model='bert-base-german-cased', index_method='flat-l2', entity_type=None, nr_result=None):  # noqa: E501
        """DtoDenseSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._owner = None
        self._query = None
        self._use_skill_profile = None
        self._user_learning_profile = None
        self._language_model = None
        self._index_method = None
        self._entity_type = None
        self._nr_result = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if owner is not None:
            self.owner = owner
        self.query = query
        if use_skill_profile is not None:
            self.use_skill_profile = use_skill_profile
        if user_learning_profile is not None:
            self.user_learning_profile = user_learning_profile
        if language_model is not None:
            self.language_model = language_model
        if index_method is not None:
            self.index_method = index_method
        if entity_type is not None:
            self.entity_type = entity_type
        if nr_result is not None:
            self.nr_result = nr_result

    @property
    def user_id(self):
        """Gets the user_id of this DtoDenseSearchRequest.  # noqa: E501

        user ID  # noqa: E501

        :return: The user_id of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DtoDenseSearchRequest.

        user ID  # noqa: E501

        :param user_id: The user_id of this DtoDenseSearchRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def owner(self):
        """Gets the owner of this DtoDenseSearchRequest.  # noqa: E501

        company ID  # noqa: E501

        :return: The owner of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DtoDenseSearchRequest.

        company ID  # noqa: E501

        :param owner: The owner of this DtoDenseSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._owner = owner

    @property
    def query(self):
        """Gets the query of this DtoDenseSearchRequest.  # noqa: E501


        :return: The query of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DtoDenseSearchRequest.


        :param query: The query of this DtoDenseSearchRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def use_skill_profile(self):
        """Gets the use_skill_profile of this DtoDenseSearchRequest.  # noqa: E501


        :return: The use_skill_profile of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_skill_profile

    @use_skill_profile.setter
    def use_skill_profile(self, use_skill_profile):
        """Sets the use_skill_profile of this DtoDenseSearchRequest.


        :param use_skill_profile: The use_skill_profile of this DtoDenseSearchRequest.  # noqa: E501
        :type: bool
        """

        self._use_skill_profile = use_skill_profile

    @property
    def user_learning_profile(self):
        """Gets the user_learning_profile of this DtoDenseSearchRequest.  # noqa: E501


        :return: The user_learning_profile of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._user_learning_profile

    @user_learning_profile.setter
    def user_learning_profile(self, user_learning_profile):
        """Sets the user_learning_profile of this DtoDenseSearchRequest.


        :param user_learning_profile: The user_learning_profile of this DtoDenseSearchRequest.  # noqa: E501
        :type: bool
        """

        self._user_learning_profile = user_learning_profile

    @property
    def language_model(self):
        """Gets the language_model of this DtoDenseSearchRequest.  # noqa: E501


        :return: The language_model of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._language_model

    @language_model.setter
    def language_model(self, language_model):
        """Sets the language_model of this DtoDenseSearchRequest.


        :param language_model: The language_model of this DtoDenseSearchRequest.  # noqa: E501
        :type: str
        """

        self._language_model = language_model

    @property
    def index_method(self):
        """Gets the index_method of this DtoDenseSearchRequest.  # noqa: E501


        :return: The index_method of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._index_method

    @index_method.setter
    def index_method(self, index_method):
        """Sets the index_method of this DtoDenseSearchRequest.


        :param index_method: The index_method of this DtoDenseSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["flat-l2", "flat-ip"]  # noqa: E501
        if index_method not in allowed_values:
            raise ValueError(
                "Invalid value for `index_method` ({0}), must be one of {1}"  # noqa: E501
                .format(index_method, allowed_values)
            )

        self._index_method = index_method

    @property
    def entity_type(self):
        """Gets the entity_type of this DtoDenseSearchRequest.  # noqa: E501


        :return: The entity_type of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DtoDenseSearchRequest.


        :param entity_type: The entity_type of this DtoDenseSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "skill", "path", "task"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def nr_result(self):
        """Gets the nr_result of this DtoDenseSearchRequest.  # noqa: E501


        :return: The nr_result of this DtoDenseSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._nr_result

    @nr_result.setter
    def nr_result(self, nr_result):
        """Sets the nr_result of this DtoDenseSearchRequest.


        :param nr_result: The nr_result of this DtoDenseSearchRequest.  # noqa: E501
        :type: int
        """

        self._nr_result = nr_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DtoDenseSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DtoDenseSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
