# coding: utf-8

"""
    L3S AI-Meta Service(AIMS) for SEARCH

    Welcome to the Swagger UI documentation site!  # noqa: E501

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from l3s_aimeta_client.api_client import ApiClient


class TrendsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_get_skills(self, loc, job_name, **kwargs):  # noqa: E501
        """get skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_skills(loc, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int radius: radius for searching jobs
        :return: DtoSkillsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_skills_with_http_info(loc, job_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_skills_with_http_info(loc, job_name, **kwargs)  # noqa: E501
            return data

    def get_get_skills_with_http_info(self, loc, job_name, **kwargs):  # noqa: E501
        """get skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_skills_with_http_info(loc, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int radius: radius for searching jobs
        :return: DtoSkillsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loc', 'job_name', 'radius']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loc' is set
        if ('loc' not in params or
                params['loc'] is None):
            raise ValueError("Missing the required parameter `loc` when calling `get_get_skills`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if ('job_name' not in params or
                params['job_name'] is None):
            raise ValueError("Missing the required parameter `job_name` when calling `get_get_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loc' in params:
            query_params.append(('loc', params['loc']))  # noqa: E501
        if 'job_name' in params:
            query_params.append(('job_name', params['job_name']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/aims/skills/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DtoSkillsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_trends(self, loc, job_name, topk, **kwargs):  # noqa: E501
        """get trending skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_trends(loc, job_name, topk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int topk: top k trending skills (required)
        :param int radius: radius for searching jobs
        :return: DtoTrendingSkillsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_trends_with_http_info(loc, job_name, topk, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_trends_with_http_info(loc, job_name, topk, **kwargs)  # noqa: E501
            return data

    def get_get_trends_with_http_info(self, loc, job_name, topk, **kwargs):  # noqa: E501
        """get trending skills  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_trends_with_http_info(loc, job_name, topk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int topk: top k trending skills (required)
        :param int radius: radius for searching jobs
        :return: DtoTrendingSkillsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loc', 'job_name', 'topk', 'radius']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_trends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loc' is set
        if ('loc' not in params or
                params['loc'] is None):
            raise ValueError("Missing the required parameter `loc` when calling `get_get_trends`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if ('job_name' not in params or
                params['job_name'] is None):
            raise ValueError("Missing the required parameter `job_name` when calling `get_get_trends`")  # noqa: E501
        # verify the required parameter 'topk' is set
        if ('topk' not in params or
                params['topk'] is None):
            raise ValueError("Missing the required parameter `topk` when calling `get_get_trends`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loc' in params:
            query_params.append(('loc', params['loc']))  # noqa: E501
        if 'job_name' in params:
            query_params.append(('job_name', params['job_name']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501
        if 'topk' in params:
            query_params.append(('topk', params['topk']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/aims/trending-skills/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DtoTrendingSkillsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_jobs(self, loc, job_name, **kwargs):  # noqa: E501
        """Search for job offers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_jobs(loc, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int radius: radius for searching jobs
        :return: list[DtoJobsSearchResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_jobs_with_http_info(loc, job_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_jobs_with_http_info(loc, job_name, **kwargs)  # noqa: E501
            return data

    def get_search_jobs_with_http_info(self, loc, job_name, **kwargs):  # noqa: E501
        """Search for job offers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_jobs_with_http_info(loc, job_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loc: location for searching job (required)
        :param str job_name: job name (required)
        :param int radius: radius for searching jobs
        :return: list[DtoJobsSearchResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loc', 'job_name', 'radius']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loc' is set
        if ('loc' not in params or
                params['loc'] is None):
            raise ValueError("Missing the required parameter `loc` when calling `get_search_jobs`")  # noqa: E501
        # verify the required parameter 'job_name' is set
        if ('job_name' not in params or
                params['job_name'] is None):
            raise ValueError("Missing the required parameter `job_name` when calling `get_search_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loc' in params:
            query_params.append(('loc', params['loc']))  # noqa: E501
        if 'job_name' in params:
            query_params.append(('job_name', params['job_name']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/aims/search-jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DtoJobsSearchResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
