# coding: utf-8

"""
    L3S AI-Meta Service(AIMS) for SEARCH

    Welcome to the Swagger UI documentation site!  # noqa: E501

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuizItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wissen': 'list[str]',
        'verstehen': 'list[str]',
        'anwenden': 'list[str]'
    }

    attribute_map = {
        'wissen': 'Wissen',
        'verstehen': 'Verstehen',
        'anwenden': 'Anwenden'
    }

    def __init__(self, wissen=None, verstehen=None, anwenden=None):  # noqa: E501
        """QuizItem - a model defined in Swagger"""  # noqa: E501
        self._wissen = None
        self._verstehen = None
        self._anwenden = None
        self.discriminator = None
        if wissen is not None:
            self.wissen = wissen
        if verstehen is not None:
            self.verstehen = verstehen
        if anwenden is not None:
            self.anwenden = anwenden

    @property
    def wissen(self):
        """Gets the wissen of this QuizItem.  # noqa: E501

        List of Wissen quiz questions  # noqa: E501

        :return: The wissen of this QuizItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._wissen

    @wissen.setter
    def wissen(self, wissen):
        """Sets the wissen of this QuizItem.

        List of Wissen quiz questions  # noqa: E501

        :param wissen: The wissen of this QuizItem.  # noqa: E501
        :type: list[str]
        """

        self._wissen = wissen

    @property
    def verstehen(self):
        """Gets the verstehen of this QuizItem.  # noqa: E501

        List of Verstehen quiz questions  # noqa: E501

        :return: The verstehen of this QuizItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._verstehen

    @verstehen.setter
    def verstehen(self, verstehen):
        """Sets the verstehen of this QuizItem.

        List of Verstehen quiz questions  # noqa: E501

        :param verstehen: The verstehen of this QuizItem.  # noqa: E501
        :type: list[str]
        """

        self._verstehen = verstehen

    @property
    def anwenden(self):
        """Gets the anwenden of this QuizItem.  # noqa: E501

        List of Anwenden quiz questions  # noqa: E501

        :return: The anwenden of this QuizItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._anwenden

    @anwenden.setter
    def anwenden(self, anwenden):
        """Sets the anwenden of this QuizItem.

        List of Anwenden quiz questions  # noqa: E501

        :param anwenden: The anwenden of this QuizItem.  # noqa: E501
        :type: list[str]
        """

        self._anwenden = anwenden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
