# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FormApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_form_item(self, id, **kwargs):  # noqa: E501
        """Removes the Form resource.  # noqa: E501

        Removes the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_form_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_form_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_form_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_form_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Removes the Form resource.  # noqa: E501

        Removes the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_form_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_form_collection(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Form resources.  # noqa: E501

        Retrieves the collection of Form resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_form_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str title:
        :param str original_form:
        :param list[str] original_form:
        :param str external_contents:
        :param list[str] external_contents:
        :param str external_content_organizations:
        :param list[str] external_content_organizations:
        :param str form_set_organization:
        :param list[str] form_set_organization:
        :param str form_set:
        :param list[str] form_set:
        :param str connected_task_steps:
        :param list[str] connected_task_steps:
        :param str connected_task_steps_task:
        :param list[str] connected_task_steps_task:
        :param str app_tags_title:
        :param list[str] app_tags_title:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str creator_lastname:
        :param str form_set_title:
        :param str is_newest_version:
        :param bool archived:
        :param bool is_template:
        :param bool is_task_inline:
        :param str order_title:
        :param str order_created_at:
        :param str order_updated_at:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_form_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_form_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_form_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Form resources.  # noqa: E501

        Retrieves the collection of Form resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_form_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str title:
        :param str original_form:
        :param list[str] original_form:
        :param str external_contents:
        :param list[str] external_contents:
        :param str external_content_organizations:
        :param list[str] external_content_organizations:
        :param str form_set_organization:
        :param list[str] form_set_organization:
        :param str form_set:
        :param list[str] form_set:
        :param str connected_task_steps:
        :param list[str] connected_task_steps:
        :param str connected_task_steps_task:
        :param list[str] connected_task_steps_task:
        :param str app_tags_title:
        :param list[str] app_tags_title:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str creator_lastname:
        :param str form_set_title:
        :param str is_newest_version:
        :param bool archived:
        :param bool is_template:
        :param bool is_task_inline:
        :param str order_title:
        :param str order_created_at:
        :param str order_updated_at:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'items_per_page', 'pagination', 'id', 'id', 'title', 'original_form', 'original_form', 'external_contents', 'external_contents', 'external_content_organizations', 'external_content_organizations', 'form_set_organization', 'form_set_organization', 'form_set', 'form_set', 'connected_task_steps', 'connected_task_steps', 'connected_task_steps_task', 'connected_task_steps_task', 'app_tags_title', 'app_tags_title', 'mls1_id', 'mls1_id', 'creator_lastname', 'form_set_title', 'is_newest_version', 'archived', 'is_template', 'is_task_inline', 'order_title', 'order_created_at', 'order_updated_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_form_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'items_per_page' in params:
            query_params.append(('itemsPerPage', params['items_per_page']))  # noqa: E501
        if 'pagination' in params:
            query_params.append(('pagination', params['pagination']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id[]', params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'original_form' in params:
            query_params.append(('originalForm', params['original_form']))  # noqa: E501
        if 'original_form' in params:
            query_params.append(('originalForm[]', params['original_form']))  # noqa: E501
            collection_formats['originalForm[]'] = 'multi'  # noqa: E501
        if 'external_contents' in params:
            query_params.append(('externalContents', params['external_contents']))  # noqa: E501
        if 'external_contents' in params:
            query_params.append(('externalContents[]', params['external_contents']))  # noqa: E501
            collection_formats['externalContents[]'] = 'multi'  # noqa: E501
        if 'external_content_organizations' in params:
            query_params.append(('externalContentOrganizations', params['external_content_organizations']))  # noqa: E501
        if 'external_content_organizations' in params:
            query_params.append(('externalContentOrganizations[]', params['external_content_organizations']))  # noqa: E501
            collection_formats['externalContentOrganizations[]'] = 'multi'  # noqa: E501
        if 'form_set_organization' in params:
            query_params.append(('formSet.organization', params['form_set_organization']))  # noqa: E501
        if 'form_set_organization' in params:
            query_params.append(('formSet.organization[]', params['form_set_organization']))  # noqa: E501
            collection_formats['formSet.organization[]'] = 'multi'  # noqa: E501
        if 'form_set' in params:
            query_params.append(('formSet', params['form_set']))  # noqa: E501
        if 'form_set' in params:
            query_params.append(('formSet[]', params['form_set']))  # noqa: E501
            collection_formats['formSet[]'] = 'multi'  # noqa: E501
        if 'connected_task_steps' in params:
            query_params.append(('connectedTaskSteps', params['connected_task_steps']))  # noqa: E501
        if 'connected_task_steps' in params:
            query_params.append(('connectedTaskSteps[]', params['connected_task_steps']))  # noqa: E501
            collection_formats['connectedTaskSteps[]'] = 'multi'  # noqa: E501
        if 'connected_task_steps_task' in params:
            query_params.append(('connectedTaskSteps.task', params['connected_task_steps_task']))  # noqa: E501
        if 'connected_task_steps_task' in params:
            query_params.append(('connectedTaskSteps.task[]', params['connected_task_steps_task']))  # noqa: E501
            collection_formats['connectedTaskSteps.task[]'] = 'multi'  # noqa: E501
        if 'app_tags_title' in params:
            query_params.append(('appTags.title', params['app_tags_title']))  # noqa: E501
        if 'app_tags_title' in params:
            query_params.append(('appTags.title[]', params['app_tags_title']))  # noqa: E501
            collection_formats['appTags.title[]'] = 'multi'  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id', params['mls1_id']))  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id[]', params['mls1_id']))  # noqa: E501
            collection_formats['mls1Id[]'] = 'multi'  # noqa: E501
        if 'creator_lastname' in params:
            query_params.append(('creator.lastname', params['creator_lastname']))  # noqa: E501
        if 'form_set_title' in params:
            query_params.append(('formSet.title', params['form_set_title']))  # noqa: E501
        if 'is_newest_version' in params:
            query_params.append(('isNewestVersion', params['is_newest_version']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'is_template' in params:
            query_params.append(('isTemplate', params['is_template']))  # noqa: E501
        if 'is_task_inline' in params:
            query_params.append(('isTaskInline', params['is_task_inline']))  # noqa: E501
        if 'order_title' in params:
            query_params.append(('order[title]', params['order_title']))  # noqa: E501
        if 'order_created_at' in params:
            query_params.append(('order[createdAt]', params['order_created_at']))  # noqa: E501
        if 'order_updated_at' in params:
            query_params.append(('order[updatedAt]', params['order_updated_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_form_item(self, id, **kwargs):  # noqa: E501
        """Retrieves a Form resource.  # noqa: E501

        Retrieves a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_form_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: FormJsonldFormItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_form_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_form_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_form_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a Form resource.  # noqa: E501

        Retrieves a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_form_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: FormJsonldFormItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormItemRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_form_collection(self, body, **kwargs):  # noqa: E501
        """Creates a Form resource.  # noqa: E501

        Creates a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_form_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormWrite body: The new Form resource (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_form_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_form_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_form_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a Form resource.  # noqa: E501

        Creates a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_form_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormWrite body: The new Form resource (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_form_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_form_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_form_collection(self, body, **kwargs):  # noqa: E501
        """Creates a Form resource.  # noqa: E501

        Creates a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_form_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormWrite body: The new Form resource (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_form_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_form_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_form_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a Form resource.  # noqa: E501

        Creates a Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_form_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormWrite body: The new Form resource (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_form_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_form_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_copy_form_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_form_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_copy_form_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_copy_form_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_copy_form_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_form_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_copy_form_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_copy_form_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_copy_form_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/copy-form/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_copy_form_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_form_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_copy_form_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_copy_form_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_copy_form_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_form_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_copy_form_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_copy_form_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_copy_form_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/copy-form/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_copy_from_external_content_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_from_external_content_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_copy_from_external_content_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_copy_from_external_content_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_copy_from_external_content_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_from_external_content_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_copy_from_external_content_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_copy_from_external_content_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_copy_from_external_content_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/copy-from-external-content/{id}/{externalContentOrganization}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_copy_from_external_content_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_from_external_content_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_copy_from_external_content_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_copy_from_external_content_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_copy_from_external_content_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_copy_from_external_content_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_copy_from_external_content_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_copy_from_external_content_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_copy_from_external_content_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/copy-from-external-content/{id}/{externalContentOrganization}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_generate_next_version_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_generate_next_version_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_generate_next_version_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_generate_next_version_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_generate_next_version_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_generate_next_version_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_generate_next_version_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_generate_next_version_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_generate_next_version_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/generate-next-version/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_generate_next_version_form_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_generate_next_version_form_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_generate_next_version_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_generate_next_version_form_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_generate_next_version_form_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Form resource.  # noqa: E501

        Replaces the Form resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_generate_next_version_form_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormJsonldFormItemWrite body: The updated Form resource (required)
        :param str id: Resource identifier (required)
        :return: FormJsonldFormRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_generate_next_version_form_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_generate_next_version_form_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_generate_next_version_form_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/forms/generate-next-version/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormJsonldFormRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
