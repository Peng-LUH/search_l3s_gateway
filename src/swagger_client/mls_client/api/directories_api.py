# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DirectoriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_directories_item(self, id, **kwargs):  # noqa: E501
        """Removes the Directories resource.  # noqa: E501

        Removes the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_directories_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_directories_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_directories_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_directories_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Removes the Directories resource.  # noqa: E501

        Removes the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_directories_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_directories_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_directories_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_directories_collection(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Directories resources.  # noqa: E501

        Retrieves the collection of Directories resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_directories_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str parent:
        :param list[str] parent:
        :param str owner:
        :param list[str] owner:
        :param str organization:
        :param list[str] organization:
        :param str external_contents:
        :param list[str] external_contents:
        :param str external_content_organizations_of_directories_for_all:
        :param list[str] external_content_organizations_of_directories_for_all:
        :param str external_content_organizations_of_directories_for_apprentice:
        :param list[str] external_content_organizations_of_directories_for_apprentice:
        :param str external_content_organizations_of_directories_for_instructor:
        :param list[str] external_content_organizations_of_directories_for_instructor:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str name:
        :param str directory_groups_or_user_filter:
        :param bool is_common:
        :param bool is_group:
        :param bool is_restricted:
        :param bool exists_parent:
        :param bool exists_organization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_directories_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_directories_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_directories_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Directories resources.  # noqa: E501

        Retrieves the collection of Directories resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_directories_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str parent:
        :param list[str] parent:
        :param str owner:
        :param list[str] owner:
        :param str organization:
        :param list[str] organization:
        :param str external_contents:
        :param list[str] external_contents:
        :param str external_content_organizations_of_directories_for_all:
        :param list[str] external_content_organizations_of_directories_for_all:
        :param str external_content_organizations_of_directories_for_apprentice:
        :param list[str] external_content_organizations_of_directories_for_apprentice:
        :param str external_content_organizations_of_directories_for_instructor:
        :param list[str] external_content_organizations_of_directories_for_instructor:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str name:
        :param str directory_groups_or_user_filter:
        :param bool is_common:
        :param bool is_group:
        :param bool is_restricted:
        :param bool exists_parent:
        :param bool exists_organization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagination', 'id', 'id', 'parent', 'parent', 'owner', 'owner', 'organization', 'organization', 'external_contents', 'external_contents', 'external_content_organizations_of_directories_for_all', 'external_content_organizations_of_directories_for_all', 'external_content_organizations_of_directories_for_apprentice', 'external_content_organizations_of_directories_for_apprentice', 'external_content_organizations_of_directories_for_instructor', 'external_content_organizations_of_directories_for_instructor', 'mls1_id', 'mls1_id', 'name', 'directory_groups_or_user_filter', 'is_common', 'is_group', 'is_restricted', 'exists_parent', 'exists_organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directories_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pagination' in params:
            query_params.append(('pagination', params['pagination']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id[]', params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent[]', params['parent']))  # noqa: E501
            collection_formats['parent[]'] = 'multi'  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner[]', params['owner']))  # noqa: E501
            collection_formats['owner[]'] = 'multi'  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization[]', params['organization']))  # noqa: E501
            collection_formats['organization[]'] = 'multi'  # noqa: E501
        if 'external_contents' in params:
            query_params.append(('externalContents', params['external_contents']))  # noqa: E501
        if 'external_contents' in params:
            query_params.append(('externalContents[]', params['external_contents']))  # noqa: E501
            collection_formats['externalContents[]'] = 'multi'  # noqa: E501
        if 'external_content_organizations_of_directories_for_all' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForAll', params['external_content_organizations_of_directories_for_all']))  # noqa: E501
        if 'external_content_organizations_of_directories_for_all' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForAll[]', params['external_content_organizations_of_directories_for_all']))  # noqa: E501
            collection_formats['externalContentOrganizationsOfDirectoriesForAll[]'] = 'multi'  # noqa: E501
        if 'external_content_organizations_of_directories_for_apprentice' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForApprentice', params['external_content_organizations_of_directories_for_apprentice']))  # noqa: E501
        if 'external_content_organizations_of_directories_for_apprentice' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForApprentice[]', params['external_content_organizations_of_directories_for_apprentice']))  # noqa: E501
            collection_formats['externalContentOrganizationsOfDirectoriesForApprentice[]'] = 'multi'  # noqa: E501
        if 'external_content_organizations_of_directories_for_instructor' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForInstructor', params['external_content_organizations_of_directories_for_instructor']))  # noqa: E501
        if 'external_content_organizations_of_directories_for_instructor' in params:
            query_params.append(('externalContentOrganizationsOfDirectoriesForInstructor[]', params['external_content_organizations_of_directories_for_instructor']))  # noqa: E501
            collection_formats['externalContentOrganizationsOfDirectoriesForInstructor[]'] = 'multi'  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id', params['mls1_id']))  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id[]', params['mls1_id']))  # noqa: E501
            collection_formats['mls1Id[]'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'directory_groups_or_user_filter' in params:
            query_params.append(('directoryGroupsOrUserFilter', params['directory_groups_or_user_filter']))  # noqa: E501
        if 'is_common' in params:
            query_params.append(('isCommon', params['is_common']))  # noqa: E501
        if 'is_group' in params:
            query_params.append(('isGroup', params['is_group']))  # noqa: E501
        if 'is_restricted' in params:
            query_params.append(('isRestricted', params['is_restricted']))  # noqa: E501
        if 'exists_parent' in params:
            query_params.append(('exists[parent]', params['exists_parent']))  # noqa: E501
        if 'exists_organization' in params:
            query_params.append(('exists[organization]', params['exists_organization']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_directories_item(self, id, **kwargs):  # noqa: E501
        """Retrieves a Directories resource.  # noqa: E501

        Retrieves a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_directories_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonldDirectoryItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_directories_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_directories_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_directories_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a Directories resource.  # noqa: E501

        Retrieves a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_directories_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonldDirectoryItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_directories_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_directories_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoriesJsonldDirectoryItemRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_directories_collection(self, body, **kwargs):  # noqa: E501
        """Creates a Directories resource.  # noqa: E501

        Creates a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_directories_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonld body: The new Directories resource (required)
        :return: DirectoriesJsonldDirectoryWrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_directories_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_directories_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_directories_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a Directories resource.  # noqa: E501

        Creates a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_directories_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonld body: The new Directories resource (required)
        :return: DirectoriesJsonldDirectoryWrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_directories_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_directories_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoriesJsonldDirectoryWrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_directories_collection(self, body, **kwargs):  # noqa: E501
        """Creates a Directories resource.  # noqa: E501

        Creates a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_directories_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonld body: The new Directories resource (required)
        :return: DirectoriesJsonldDirectoryWrite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_directories_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_directories_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_directories_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a Directories resource.  # noqa: E501

        Creates a Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_directories_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonld body: The new Directories resource (required)
        :return: DirectoriesJsonldDirectoryWrite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_directories_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_directories_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoriesJsonldDirectoryWrite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_directories_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Directories resource.  # noqa: E501

        Replaces the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_directories_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonldDirectoryItemWrite body: The updated Directories resource (required)
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_directories_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_directories_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_directories_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Directories resource.  # noqa: E501

        Replaces the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_directories_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonldDirectoryItemWrite body: The updated Directories resource (required)
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_directories_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_directories_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_directories_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoriesJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_directories_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Directories resource.  # noqa: E501

        Replaces the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_directories_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonldDirectoryItemWrite body: The updated Directories resource (required)
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_directories_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_directories_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_directories_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the Directories resource.  # noqa: E501

        Replaces the Directories resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_directories_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoriesJsonldDirectoryItemWrite body: The updated Directories resource (required)
        :param str id: Resource identifier (required)
        :return: DirectoriesJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_directories_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_directories_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_directories_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/directories/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoriesJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
