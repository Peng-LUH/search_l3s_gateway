# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TaskTodoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_task_todo_item(self, id, **kwargs):  # noqa: E501
        """Removes the TaskTodo resource.  # noqa: E501

        Removes the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_todo_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_task_todo_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_task_todo_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_task_todo_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Removes the TaskTodo resource.  # noqa: E501

        Removes the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_todo_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task_todo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_task_todo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_todo_collection(self, **kwargs):  # noqa: E501
        """Retrieves the collection of TaskTodo resources.  # noqa: E501

        Retrieves the collection of TaskTodo resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_todo_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param str task:
        :param list[str] task:
        :param str user:
        :param list[str] user:
        :param str user_organizations:
        :param list[str] user_organizations:
        :param str user_lastname:
        :param str task_todo_info_status:
        :param list[str] task_todo_info_status:
        :param str task_task_set:
        :param list[str] task_task_set:
        :param str task_title:
        :param str task_task_set_organization:
        :param list[str] task_task_set_organization:
        :param str assigner:
        :param list[str] assigner:
        :param str project_todo:
        :param list[str] project_todo:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str organization:
        :param list[str] organization:
        :param str equipment_maintenance:
        :param list[str] equipment_maintenance:
        :param str task_todo_info_updated_at_before:
        :param str task_todo_info_updated_at_strictly_before:
        :param str task_todo_info_updated_at_after:
        :param str task_todo_info_updated_at_strictly_after:
        :param str todo_or_filter:
        :param str user_name_or_filter:
        :param str todo_group_filter:
        :param str todo_todo_assigned_group_filter:
        :param bool archived:
        :param bool show_to_learners:
        :param bool show_in_statistic:
        :param bool user_state:
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_todo_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_task_todo_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_task_todo_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection of TaskTodo resources.  # noqa: E501

        Retrieves the collection of TaskTodo resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_todo_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param str task:
        :param list[str] task:
        :param str user:
        :param list[str] user:
        :param str user_organizations:
        :param list[str] user_organizations:
        :param str user_lastname:
        :param str task_todo_info_status:
        :param list[str] task_todo_info_status:
        :param str task_task_set:
        :param list[str] task_task_set:
        :param str task_title:
        :param str task_task_set_organization:
        :param list[str] task_task_set_organization:
        :param str assigner:
        :param list[str] assigner:
        :param str project_todo:
        :param list[str] project_todo:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str organization:
        :param list[str] organization:
        :param str equipment_maintenance:
        :param list[str] equipment_maintenance:
        :param str task_todo_info_updated_at_before:
        :param str task_todo_info_updated_at_strictly_before:
        :param str task_todo_info_updated_at_after:
        :param str task_todo_info_updated_at_strictly_after:
        :param str todo_or_filter:
        :param str user_name_or_filter:
        :param str todo_group_filter:
        :param str todo_todo_assigned_group_filter:
        :param bool archived:
        :param bool show_to_learners:
        :param bool show_in_statistic:
        :param bool user_state:
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'items_per_page', 'pagination', 'task', 'task', 'user', 'user', 'user_organizations', 'user_organizations', 'user_lastname', 'task_todo_info_status', 'task_todo_info_status', 'task_task_set', 'task_task_set', 'task_title', 'task_task_set_organization', 'task_task_set_organization', 'assigner', 'assigner', 'project_todo', 'project_todo', 'mls1_id', 'mls1_id', 'organization', 'organization', 'equipment_maintenance', 'equipment_maintenance', 'task_todo_info_updated_at_before', 'task_todo_info_updated_at_strictly_before', 'task_todo_info_updated_at_after', 'task_todo_info_updated_at_strictly_after', 'todo_or_filter', 'user_name_or_filter', 'todo_group_filter', 'todo_todo_assigned_group_filter', 'archived', 'show_to_learners', 'show_in_statistic', 'user_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_todo_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'items_per_page' in params:
            query_params.append(('itemsPerPage', params['items_per_page']))  # noqa: E501
        if 'pagination' in params:
            query_params.append(('pagination', params['pagination']))  # noqa: E501
        if 'task' in params:
            query_params.append(('task', params['task']))  # noqa: E501
        if 'task' in params:
            query_params.append(('task[]', params['task']))  # noqa: E501
            collection_formats['task[]'] = 'multi'  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user[]', params['user']))  # noqa: E501
            collection_formats['user[]'] = 'multi'  # noqa: E501
        if 'user_organizations' in params:
            query_params.append(('user.organizations', params['user_organizations']))  # noqa: E501
        if 'user_organizations' in params:
            query_params.append(('user.organizations[]', params['user_organizations']))  # noqa: E501
            collection_formats['user.organizations[]'] = 'multi'  # noqa: E501
        if 'user_lastname' in params:
            query_params.append(('user.lastname', params['user_lastname']))  # noqa: E501
        if 'task_todo_info_status' in params:
            query_params.append(('taskTodoInfo.status', params['task_todo_info_status']))  # noqa: E501
        if 'task_todo_info_status' in params:
            query_params.append(('taskTodoInfo.status[]', params['task_todo_info_status']))  # noqa: E501
            collection_formats['taskTodoInfo.status[]'] = 'multi'  # noqa: E501
        if 'task_task_set' in params:
            query_params.append(('task.taskSet', params['task_task_set']))  # noqa: E501
        if 'task_task_set' in params:
            query_params.append(('task.taskSet[]', params['task_task_set']))  # noqa: E501
            collection_formats['task.taskSet[]'] = 'multi'  # noqa: E501
        if 'task_title' in params:
            query_params.append(('task.title', params['task_title']))  # noqa: E501
        if 'task_task_set_organization' in params:
            query_params.append(('task.taskSet.organization', params['task_task_set_organization']))  # noqa: E501
        if 'task_task_set_organization' in params:
            query_params.append(('task.taskSet.organization[]', params['task_task_set_organization']))  # noqa: E501
            collection_formats['task.taskSet.organization[]'] = 'multi'  # noqa: E501
        if 'assigner' in params:
            query_params.append(('assigner', params['assigner']))  # noqa: E501
        if 'assigner' in params:
            query_params.append(('assigner[]', params['assigner']))  # noqa: E501
            collection_formats['assigner[]'] = 'multi'  # noqa: E501
        if 'project_todo' in params:
            query_params.append(('projectTodo', params['project_todo']))  # noqa: E501
        if 'project_todo' in params:
            query_params.append(('projectTodo[]', params['project_todo']))  # noqa: E501
            collection_formats['projectTodo[]'] = 'multi'  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id', params['mls1_id']))  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id[]', params['mls1_id']))  # noqa: E501
            collection_formats['mls1Id[]'] = 'multi'  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization[]', params['organization']))  # noqa: E501
            collection_formats['organization[]'] = 'multi'  # noqa: E501
        if 'equipment_maintenance' in params:
            query_params.append(('equipmentMaintenance', params['equipment_maintenance']))  # noqa: E501
        if 'equipment_maintenance' in params:
            query_params.append(('equipmentMaintenance[]', params['equipment_maintenance']))  # noqa: E501
            collection_formats['equipmentMaintenance[]'] = 'multi'  # noqa: E501
        if 'task_todo_info_updated_at_before' in params:
            query_params.append(('taskTodoInfo.updatedAt[before]', params['task_todo_info_updated_at_before']))  # noqa: E501
        if 'task_todo_info_updated_at_strictly_before' in params:
            query_params.append(('taskTodoInfo.updatedAt[strictly_before]', params['task_todo_info_updated_at_strictly_before']))  # noqa: E501
        if 'task_todo_info_updated_at_after' in params:
            query_params.append(('taskTodoInfo.updatedAt[after]', params['task_todo_info_updated_at_after']))  # noqa: E501
        if 'task_todo_info_updated_at_strictly_after' in params:
            query_params.append(('taskTodoInfo.updatedAt[strictly_after]', params['task_todo_info_updated_at_strictly_after']))  # noqa: E501
        if 'todo_or_filter' in params:
            query_params.append(('todoOrFilter', params['todo_or_filter']))  # noqa: E501
        if 'user_name_or_filter' in params:
            query_params.append(('userNameOrFilter', params['user_name_or_filter']))  # noqa: E501
        if 'todo_group_filter' in params:
            query_params.append(('todoGroupFilter', params['todo_group_filter']))  # noqa: E501
        if 'todo_todo_assigned_group_filter' in params:
            query_params.append(('todoTodoAssignedGroupFilter', params['todo_todo_assigned_group_filter']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'show_to_learners' in params:
            query_params.append(('showToLearners', params['show_to_learners']))  # noqa: E501
        if 'show_in_statistic' in params:
            query_params.append(('showInStatistic', params['show_in_statistic']))  # noqa: E501
        if 'user_state' in params:
            query_params.append(('user.state', params['user_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_todo_item(self, id, **kwargs):  # noqa: E501
        """Retrieves a TaskTodo resource.  # noqa: E501

        Retrieves a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_todo_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonldTaskTodoItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_todo_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_todo_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_task_todo_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a TaskTodo resource.  # noqa: E501

        Retrieves a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_todo_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonldTaskTodoItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_todo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_task_todo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskTodoJsonldTaskTodoItemRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_task_todo_collection(self, body, **kwargs):  # noqa: E501
        """Creates a TaskTodo resource.  # noqa: E501

        Creates a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_todo_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoWrite body: The new TaskTodo resource (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_task_todo_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_task_todo_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_task_todo_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a TaskTodo resource.  # noqa: E501

        Creates a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_todo_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoWrite body: The new TaskTodo resource (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_task_todo_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_task_todo_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskTodoJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_task_todo_collection(self, body, **kwargs):  # noqa: E501
        """Creates a TaskTodo resource.  # noqa: E501

        Creates a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_todo_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoWrite body: The new TaskTodo resource (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_task_todo_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_task_todo_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_task_todo_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a TaskTodo resource.  # noqa: E501

        Creates a TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_todo_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoWrite body: The new TaskTodo resource (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_task_todo_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_task_todo_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskTodoJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task_todo_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the TaskTodo resource.  # noqa: E501

        Replaces the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_todo_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoItemWrite body: The updated TaskTodo resource (required)
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_todo_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_todo_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_task_todo_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the TaskTodo resource.  # noqa: E501

        Replaces the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_todo_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoItemWrite body: The updated TaskTodo resource (required)
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task_todo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task_todo_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_task_todo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskTodoJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task_todo_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the TaskTodo resource.  # noqa: E501

        Replaces the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_todo_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoItemWrite body: The updated TaskTodo resource (required)
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_todo_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_todo_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_task_todo_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the TaskTodo resource.  # noqa: E501

        Replaces the TaskTodo resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_todo_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskTodoJsonldTaskTodoItemWrite body: The updated TaskTodo resource (required)
        :param str id: Resource identifier (required)
        :return: TaskTodoJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task_todo_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task_todo_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_task_todo_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/task-todos/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskTodoJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
