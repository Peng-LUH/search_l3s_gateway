# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_user_item(self, id, **kwargs):  # noqa: E501
        """Removes the User resource.  # noqa: E501

        Removes the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_user_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Removes the User resource.  # noqa: E501

        Removes the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_user_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_collection(self, **kwargs):  # noqa: E501
        """Retrieves the collection of User resources.  # noqa: E501

        Retrieves the collection of User resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str organizations:
        :param list[str] organizations:
        :param str organizations_name:
        :param str email:
        :param str roles:
        :param str username:
        :param str firstname:
        :param str lastname:
        :param str tasks_todo:
        :param list[str] tasks_todo:
        :param str tasks_todo_task_title:
        :param str tasks_todo_task:
        :param list[str] tasks_todo_task:
        :param str tasks_todo_task_todo_info_status:
        :param list[str] tasks_todo_task_todo_info_status:
        :param str purchased_external_content_external_content_organization:
        :param list[str] purchased_external_content_external_content_organization:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str groups:
        :param list[str] groups:
        :param str chats:
        :param list[str] chats:
        :param str external_europathek_books:
        :param list[str] external_europathek_books:
        :param str shared_directories:
        :param list[str] shared_directories:
        :param str shared_documents:
        :param list[str] shared_documents:
        :param str user_name_or_filter:
        :param str todo_or_filter:
        :param str user_todo_assigned_group_filter:
        :param bool state:
        :param bool tasks_todo_archived:
        :param str order_lastname:
        :param str order_tasks_todo_task_title:
        :param bool exists_tasks_todo:
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection of User resources.  # noqa: E501

        Retrieves the collection of User resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int items_per_page: The number of items per page
        :param bool pagination: Enable or disable pagination
        :param int id:
        :param list[int] id:
        :param str organizations:
        :param list[str] organizations:
        :param str organizations_name:
        :param str email:
        :param str roles:
        :param str username:
        :param str firstname:
        :param str lastname:
        :param str tasks_todo:
        :param list[str] tasks_todo:
        :param str tasks_todo_task_title:
        :param str tasks_todo_task:
        :param list[str] tasks_todo_task:
        :param str tasks_todo_task_todo_info_status:
        :param list[str] tasks_todo_task_todo_info_status:
        :param str purchased_external_content_external_content_organization:
        :param list[str] purchased_external_content_external_content_organization:
        :param int mls1_id:
        :param list[int] mls1_id:
        :param str groups:
        :param list[str] groups:
        :param str chats:
        :param list[str] chats:
        :param str external_europathek_books:
        :param list[str] external_europathek_books:
        :param str shared_directories:
        :param list[str] shared_directories:
        :param str shared_documents:
        :param list[str] shared_documents:
        :param str user_name_or_filter:
        :param str todo_or_filter:
        :param str user_todo_assigned_group_filter:
        :param bool state:
        :param bool tasks_todo_archived:
        :param str order_lastname:
        :param str order_tasks_todo_task_title:
        :param bool exists_tasks_todo:
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'items_per_page', 'pagination', 'id', 'id', 'organizations', 'organizations', 'organizations_name', 'email', 'roles', 'username', 'firstname', 'lastname', 'tasks_todo', 'tasks_todo', 'tasks_todo_task_title', 'tasks_todo_task', 'tasks_todo_task', 'tasks_todo_task_todo_info_status', 'tasks_todo_task_todo_info_status', 'purchased_external_content_external_content_organization', 'purchased_external_content_external_content_organization', 'mls1_id', 'mls1_id', 'groups', 'groups', 'chats', 'chats', 'external_europathek_books', 'external_europathek_books', 'shared_directories', 'shared_directories', 'shared_documents', 'shared_documents', 'user_name_or_filter', 'todo_or_filter', 'user_todo_assigned_group_filter', 'state', 'tasks_todo_archived', 'order_lastname', 'order_tasks_todo_task_title', 'exists_tasks_todo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'items_per_page' in params:
            query_params.append(('itemsPerPage', params['items_per_page']))  # noqa: E501
        if 'pagination' in params:
            query_params.append(('pagination', params['pagination']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id[]', params['id']))  # noqa: E501
            collection_formats['id[]'] = 'multi'  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations[]', params['organizations']))  # noqa: E501
            collection_formats['organizations[]'] = 'multi'  # noqa: E501
        if 'organizations_name' in params:
            query_params.append(('organizations.name', params['organizations_name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'firstname' in params:
            query_params.append(('firstname', params['firstname']))  # noqa: E501
        if 'lastname' in params:
            query_params.append(('lastname', params['lastname']))  # noqa: E501
        if 'tasks_todo' in params:
            query_params.append(('tasksTodo', params['tasks_todo']))  # noqa: E501
        if 'tasks_todo' in params:
            query_params.append(('tasksTodo[]', params['tasks_todo']))  # noqa: E501
            collection_formats['tasksTodo[]'] = 'multi'  # noqa: E501
        if 'tasks_todo_task_title' in params:
            query_params.append(('tasksTodo.task.title', params['tasks_todo_task_title']))  # noqa: E501
        if 'tasks_todo_task' in params:
            query_params.append(('tasksTodo.task', params['tasks_todo_task']))  # noqa: E501
        if 'tasks_todo_task' in params:
            query_params.append(('tasksTodo.task[]', params['tasks_todo_task']))  # noqa: E501
            collection_formats['tasksTodo.task[]'] = 'multi'  # noqa: E501
        if 'tasks_todo_task_todo_info_status' in params:
            query_params.append(('tasksTodo.taskTodoInfo.status', params['tasks_todo_task_todo_info_status']))  # noqa: E501
        if 'tasks_todo_task_todo_info_status' in params:
            query_params.append(('tasksTodo.taskTodoInfo.status[]', params['tasks_todo_task_todo_info_status']))  # noqa: E501
            collection_formats['tasksTodo.taskTodoInfo.status[]'] = 'multi'  # noqa: E501
        if 'purchased_external_content_external_content_organization' in params:
            query_params.append(('purchasedExternalContent.externalContentOrganization', params['purchased_external_content_external_content_organization']))  # noqa: E501
        if 'purchased_external_content_external_content_organization' in params:
            query_params.append(('purchasedExternalContent.externalContentOrganization[]', params['purchased_external_content_external_content_organization']))  # noqa: E501
            collection_formats['purchasedExternalContent.externalContentOrganization[]'] = 'multi'  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id', params['mls1_id']))  # noqa: E501
        if 'mls1_id' in params:
            query_params.append(('mls1Id[]', params['mls1_id']))  # noqa: E501
            collection_formats['mls1Id[]'] = 'multi'  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups[]', params['groups']))  # noqa: E501
            collection_formats['groups[]'] = 'multi'  # noqa: E501
        if 'chats' in params:
            query_params.append(('chats', params['chats']))  # noqa: E501
        if 'chats' in params:
            query_params.append(('chats[]', params['chats']))  # noqa: E501
            collection_formats['chats[]'] = 'multi'  # noqa: E501
        if 'external_europathek_books' in params:
            query_params.append(('externalEuropathekBooks', params['external_europathek_books']))  # noqa: E501
        if 'external_europathek_books' in params:
            query_params.append(('externalEuropathekBooks[]', params['external_europathek_books']))  # noqa: E501
            collection_formats['externalEuropathekBooks[]'] = 'multi'  # noqa: E501
        if 'shared_directories' in params:
            query_params.append(('sharedDirectories', params['shared_directories']))  # noqa: E501
        if 'shared_directories' in params:
            query_params.append(('sharedDirectories[]', params['shared_directories']))  # noqa: E501
            collection_formats['sharedDirectories[]'] = 'multi'  # noqa: E501
        if 'shared_documents' in params:
            query_params.append(('sharedDocuments', params['shared_documents']))  # noqa: E501
        if 'shared_documents' in params:
            query_params.append(('sharedDocuments[]', params['shared_documents']))  # noqa: E501
            collection_formats['sharedDocuments[]'] = 'multi'  # noqa: E501
        if 'user_name_or_filter' in params:
            query_params.append(('userNameOrFilter', params['user_name_or_filter']))  # noqa: E501
        if 'todo_or_filter' in params:
            query_params.append(('todoOrFilter', params['todo_or_filter']))  # noqa: E501
        if 'user_todo_assigned_group_filter' in params:
            query_params.append(('userTodoAssignedGroupFilter', params['user_todo_assigned_group_filter']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'tasks_todo_archived' in params:
            query_params.append(('tasksTodo.archived', params['tasks_todo_archived']))  # noqa: E501
        if 'order_lastname' in params:
            query_params.append(('order[lastname]', params['order_lastname']))  # noqa: E501
        if 'order_tasks_todo_task_title' in params:
            query_params.append(('order[tasksTodo.task.title]', params['order_tasks_todo_task_title']))  # noqa: E501
        if 'exists_tasks_todo' in params:
            query_params.append(('exists[tasksTodo]', params['exists_tasks_todo']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_item(self, id, **kwargs):  # noqa: E501
        """Retrieves a User resource.  # noqa: E501

        Retrieves a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: UserJsonldUserItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a User resource.  # noqa: E501

        Retrieves a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Resource identifier (required)
        :return: UserJsonldUserItemRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserJsonldUserItemRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_user_collection(self, body, **kwargs):  # noqa: E501
        """Creates a User resource.  # noqa: E501

        Creates a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserWrite body: The new User resource (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_user_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_user_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_user_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a User resource.  # noqa: E501

        Creates a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserWrite body: The new User resource (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_user_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_user_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_user_collection(self, body, **kwargs):  # noqa: E501
        """Creates a User resource.  # noqa: E501

        Creates a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserWrite body: The new User resource (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_user_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_user_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_user_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a User resource.  # noqa: E501

        Creates a User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_user_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserWrite body: The new User resource (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_user_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_user_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_user_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the User resource.  # noqa: E501

        Replaces the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserItemWrite body: The updated User resource (required)
        :param str id: Resource identifier (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_user_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_user_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_user_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the User resource.  # noqa: E501

        Replaces the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserItemWrite body: The updated User resource (required)
        :param str id: Resource identifier (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_user_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_user_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_user_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_user_item(self, body, id, **kwargs):  # noqa: E501
        """Replaces the User resource.  # noqa: E501

        Replaces the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_item(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserItemWrite body: The updated User resource (required)
        :param str id: Resource identifier (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_user_item_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_user_item_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_user_item_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Replaces the User resource.  # noqa: E501

        Replaces the User resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_user_item_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserJsonldUserItemWrite body: The updated User resource (required)
        :param str id: Resource identifier (required)
        :return: UserJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_user_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_user_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_user_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/mls-api/users/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
