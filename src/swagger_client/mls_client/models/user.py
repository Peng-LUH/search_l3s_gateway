# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keycloak_uuid': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'username': 'str',
        'groups': 'list[str]',
        'roles': 'list[str]',
        'password': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'name': 'str',
        'email': 'str',
        'state': 'bool',
        'organizations': 'list[str]',
        'created_forms': 'list[str]',
        'user_options': 'str',
        'tasks_todo': 'list[str]',
        'group_task_todo_links': 'list[str]',
        'user_privacies': 'list[str]',
        'user_terms_of_use': 'list[str]',
        'created_tasks': 'list[str]',
        'edited_tasks': 'list[str]',
        'assigned_task_todos': 'list[str]',
        'assigned_group_task_todos': 'list[str]',
        'edited_forms': 'list[str]',
        'invited_users': 'list[str]',
        'guest_role_requests': 'list[str]',
        'directories': 'list[str]',
        'documents': 'list[str]',
        'rated_task_todos': 'list[str]',
        'purchased_external_content': 'list[str]',
        'projects': 'list[str]',
        'assigned_project_todos': 'list[str]',
        'projects_todo': 'list[str]',
        'trainee_notices': 'list[str]',
        'mls1_id': 'int',
        'updated_tasks': 'list[str]',
        'inactive_organizations': 'list[str]',
        'christiani_id': 'str',
        'christiani_token': 'str',
        'equipment': 'list[str]',
        'shared_directories': 'list[str]',
        'shared_documents': 'list[str]',
        'autofachmann_id': 'int',
        'local_europathek_books': 'list[str]',
        'external_europathek_books': 'list[str]',
        'created_chats': 'list[str]',
        'chats': 'list[str]',
        'sended_chat_messages': 'list[str]',
        'shown_groups': 'list[str]',
        'user_identifier': 'str',
        'salt': 'str'
    }

    attribute_map = {
        'keycloak_uuid': 'keycloakUuid',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'username': 'username',
        'groups': 'groups',
        'roles': 'roles',
        'password': 'password',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'name': 'name',
        'email': 'email',
        'state': 'state',
        'organizations': 'organizations',
        'created_forms': 'createdForms',
        'user_options': 'userOptions',
        'tasks_todo': 'tasksTodo',
        'group_task_todo_links': 'groupTaskTodoLinks',
        'user_privacies': 'userPrivacies',
        'user_terms_of_use': 'userTermsOfUse',
        'created_tasks': 'createdTasks',
        'edited_tasks': 'editedTasks',
        'assigned_task_todos': 'assignedTaskTodos',
        'assigned_group_task_todos': 'assignedGroupTaskTodos',
        'edited_forms': 'editedForms',
        'invited_users': 'invitedUsers',
        'guest_role_requests': 'guestRoleRequests',
        'directories': 'directories',
        'documents': 'documents',
        'rated_task_todos': 'ratedTaskTodos',
        'purchased_external_content': 'purchasedExternalContent',
        'projects': 'projects',
        'assigned_project_todos': 'assignedProjectTodos',
        'projects_todo': 'projectsTodo',
        'trainee_notices': 'traineeNotices',
        'mls1_id': 'mls1Id',
        'updated_tasks': 'updatedTasks',
        'inactive_organizations': 'inactiveOrganizations',
        'christiani_id': 'christianiId',
        'christiani_token': 'christianiToken',
        'equipment': 'equipment',
        'shared_directories': 'sharedDirectories',
        'shared_documents': 'sharedDocuments',
        'autofachmann_id': 'autofachmannId',
        'local_europathek_books': 'localEuropathekBooks',
        'external_europathek_books': 'externalEuropathekBooks',
        'created_chats': 'createdChats',
        'chats': 'chats',
        'sended_chat_messages': 'sendedChatMessages',
        'shown_groups': 'shownGroups',
        'user_identifier': 'userIdentifier',
        'salt': 'salt'
    }

    def __init__(self, keycloak_uuid=None, created_at=None, updated_at=None, id=None, username=None, groups=None, roles=None, password=None, firstname=None, lastname=None, name=None, email=None, state=None, organizations=None, created_forms=None, user_options=None, tasks_todo=None, group_task_todo_links=None, user_privacies=None, user_terms_of_use=None, created_tasks=None, edited_tasks=None, assigned_task_todos=None, assigned_group_task_todos=None, edited_forms=None, invited_users=None, guest_role_requests=None, directories=None, documents=None, rated_task_todos=None, purchased_external_content=None, projects=None, assigned_project_todos=None, projects_todo=None, trainee_notices=None, mls1_id=None, updated_tasks=None, inactive_organizations=None, christiani_id=None, christiani_token=None, equipment=None, shared_directories=None, shared_documents=None, autofachmann_id=None, local_europathek_books=None, external_europathek_books=None, created_chats=None, chats=None, sended_chat_messages=None, shown_groups=None, user_identifier=None, salt=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._keycloak_uuid = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._username = None
        self._groups = None
        self._roles = None
        self._password = None
        self._firstname = None
        self._lastname = None
        self._name = None
        self._email = None
        self._state = None
        self._organizations = None
        self._created_forms = None
        self._user_options = None
        self._tasks_todo = None
        self._group_task_todo_links = None
        self._user_privacies = None
        self._user_terms_of_use = None
        self._created_tasks = None
        self._edited_tasks = None
        self._assigned_task_todos = None
        self._assigned_group_task_todos = None
        self._edited_forms = None
        self._invited_users = None
        self._guest_role_requests = None
        self._directories = None
        self._documents = None
        self._rated_task_todos = None
        self._purchased_external_content = None
        self._projects = None
        self._assigned_project_todos = None
        self._projects_todo = None
        self._trainee_notices = None
        self._mls1_id = None
        self._updated_tasks = None
        self._inactive_organizations = None
        self._christiani_id = None
        self._christiani_token = None
        self._equipment = None
        self._shared_directories = None
        self._shared_documents = None
        self._autofachmann_id = None
        self._local_europathek_books = None
        self._external_europathek_books = None
        self._created_chats = None
        self._chats = None
        self._sended_chat_messages = None
        self._shown_groups = None
        self._user_identifier = None
        self._salt = None
        self.discriminator = None
        if keycloak_uuid is not None:
            self.keycloak_uuid = keycloak_uuid
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if groups is not None:
            self.groups = groups
        if roles is not None:
            self.roles = roles
        if password is not None:
            self.password = password
        self.firstname = firstname
        self.lastname = lastname
        if name is not None:
            self.name = name
        self.email = email
        if state is not None:
            self.state = state
        if organizations is not None:
            self.organizations = organizations
        if created_forms is not None:
            self.created_forms = created_forms
        if user_options is not None:
            self.user_options = user_options
        if tasks_todo is not None:
            self.tasks_todo = tasks_todo
        if group_task_todo_links is not None:
            self.group_task_todo_links = group_task_todo_links
        if user_privacies is not None:
            self.user_privacies = user_privacies
        if user_terms_of_use is not None:
            self.user_terms_of_use = user_terms_of_use
        if created_tasks is not None:
            self.created_tasks = created_tasks
        if edited_tasks is not None:
            self.edited_tasks = edited_tasks
        if assigned_task_todos is not None:
            self.assigned_task_todos = assigned_task_todos
        if assigned_group_task_todos is not None:
            self.assigned_group_task_todos = assigned_group_task_todos
        if edited_forms is not None:
            self.edited_forms = edited_forms
        if invited_users is not None:
            self.invited_users = invited_users
        if guest_role_requests is not None:
            self.guest_role_requests = guest_role_requests
        if directories is not None:
            self.directories = directories
        if documents is not None:
            self.documents = documents
        if rated_task_todos is not None:
            self.rated_task_todos = rated_task_todos
        if purchased_external_content is not None:
            self.purchased_external_content = purchased_external_content
        if projects is not None:
            self.projects = projects
        if assigned_project_todos is not None:
            self.assigned_project_todos = assigned_project_todos
        if projects_todo is not None:
            self.projects_todo = projects_todo
        if trainee_notices is not None:
            self.trainee_notices = trainee_notices
        if mls1_id is not None:
            self.mls1_id = mls1_id
        if updated_tasks is not None:
            self.updated_tasks = updated_tasks
        if inactive_organizations is not None:
            self.inactive_organizations = inactive_organizations
        if christiani_id is not None:
            self.christiani_id = christiani_id
        if christiani_token is not None:
            self.christiani_token = christiani_token
        if equipment is not None:
            self.equipment = equipment
        if shared_directories is not None:
            self.shared_directories = shared_directories
        if shared_documents is not None:
            self.shared_documents = shared_documents
        if autofachmann_id is not None:
            self.autofachmann_id = autofachmann_id
        if local_europathek_books is not None:
            self.local_europathek_books = local_europathek_books
        if external_europathek_books is not None:
            self.external_europathek_books = external_europathek_books
        if created_chats is not None:
            self.created_chats = created_chats
        if chats is not None:
            self.chats = chats
        if sended_chat_messages is not None:
            self.sended_chat_messages = sended_chat_messages
        if shown_groups is not None:
            self.shown_groups = shown_groups
        if user_identifier is not None:
            self.user_identifier = user_identifier
        if salt is not None:
            self.salt = salt

    @property
    def keycloak_uuid(self):
        """Gets the keycloak_uuid of this User.  # noqa: E501


        :return: The keycloak_uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._keycloak_uuid

    @keycloak_uuid.setter
    def keycloak_uuid(self, keycloak_uuid):
        """Sets the keycloak_uuid of this User.


        :param keycloak_uuid: The keycloak_uuid of this User.  # noqa: E501
        :type: str
        """

        self._keycloak_uuid = keycloak_uuid

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501


        :return: The updated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501


        :return: The groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501


        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def firstname(self):
        """Gets the firstname of this User.  # noqa: E501


        :return: The firstname of this User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.


        :param firstname: The firstname of this User.  # noqa: E501
        :type: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.  # noqa: E501


        :return: The lastname of this User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.


        :param lastname: The lastname of this User.  # noqa: E501
        :type: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        just to combine $firstname and $lastname, needs no column in database  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        just to combine $firstname and $lastname, needs no column in database  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501


        :return: The state of this User.  # noqa: E501
        :rtype: bool
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.


        :param state: The state of this User.  # noqa: E501
        :type: bool
        """

        self._state = state

    @property
    def organizations(self):
        """Gets the organizations of this User.  # noqa: E501


        :return: The organizations of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this User.


        :param organizations: The organizations of this User.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    @property
    def created_forms(self):
        """Gets the created_forms of this User.  # noqa: E501


        :return: The created_forms of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._created_forms

    @created_forms.setter
    def created_forms(self, created_forms):
        """Sets the created_forms of this User.


        :param created_forms: The created_forms of this User.  # noqa: E501
        :type: list[str]
        """

        self._created_forms = created_forms

    @property
    def user_options(self):
        """Gets the user_options of this User.  # noqa: E501


        :return: The user_options of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_options

    @user_options.setter
    def user_options(self, user_options):
        """Sets the user_options of this User.


        :param user_options: The user_options of this User.  # noqa: E501
        :type: str
        """

        self._user_options = user_options

    @property
    def tasks_todo(self):
        """Gets the tasks_todo of this User.  # noqa: E501


        :return: The tasks_todo of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._tasks_todo

    @tasks_todo.setter
    def tasks_todo(self, tasks_todo):
        """Sets the tasks_todo of this User.


        :param tasks_todo: The tasks_todo of this User.  # noqa: E501
        :type: list[str]
        """

        self._tasks_todo = tasks_todo

    @property
    def group_task_todo_links(self):
        """Gets the group_task_todo_links of this User.  # noqa: E501


        :return: The group_task_todo_links of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_task_todo_links

    @group_task_todo_links.setter
    def group_task_todo_links(self, group_task_todo_links):
        """Sets the group_task_todo_links of this User.


        :param group_task_todo_links: The group_task_todo_links of this User.  # noqa: E501
        :type: list[str]
        """

        self._group_task_todo_links = group_task_todo_links

    @property
    def user_privacies(self):
        """Gets the user_privacies of this User.  # noqa: E501


        :return: The user_privacies of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_privacies

    @user_privacies.setter
    def user_privacies(self, user_privacies):
        """Sets the user_privacies of this User.


        :param user_privacies: The user_privacies of this User.  # noqa: E501
        :type: list[str]
        """

        self._user_privacies = user_privacies

    @property
    def user_terms_of_use(self):
        """Gets the user_terms_of_use of this User.  # noqa: E501


        :return: The user_terms_of_use of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_terms_of_use

    @user_terms_of_use.setter
    def user_terms_of_use(self, user_terms_of_use):
        """Sets the user_terms_of_use of this User.


        :param user_terms_of_use: The user_terms_of_use of this User.  # noqa: E501
        :type: list[str]
        """

        self._user_terms_of_use = user_terms_of_use

    @property
    def created_tasks(self):
        """Gets the created_tasks of this User.  # noqa: E501


        :return: The created_tasks of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._created_tasks

    @created_tasks.setter
    def created_tasks(self, created_tasks):
        """Sets the created_tasks of this User.


        :param created_tasks: The created_tasks of this User.  # noqa: E501
        :type: list[str]
        """

        self._created_tasks = created_tasks

    @property
    def edited_tasks(self):
        """Gets the edited_tasks of this User.  # noqa: E501


        :return: The edited_tasks of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._edited_tasks

    @edited_tasks.setter
    def edited_tasks(self, edited_tasks):
        """Sets the edited_tasks of this User.


        :param edited_tasks: The edited_tasks of this User.  # noqa: E501
        :type: list[str]
        """

        self._edited_tasks = edited_tasks

    @property
    def assigned_task_todos(self):
        """Gets the assigned_task_todos of this User.  # noqa: E501


        :return: The assigned_task_todos of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_task_todos

    @assigned_task_todos.setter
    def assigned_task_todos(self, assigned_task_todos):
        """Sets the assigned_task_todos of this User.


        :param assigned_task_todos: The assigned_task_todos of this User.  # noqa: E501
        :type: list[str]
        """

        self._assigned_task_todos = assigned_task_todos

    @property
    def assigned_group_task_todos(self):
        """Gets the assigned_group_task_todos of this User.  # noqa: E501


        :return: The assigned_group_task_todos of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_group_task_todos

    @assigned_group_task_todos.setter
    def assigned_group_task_todos(self, assigned_group_task_todos):
        """Sets the assigned_group_task_todos of this User.


        :param assigned_group_task_todos: The assigned_group_task_todos of this User.  # noqa: E501
        :type: list[str]
        """

        self._assigned_group_task_todos = assigned_group_task_todos

    @property
    def edited_forms(self):
        """Gets the edited_forms of this User.  # noqa: E501


        :return: The edited_forms of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._edited_forms

    @edited_forms.setter
    def edited_forms(self, edited_forms):
        """Sets the edited_forms of this User.


        :param edited_forms: The edited_forms of this User.  # noqa: E501
        :type: list[str]
        """

        self._edited_forms = edited_forms

    @property
    def invited_users(self):
        """Gets the invited_users of this User.  # noqa: E501


        :return: The invited_users of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._invited_users

    @invited_users.setter
    def invited_users(self, invited_users):
        """Sets the invited_users of this User.


        :param invited_users: The invited_users of this User.  # noqa: E501
        :type: list[str]
        """

        self._invited_users = invited_users

    @property
    def guest_role_requests(self):
        """Gets the guest_role_requests of this User.  # noqa: E501


        :return: The guest_role_requests of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._guest_role_requests

    @guest_role_requests.setter
    def guest_role_requests(self, guest_role_requests):
        """Sets the guest_role_requests of this User.


        :param guest_role_requests: The guest_role_requests of this User.  # noqa: E501
        :type: list[str]
        """

        self._guest_role_requests = guest_role_requests

    @property
    def directories(self):
        """Gets the directories of this User.  # noqa: E501


        :return: The directories of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this User.


        :param directories: The directories of this User.  # noqa: E501
        :type: list[str]
        """

        self._directories = directories

    @property
    def documents(self):
        """Gets the documents of this User.  # noqa: E501


        :return: The documents of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this User.


        :param documents: The documents of this User.  # noqa: E501
        :type: list[str]
        """

        self._documents = documents

    @property
    def rated_task_todos(self):
        """Gets the rated_task_todos of this User.  # noqa: E501


        :return: The rated_task_todos of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._rated_task_todos

    @rated_task_todos.setter
    def rated_task_todos(self, rated_task_todos):
        """Sets the rated_task_todos of this User.


        :param rated_task_todos: The rated_task_todos of this User.  # noqa: E501
        :type: list[str]
        """

        self._rated_task_todos = rated_task_todos

    @property
    def purchased_external_content(self):
        """Gets the purchased_external_content of this User.  # noqa: E501


        :return: The purchased_external_content of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._purchased_external_content

    @purchased_external_content.setter
    def purchased_external_content(self, purchased_external_content):
        """Sets the purchased_external_content of this User.


        :param purchased_external_content: The purchased_external_content of this User.  # noqa: E501
        :type: list[str]
        """

        self._purchased_external_content = purchased_external_content

    @property
    def projects(self):
        """Gets the projects of this User.  # noqa: E501


        :return: The projects of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this User.


        :param projects: The projects of this User.  # noqa: E501
        :type: list[str]
        """

        self._projects = projects

    @property
    def assigned_project_todos(self):
        """Gets the assigned_project_todos of this User.  # noqa: E501


        :return: The assigned_project_todos of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_project_todos

    @assigned_project_todos.setter
    def assigned_project_todos(self, assigned_project_todos):
        """Sets the assigned_project_todos of this User.


        :param assigned_project_todos: The assigned_project_todos of this User.  # noqa: E501
        :type: list[str]
        """

        self._assigned_project_todos = assigned_project_todos

    @property
    def projects_todo(self):
        """Gets the projects_todo of this User.  # noqa: E501


        :return: The projects_todo of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects_todo

    @projects_todo.setter
    def projects_todo(self, projects_todo):
        """Sets the projects_todo of this User.


        :param projects_todo: The projects_todo of this User.  # noqa: E501
        :type: list[str]
        """

        self._projects_todo = projects_todo

    @property
    def trainee_notices(self):
        """Gets the trainee_notices of this User.  # noqa: E501


        :return: The trainee_notices of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._trainee_notices

    @trainee_notices.setter
    def trainee_notices(self, trainee_notices):
        """Sets the trainee_notices of this User.


        :param trainee_notices: The trainee_notices of this User.  # noqa: E501
        :type: list[str]
        """

        self._trainee_notices = trainee_notices

    @property
    def mls1_id(self):
        """Gets the mls1_id of this User.  # noqa: E501


        :return: The mls1_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this User.


        :param mls1_id: The mls1_id of this User.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    @property
    def updated_tasks(self):
        """Gets the updated_tasks of this User.  # noqa: E501


        :return: The updated_tasks of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._updated_tasks

    @updated_tasks.setter
    def updated_tasks(self, updated_tasks):
        """Sets the updated_tasks of this User.


        :param updated_tasks: The updated_tasks of this User.  # noqa: E501
        :type: list[str]
        """

        self._updated_tasks = updated_tasks

    @property
    def inactive_organizations(self):
        """Gets the inactive_organizations of this User.  # noqa: E501


        :return: The inactive_organizations of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._inactive_organizations

    @inactive_organizations.setter
    def inactive_organizations(self, inactive_organizations):
        """Sets the inactive_organizations of this User.


        :param inactive_organizations: The inactive_organizations of this User.  # noqa: E501
        :type: list[str]
        """

        self._inactive_organizations = inactive_organizations

    @property
    def christiani_id(self):
        """Gets the christiani_id of this User.  # noqa: E501


        :return: The christiani_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._christiani_id

    @christiani_id.setter
    def christiani_id(self, christiani_id):
        """Sets the christiani_id of this User.


        :param christiani_id: The christiani_id of this User.  # noqa: E501
        :type: str
        """

        self._christiani_id = christiani_id

    @property
    def christiani_token(self):
        """Gets the christiani_token of this User.  # noqa: E501


        :return: The christiani_token of this User.  # noqa: E501
        :rtype: str
        """
        return self._christiani_token

    @christiani_token.setter
    def christiani_token(self, christiani_token):
        """Sets the christiani_token of this User.


        :param christiani_token: The christiani_token of this User.  # noqa: E501
        :type: str
        """

        self._christiani_token = christiani_token

    @property
    def equipment(self):
        """Gets the equipment of this User.  # noqa: E501


        :return: The equipment of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this User.


        :param equipment: The equipment of this User.  # noqa: E501
        :type: list[str]
        """

        self._equipment = equipment

    @property
    def shared_directories(self):
        """Gets the shared_directories of this User.  # noqa: E501


        :return: The shared_directories of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_directories

    @shared_directories.setter
    def shared_directories(self, shared_directories):
        """Sets the shared_directories of this User.


        :param shared_directories: The shared_directories of this User.  # noqa: E501
        :type: list[str]
        """

        self._shared_directories = shared_directories

    @property
    def shared_documents(self):
        """Gets the shared_documents of this User.  # noqa: E501


        :return: The shared_documents of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_documents

    @shared_documents.setter
    def shared_documents(self, shared_documents):
        """Sets the shared_documents of this User.


        :param shared_documents: The shared_documents of this User.  # noqa: E501
        :type: list[str]
        """

        self._shared_documents = shared_documents

    @property
    def autofachmann_id(self):
        """Gets the autofachmann_id of this User.  # noqa: E501


        :return: The autofachmann_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._autofachmann_id

    @autofachmann_id.setter
    def autofachmann_id(self, autofachmann_id):
        """Sets the autofachmann_id of this User.


        :param autofachmann_id: The autofachmann_id of this User.  # noqa: E501
        :type: int
        """

        self._autofachmann_id = autofachmann_id

    @property
    def local_europathek_books(self):
        """Gets the local_europathek_books of this User.  # noqa: E501


        :return: The local_europathek_books of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_europathek_books

    @local_europathek_books.setter
    def local_europathek_books(self, local_europathek_books):
        """Sets the local_europathek_books of this User.


        :param local_europathek_books: The local_europathek_books of this User.  # noqa: E501
        :type: list[str]
        """

        self._local_europathek_books = local_europathek_books

    @property
    def external_europathek_books(self):
        """Gets the external_europathek_books of this User.  # noqa: E501


        :return: The external_europathek_books of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_europathek_books

    @external_europathek_books.setter
    def external_europathek_books(self, external_europathek_books):
        """Sets the external_europathek_books of this User.


        :param external_europathek_books: The external_europathek_books of this User.  # noqa: E501
        :type: list[str]
        """

        self._external_europathek_books = external_europathek_books

    @property
    def created_chats(self):
        """Gets the created_chats of this User.  # noqa: E501


        :return: The created_chats of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._created_chats

    @created_chats.setter
    def created_chats(self, created_chats):
        """Sets the created_chats of this User.


        :param created_chats: The created_chats of this User.  # noqa: E501
        :type: list[str]
        """

        self._created_chats = created_chats

    @property
    def chats(self):
        """Gets the chats of this User.  # noqa: E501


        :return: The chats of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._chats

    @chats.setter
    def chats(self, chats):
        """Sets the chats of this User.


        :param chats: The chats of this User.  # noqa: E501
        :type: list[str]
        """

        self._chats = chats

    @property
    def sended_chat_messages(self):
        """Gets the sended_chat_messages of this User.  # noqa: E501


        :return: The sended_chat_messages of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._sended_chat_messages

    @sended_chat_messages.setter
    def sended_chat_messages(self, sended_chat_messages):
        """Sets the sended_chat_messages of this User.


        :param sended_chat_messages: The sended_chat_messages of this User.  # noqa: E501
        :type: list[str]
        """

        self._sended_chat_messages = sended_chat_messages

    @property
    def shown_groups(self):
        """Gets the shown_groups of this User.  # noqa: E501


        :return: The shown_groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._shown_groups

    @shown_groups.setter
    def shown_groups(self, shown_groups):
        """Sets the shown_groups of this User.


        :param shown_groups: The shown_groups of this User.  # noqa: E501
        :type: list[str]
        """

        self._shown_groups = shown_groups

    @property
    def user_identifier(self):
        """Gets the user_identifier of this User.  # noqa: E501

        A visual identifier that represents this user.  # noqa: E501

        :return: The user_identifier of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """Sets the user_identifier of this User.

        A visual identifier that represents this user.  # noqa: E501

        :param user_identifier: The user_identifier of this User.  # noqa: E501
        :type: str
        """

        self._user_identifier = user_identifier

    @property
    def salt(self):
        """Gets the salt of this User.  # noqa: E501

        Returning a salt is only needed, if you are not using a modern hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.  # noqa: E501

        :return: The salt of this User.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this User.

        Returning a salt is only needed, if you are not using a modern hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.  # noqa: E501

        :param salt: The salt of this User.  # noqa: E501
        :type: str
        """

        self._salt = salt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
