# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationSettingsOrganizationSettingsItemWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consultant': 'str',
        'organization_relation': 'list[str]',
        'organizations_for_share': 'list[str]',
        'task_deletable': 'bool',
        'has_chat': 'bool',
        'has_time_recording': 'bool',
        'mails_display': 'bool',
        'send_mail_task_assigned': 'bool',
        'time_display': 'bool',
        'invitation_confirmation': 'bool',
        'allowed_to_invite_more_users_than_licenses_available': 'bool',
        'allowed_to_assign_jobs': 'bool',
        'allowed_guest_role': 'bool',
        'external_europathek_books': 'list[str]',
        'logo_for_external_content': 'str',
        'settings_for_external_content': 'list[str]',
        'external_ilias_courses': 'list[str]',
        'taskeditor': 'bool',
        'trainee_stop_task': 'bool',
        'trainee_documents': 'bool',
        'trainee_documents_readonly': 'bool',
        'allowed_feedbacks': 'bool',
        'allowed_feedbacks_of_all': 'bool',
        'primary_color': 'str',
        'is_using_tile_dashboard': 'bool',
        'evaluation_enabled': 'bool',
        'simpleclub': 'bool',
        'weight_mode': 'str',
        'allow_link_tasks': 'bool',
        'autofachmann': 'bool',
        'logo_color': 'str',
        'organizations_in_group': 'list[str]',
        'equipment_maintenance': 'bool',
        'jobs_and_skills': 'bool',
        'internal': 'bool',
        'show_form_after_finish': 'bool',
        'studyflix': 'bool'
    }

    attribute_map = {
        'consultant': 'consultant',
        'organization_relation': 'organizationRelation',
        'organizations_for_share': 'organizationsForShare',
        'task_deletable': 'taskDeletable',
        'has_chat': 'hasChat',
        'has_time_recording': 'hasTimeRecording',
        'mails_display': 'mailsDisplay',
        'send_mail_task_assigned': 'sendMailTaskAssigned',
        'time_display': 'timeDisplay',
        'invitation_confirmation': 'invitationConfirmation',
        'allowed_to_invite_more_users_than_licenses_available': 'allowedToInviteMoreUsersThanLicensesAvailable',
        'allowed_to_assign_jobs': 'allowedToAssignJobs',
        'allowed_guest_role': 'allowedGuestRole',
        'external_europathek_books': 'externalEuropathekBooks',
        'logo_for_external_content': 'logoForExternalContent',
        'settings_for_external_content': 'settingsForExternalContent',
        'external_ilias_courses': 'externalIliasCourses',
        'taskeditor': 'taskeditor',
        'trainee_stop_task': 'traineeStopTask',
        'trainee_documents': 'traineeDocuments',
        'trainee_documents_readonly': 'traineeDocumentsReadonly',
        'allowed_feedbacks': 'allowedFeedbacks',
        'allowed_feedbacks_of_all': 'allowedFeedbacksOfAll',
        'primary_color': 'primaryColor',
        'is_using_tile_dashboard': 'isUsingTileDashboard',
        'evaluation_enabled': 'evaluationEnabled',
        'simpleclub': 'simpleclub',
        'weight_mode': 'weightMode',
        'allow_link_tasks': 'allowLinkTasks',
        'autofachmann': 'autofachmann',
        'logo_color': 'logoColor',
        'organizations_in_group': 'organizationsInGroup',
        'equipment_maintenance': 'equipmentMaintenance',
        'jobs_and_skills': 'jobsAndSkills',
        'internal': 'internal',
        'show_form_after_finish': 'showFormAfterFinish',
        'studyflix': 'studyflix'
    }

    def __init__(self, consultant=None, organization_relation=None, organizations_for_share=None, task_deletable=True, has_chat=None, has_time_recording=True, mails_display=None, send_mail_task_assigned=None, time_display=True, invitation_confirmation=None, allowed_to_invite_more_users_than_licenses_available=None, allowed_to_assign_jobs=None, allowed_guest_role=None, external_europathek_books=None, logo_for_external_content=None, settings_for_external_content=None, external_ilias_courses=None, taskeditor=True, trainee_stop_task=None, trainee_documents=None, trainee_documents_readonly=None, allowed_feedbacks=True, allowed_feedbacks_of_all=True, primary_color=None, is_using_tile_dashboard=None, evaluation_enabled=True, simpleclub=None, weight_mode='POINTS', allow_link_tasks=None, autofachmann=None, logo_color=None, organizations_in_group=None, equipment_maintenance=None, jobs_and_skills=True, internal=None, show_form_after_finish=True, studyflix=None):  # noqa: E501
        """OrganizationSettingsOrganizationSettingsItemWrite - a model defined in Swagger"""  # noqa: E501
        self._consultant = None
        self._organization_relation = None
        self._organizations_for_share = None
        self._task_deletable = None
        self._has_chat = None
        self._has_time_recording = None
        self._mails_display = None
        self._send_mail_task_assigned = None
        self._time_display = None
        self._invitation_confirmation = None
        self._allowed_to_invite_more_users_than_licenses_available = None
        self._allowed_to_assign_jobs = None
        self._allowed_guest_role = None
        self._external_europathek_books = None
        self._logo_for_external_content = None
        self._settings_for_external_content = None
        self._external_ilias_courses = None
        self._taskeditor = None
        self._trainee_stop_task = None
        self._trainee_documents = None
        self._trainee_documents_readonly = None
        self._allowed_feedbacks = None
        self._allowed_feedbacks_of_all = None
        self._primary_color = None
        self._is_using_tile_dashboard = None
        self._evaluation_enabled = None
        self._simpleclub = None
        self._weight_mode = None
        self._allow_link_tasks = None
        self._autofachmann = None
        self._logo_color = None
        self._organizations_in_group = None
        self._equipment_maintenance = None
        self._jobs_and_skills = None
        self._internal = None
        self._show_form_after_finish = None
        self._studyflix = None
        self.discriminator = None
        if consultant is not None:
            self.consultant = consultant
        if organization_relation is not None:
            self.organization_relation = organization_relation
        if organizations_for_share is not None:
            self.organizations_for_share = organizations_for_share
        if task_deletable is not None:
            self.task_deletable = task_deletable
        if has_chat is not None:
            self.has_chat = has_chat
        if has_time_recording is not None:
            self.has_time_recording = has_time_recording
        if mails_display is not None:
            self.mails_display = mails_display
        if send_mail_task_assigned is not None:
            self.send_mail_task_assigned = send_mail_task_assigned
        if time_display is not None:
            self.time_display = time_display
        if invitation_confirmation is not None:
            self.invitation_confirmation = invitation_confirmation
        if allowed_to_invite_more_users_than_licenses_available is not None:
            self.allowed_to_invite_more_users_than_licenses_available = allowed_to_invite_more_users_than_licenses_available
        if allowed_to_assign_jobs is not None:
            self.allowed_to_assign_jobs = allowed_to_assign_jobs
        if allowed_guest_role is not None:
            self.allowed_guest_role = allowed_guest_role
        if external_europathek_books is not None:
            self.external_europathek_books = external_europathek_books
        if logo_for_external_content is not None:
            self.logo_for_external_content = logo_for_external_content
        if settings_for_external_content is not None:
            self.settings_for_external_content = settings_for_external_content
        if external_ilias_courses is not None:
            self.external_ilias_courses = external_ilias_courses
        if taskeditor is not None:
            self.taskeditor = taskeditor
        if trainee_stop_task is not None:
            self.trainee_stop_task = trainee_stop_task
        if trainee_documents is not None:
            self.trainee_documents = trainee_documents
        if trainee_documents_readonly is not None:
            self.trainee_documents_readonly = trainee_documents_readonly
        if allowed_feedbacks is not None:
            self.allowed_feedbacks = allowed_feedbacks
        if allowed_feedbacks_of_all is not None:
            self.allowed_feedbacks_of_all = allowed_feedbacks_of_all
        if primary_color is not None:
            self.primary_color = primary_color
        if is_using_tile_dashboard is not None:
            self.is_using_tile_dashboard = is_using_tile_dashboard
        if evaluation_enabled is not None:
            self.evaluation_enabled = evaluation_enabled
        if simpleclub is not None:
            self.simpleclub = simpleclub
        if weight_mode is not None:
            self.weight_mode = weight_mode
        if allow_link_tasks is not None:
            self.allow_link_tasks = allow_link_tasks
        if autofachmann is not None:
            self.autofachmann = autofachmann
        if logo_color is not None:
            self.logo_color = logo_color
        if organizations_in_group is not None:
            self.organizations_in_group = organizations_in_group
        if equipment_maintenance is not None:
            self.equipment_maintenance = equipment_maintenance
        if jobs_and_skills is not None:
            self.jobs_and_skills = jobs_and_skills
        if internal is not None:
            self.internal = internal
        if show_form_after_finish is not None:
            self.show_form_after_finish = show_form_after_finish
        if studyflix is not None:
            self.studyflix = studyflix

    @property
    def consultant(self):
        """Gets the consultant of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The consultant of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._consultant

    @consultant.setter
    def consultant(self, consultant):
        """Sets the consultant of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param consultant: The consultant of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: str
        """

        self._consultant = consultant

    @property
    def organization_relation(self):
        """Gets the organization_relation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The organization_relation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_relation

    @organization_relation.setter
    def organization_relation(self, organization_relation):
        """Sets the organization_relation of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param organization_relation: The organization_relation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._organization_relation = organization_relation

    @property
    def organizations_for_share(self):
        """Gets the organizations_for_share of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The organizations_for_share of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations_for_share

    @organizations_for_share.setter
    def organizations_for_share(self, organizations_for_share):
        """Sets the organizations_for_share of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param organizations_for_share: The organizations_for_share of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._organizations_for_share = organizations_for_share

    @property
    def task_deletable(self):
        """Gets the task_deletable of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The task_deletable of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._task_deletable

    @task_deletable.setter
    def task_deletable(self, task_deletable):
        """Sets the task_deletable of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param task_deletable: The task_deletable of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._task_deletable = task_deletable

    @property
    def has_chat(self):
        """Gets the has_chat of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The has_chat of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._has_chat

    @has_chat.setter
    def has_chat(self, has_chat):
        """Sets the has_chat of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param has_chat: The has_chat of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._has_chat = has_chat

    @property
    def has_time_recording(self):
        """Gets the has_time_recording of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The has_time_recording of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._has_time_recording

    @has_time_recording.setter
    def has_time_recording(self, has_time_recording):
        """Sets the has_time_recording of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param has_time_recording: The has_time_recording of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._has_time_recording = has_time_recording

    @property
    def mails_display(self):
        """Gets the mails_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The mails_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._mails_display

    @mails_display.setter
    def mails_display(self, mails_display):
        """Sets the mails_display of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param mails_display: The mails_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._mails_display = mails_display

    @property
    def send_mail_task_assigned(self):
        """Gets the send_mail_task_assigned of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The send_mail_task_assigned of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._send_mail_task_assigned

    @send_mail_task_assigned.setter
    def send_mail_task_assigned(self, send_mail_task_assigned):
        """Sets the send_mail_task_assigned of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param send_mail_task_assigned: The send_mail_task_assigned of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._send_mail_task_assigned = send_mail_task_assigned

    @property
    def time_display(self):
        """Gets the time_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The time_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._time_display

    @time_display.setter
    def time_display(self, time_display):
        """Sets the time_display of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param time_display: The time_display of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._time_display = time_display

    @property
    def invitation_confirmation(self):
        """Gets the invitation_confirmation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The invitation_confirmation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._invitation_confirmation

    @invitation_confirmation.setter
    def invitation_confirmation(self, invitation_confirmation):
        """Sets the invitation_confirmation of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param invitation_confirmation: The invitation_confirmation of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._invitation_confirmation = invitation_confirmation

    @property
    def allowed_to_invite_more_users_than_licenses_available(self):
        """Gets the allowed_to_invite_more_users_than_licenses_available of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allowed_to_invite_more_users_than_licenses_available of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_to_invite_more_users_than_licenses_available

    @allowed_to_invite_more_users_than_licenses_available.setter
    def allowed_to_invite_more_users_than_licenses_available(self, allowed_to_invite_more_users_than_licenses_available):
        """Sets the allowed_to_invite_more_users_than_licenses_available of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allowed_to_invite_more_users_than_licenses_available: The allowed_to_invite_more_users_than_licenses_available of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allowed_to_invite_more_users_than_licenses_available = allowed_to_invite_more_users_than_licenses_available

    @property
    def allowed_to_assign_jobs(self):
        """Gets the allowed_to_assign_jobs of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allowed_to_assign_jobs of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_to_assign_jobs

    @allowed_to_assign_jobs.setter
    def allowed_to_assign_jobs(self, allowed_to_assign_jobs):
        """Sets the allowed_to_assign_jobs of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allowed_to_assign_jobs: The allowed_to_assign_jobs of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allowed_to_assign_jobs = allowed_to_assign_jobs

    @property
    def allowed_guest_role(self):
        """Gets the allowed_guest_role of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allowed_guest_role of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_guest_role

    @allowed_guest_role.setter
    def allowed_guest_role(self, allowed_guest_role):
        """Sets the allowed_guest_role of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allowed_guest_role: The allowed_guest_role of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allowed_guest_role = allowed_guest_role

    @property
    def external_europathek_books(self):
        """Gets the external_europathek_books of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The external_europathek_books of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_europathek_books

    @external_europathek_books.setter
    def external_europathek_books(self, external_europathek_books):
        """Sets the external_europathek_books of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param external_europathek_books: The external_europathek_books of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._external_europathek_books = external_europathek_books

    @property
    def logo_for_external_content(self):
        """Gets the logo_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The logo_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._logo_for_external_content

    @logo_for_external_content.setter
    def logo_for_external_content(self, logo_for_external_content):
        """Sets the logo_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param logo_for_external_content: The logo_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: str
        """

        self._logo_for_external_content = logo_for_external_content

    @property
    def settings_for_external_content(self):
        """Gets the settings_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The settings_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._settings_for_external_content

    @settings_for_external_content.setter
    def settings_for_external_content(self, settings_for_external_content):
        """Sets the settings_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param settings_for_external_content: The settings_for_external_content of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._settings_for_external_content = settings_for_external_content

    @property
    def external_ilias_courses(self):
        """Gets the external_ilias_courses of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The external_ilias_courses of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_ilias_courses

    @external_ilias_courses.setter
    def external_ilias_courses(self, external_ilias_courses):
        """Sets the external_ilias_courses of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param external_ilias_courses: The external_ilias_courses of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._external_ilias_courses = external_ilias_courses

    @property
    def taskeditor(self):
        """Gets the taskeditor of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The taskeditor of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._taskeditor

    @taskeditor.setter
    def taskeditor(self, taskeditor):
        """Sets the taskeditor of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param taskeditor: The taskeditor of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._taskeditor = taskeditor

    @property
    def trainee_stop_task(self):
        """Gets the trainee_stop_task of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The trainee_stop_task of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_stop_task

    @trainee_stop_task.setter
    def trainee_stop_task(self, trainee_stop_task):
        """Sets the trainee_stop_task of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param trainee_stop_task: The trainee_stop_task of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._trainee_stop_task = trainee_stop_task

    @property
    def trainee_documents(self):
        """Gets the trainee_documents of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The trainee_documents of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_documents

    @trainee_documents.setter
    def trainee_documents(self, trainee_documents):
        """Sets the trainee_documents of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param trainee_documents: The trainee_documents of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._trainee_documents = trainee_documents

    @property
    def trainee_documents_readonly(self):
        """Gets the trainee_documents_readonly of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The trainee_documents_readonly of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_documents_readonly

    @trainee_documents_readonly.setter
    def trainee_documents_readonly(self, trainee_documents_readonly):
        """Sets the trainee_documents_readonly of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param trainee_documents_readonly: The trainee_documents_readonly of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._trainee_documents_readonly = trainee_documents_readonly

    @property
    def allowed_feedbacks(self):
        """Gets the allowed_feedbacks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allowed_feedbacks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_feedbacks

    @allowed_feedbacks.setter
    def allowed_feedbacks(self, allowed_feedbacks):
        """Sets the allowed_feedbacks of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allowed_feedbacks: The allowed_feedbacks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allowed_feedbacks = allowed_feedbacks

    @property
    def allowed_feedbacks_of_all(self):
        """Gets the allowed_feedbacks_of_all of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allowed_feedbacks_of_all of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_feedbacks_of_all

    @allowed_feedbacks_of_all.setter
    def allowed_feedbacks_of_all(self, allowed_feedbacks_of_all):
        """Sets the allowed_feedbacks_of_all of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allowed_feedbacks_of_all: The allowed_feedbacks_of_all of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allowed_feedbacks_of_all = allowed_feedbacks_of_all

    @property
    def primary_color(self):
        """Gets the primary_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The primary_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """Sets the primary_color of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param primary_color: The primary_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: str
        """

        self._primary_color = primary_color

    @property
    def is_using_tile_dashboard(self):
        """Gets the is_using_tile_dashboard of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The is_using_tile_dashboard of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._is_using_tile_dashboard

    @is_using_tile_dashboard.setter
    def is_using_tile_dashboard(self, is_using_tile_dashboard):
        """Sets the is_using_tile_dashboard of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param is_using_tile_dashboard: The is_using_tile_dashboard of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._is_using_tile_dashboard = is_using_tile_dashboard

    @property
    def evaluation_enabled(self):
        """Gets the evaluation_enabled of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The evaluation_enabled of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._evaluation_enabled

    @evaluation_enabled.setter
    def evaluation_enabled(self, evaluation_enabled):
        """Sets the evaluation_enabled of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param evaluation_enabled: The evaluation_enabled of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._evaluation_enabled = evaluation_enabled

    @property
    def simpleclub(self):
        """Gets the simpleclub of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The simpleclub of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._simpleclub

    @simpleclub.setter
    def simpleclub(self, simpleclub):
        """Sets the simpleclub of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param simpleclub: The simpleclub of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._simpleclub = simpleclub

    @property
    def weight_mode(self):
        """Gets the weight_mode of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The weight_mode of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._weight_mode

    @weight_mode.setter
    def weight_mode(self, weight_mode):
        """Sets the weight_mode of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param weight_mode: The weight_mode of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: str
        """

        self._weight_mode = weight_mode

    @property
    def allow_link_tasks(self):
        """Gets the allow_link_tasks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The allow_link_tasks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allow_link_tasks

    @allow_link_tasks.setter
    def allow_link_tasks(self, allow_link_tasks):
        """Sets the allow_link_tasks of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param allow_link_tasks: The allow_link_tasks of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._allow_link_tasks = allow_link_tasks

    @property
    def autofachmann(self):
        """Gets the autofachmann of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The autofachmann of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._autofachmann

    @autofachmann.setter
    def autofachmann(self, autofachmann):
        """Sets the autofachmann of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param autofachmann: The autofachmann of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._autofachmann = autofachmann

    @property
    def logo_color(self):
        """Gets the logo_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The logo_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._logo_color

    @logo_color.setter
    def logo_color(self, logo_color):
        """Sets the logo_color of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param logo_color: The logo_color of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: str
        """

        self._logo_color = logo_color

    @property
    def organizations_in_group(self):
        """Gets the organizations_in_group of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The organizations_in_group of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations_in_group

    @organizations_in_group.setter
    def organizations_in_group(self, organizations_in_group):
        """Sets the organizations_in_group of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param organizations_in_group: The organizations_in_group of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._organizations_in_group = organizations_in_group

    @property
    def equipment_maintenance(self):
        """Gets the equipment_maintenance of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The equipment_maintenance of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._equipment_maintenance

    @equipment_maintenance.setter
    def equipment_maintenance(self, equipment_maintenance):
        """Sets the equipment_maintenance of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param equipment_maintenance: The equipment_maintenance of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._equipment_maintenance = equipment_maintenance

    @property
    def jobs_and_skills(self):
        """Gets the jobs_and_skills of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The jobs_and_skills of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._jobs_and_skills

    @jobs_and_skills.setter
    def jobs_and_skills(self, jobs_and_skills):
        """Sets the jobs_and_skills of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param jobs_and_skills: The jobs_and_skills of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._jobs_and_skills = jobs_and_skills

    @property
    def internal(self):
        """Gets the internal of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The internal of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param internal: The internal of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def show_form_after_finish(self):
        """Gets the show_form_after_finish of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The show_form_after_finish of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._show_form_after_finish

    @show_form_after_finish.setter
    def show_form_after_finish(self, show_form_after_finish):
        """Sets the show_form_after_finish of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param show_form_after_finish: The show_form_after_finish of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._show_form_after_finish = show_form_after_finish

    @property
    def studyflix(self):
        """Gets the studyflix of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501


        :return: The studyflix of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._studyflix

    @studyflix.setter
    def studyflix(self, studyflix):
        """Sets the studyflix of this OrganizationSettingsOrganizationSettingsItemWrite.


        :param studyflix: The studyflix of this OrganizationSettingsOrganizationSettingsItemWrite.  # noqa: E501
        :type: bool
        """

        self._studyflix = studyflix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationSettingsOrganizationSettingsItemWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSettingsOrganizationSettingsItemWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
