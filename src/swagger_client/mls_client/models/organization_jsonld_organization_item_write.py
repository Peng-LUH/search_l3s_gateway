# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationJsonldOrganizationItemWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfOrganizationJsonldOrganizationItemWriteContext',
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'streetno': 'str',
        'zip': 'str',
        'city': 'str',
        'country': 'str',
        'note': 'str',
        'task_sets': 'list[str]',
        'task_step_categories': 'list[str]',
        'form_sets': 'list[str]',
        'groups': 'list[str]',
        'users': 'list[str]',
        'privacies': 'list[str]',
        'terms_of_use': 'list[str]',
        'logo': 'str',
        'mls1_id': 'int',
        'former_users': 'list[str]',
        'blok_id': 'int',
        'e_cademy_token': 'str',
        'scorms': 'list[str]',
        'jobs': 'list[str]',
        'equipment': 'list[str]',
        'background_file': 'str',
        'christiani_ids': 'list[str]',
        'scorm_groups': 'list[str]',
        'equipment_locations': 'list[str]',
        'app_tags': 'list[str]',
        'organization_head_file': 'str',
        'organization_footer_file': 'str',
        'organization_header_file': 'str',
        'shared_task_sets': 'list[str]',
        'user_invitations': 'list[str]',
        'organization_in_group': 'str',
        'autofachmann_subscription_no': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'name': 'name',
        'streetno': 'streetno',
        'zip': 'zip',
        'city': 'city',
        'country': 'country',
        'note': 'note',
        'task_sets': 'taskSets',
        'task_step_categories': 'taskStepCategories',
        'form_sets': 'formSets',
        'groups': 'groups',
        'users': 'users',
        'privacies': 'privacies',
        'terms_of_use': 'termsOfUse',
        'logo': 'logo',
        'mls1_id': 'mls1Id',
        'former_users': 'formerUsers',
        'blok_id': 'blokId',
        'e_cademy_token': 'eCademyToken',
        'scorms': 'scorms',
        'jobs': 'jobs',
        'equipment': 'equipment',
        'background_file': 'backgroundFile',
        'christiani_ids': 'christianiIds',
        'scorm_groups': 'scormGroups',
        'equipment_locations': 'equipmentLocations',
        'app_tags': 'appTags',
        'organization_head_file': 'organizationHeadFile',
        'organization_footer_file': 'organizationFooterFile',
        'organization_header_file': 'organizationHeaderFile',
        'shared_task_sets': 'sharedTaskSets',
        'user_invitations': 'userInvitations',
        'organization_in_group': 'organizationInGroup',
        'autofachmann_subscription_no': 'autofachmannSubscriptionNo'
    }

    def __init__(self, context=None, id=None, type=None, name=None, streetno=None, zip=None, city=None, country=None, note=None, task_sets=None, task_step_categories=None, form_sets=None, groups=None, users=None, privacies=None, terms_of_use=None, logo=None, mls1_id=None, former_users=None, blok_id=None, e_cademy_token=None, scorms=None, jobs=None, equipment=None, background_file=None, christiani_ids=None, scorm_groups=None, equipment_locations=None, app_tags=None, organization_head_file=None, organization_footer_file=None, organization_header_file=None, shared_task_sets=None, user_invitations=None, organization_in_group=None, autofachmann_subscription_no=None):  # noqa: E501
        """OrganizationJsonldOrganizationItemWrite - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._name = None
        self._streetno = None
        self._zip = None
        self._city = None
        self._country = None
        self._note = None
        self._task_sets = None
        self._task_step_categories = None
        self._form_sets = None
        self._groups = None
        self._users = None
        self._privacies = None
        self._terms_of_use = None
        self._logo = None
        self._mls1_id = None
        self._former_users = None
        self._blok_id = None
        self._e_cademy_token = None
        self._scorms = None
        self._jobs = None
        self._equipment = None
        self._background_file = None
        self._christiani_ids = None
        self._scorm_groups = None
        self._equipment_locations = None
        self._app_tags = None
        self._organization_head_file = None
        self._organization_footer_file = None
        self._organization_header_file = None
        self._shared_task_sets = None
        self._user_invitations = None
        self._organization_in_group = None
        self._autofachmann_subscription_no = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        self.name = name
        self.streetno = streetno
        self.zip = zip
        self.city = city
        self.country = country
        if note is not None:
            self.note = note
        if task_sets is not None:
            self.task_sets = task_sets
        if task_step_categories is not None:
            self.task_step_categories = task_step_categories
        if form_sets is not None:
            self.form_sets = form_sets
        if groups is not None:
            self.groups = groups
        if users is not None:
            self.users = users
        if privacies is not None:
            self.privacies = privacies
        if terms_of_use is not None:
            self.terms_of_use = terms_of_use
        if logo is not None:
            self.logo = logo
        if mls1_id is not None:
            self.mls1_id = mls1_id
        if former_users is not None:
            self.former_users = former_users
        if blok_id is not None:
            self.blok_id = blok_id
        if e_cademy_token is not None:
            self.e_cademy_token = e_cademy_token
        if scorms is not None:
            self.scorms = scorms
        if jobs is not None:
            self.jobs = jobs
        if equipment is not None:
            self.equipment = equipment
        if background_file is not None:
            self.background_file = background_file
        if christiani_ids is not None:
            self.christiani_ids = christiani_ids
        if scorm_groups is not None:
            self.scorm_groups = scorm_groups
        if equipment_locations is not None:
            self.equipment_locations = equipment_locations
        if app_tags is not None:
            self.app_tags = app_tags
        if organization_head_file is not None:
            self.organization_head_file = organization_head_file
        if organization_footer_file is not None:
            self.organization_footer_file = organization_footer_file
        if organization_header_file is not None:
            self.organization_header_file = organization_header_file
        if shared_task_sets is not None:
            self.shared_task_sets = shared_task_sets
        if user_invitations is not None:
            self.user_invitations = user_invitations
        if organization_in_group is not None:
            self.organization_in_group = organization_in_group
        if autofachmann_subscription_no is not None:
            self.autofachmann_subscription_no = autofachmann_subscription_no

    @property
    def context(self):
        """Gets the context of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The context of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: OneOfOrganizationJsonldOrganizationItemWriteContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this OrganizationJsonldOrganizationItemWrite.


        :param context: The context of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: OneOfOrganizationJsonldOrganizationItemWriteContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationJsonldOrganizationItemWrite.


        :param id: The id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The type of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationJsonldOrganizationItemWrite.


        :param type: The type of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The name of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationJsonldOrganizationItemWrite.


        :param name: The name of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def streetno(self):
        """Gets the streetno of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The streetno of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._streetno

    @streetno.setter
    def streetno(self, streetno):
        """Sets the streetno of this OrganizationJsonldOrganizationItemWrite.


        :param streetno: The streetno of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """
        if streetno is None:
            raise ValueError("Invalid value for `streetno`, must not be `None`")  # noqa: E501

        self._streetno = streetno

    @property
    def zip(self):
        """Gets the zip of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The zip of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this OrganizationJsonldOrganizationItemWrite.


        :param zip: The zip of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")  # noqa: E501

        self._zip = zip

    @property
    def city(self):
        """Gets the city of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The city of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrganizationJsonldOrganizationItemWrite.


        :param city: The city of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country(self):
        """Gets the country of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The country of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OrganizationJsonldOrganizationItemWrite.


        :param country: The country of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def note(self):
        """Gets the note of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The note of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OrganizationJsonldOrganizationItemWrite.


        :param note: The note of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def task_sets(self):
        """Gets the task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_sets

    @task_sets.setter
    def task_sets(self, task_sets):
        """Sets the task_sets of this OrganizationJsonldOrganizationItemWrite.


        :param task_sets: The task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._task_sets = task_sets

    @property
    def task_step_categories(self):
        """Gets the task_step_categories of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The task_step_categories of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_step_categories

    @task_step_categories.setter
    def task_step_categories(self, task_step_categories):
        """Sets the task_step_categories of this OrganizationJsonldOrganizationItemWrite.


        :param task_step_categories: The task_step_categories of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._task_step_categories = task_step_categories

    @property
    def form_sets(self):
        """Gets the form_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The form_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_sets

    @form_sets.setter
    def form_sets(self, form_sets):
        """Sets the form_sets of this OrganizationJsonldOrganizationItemWrite.


        :param form_sets: The form_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._form_sets = form_sets

    @property
    def groups(self):
        """Gets the groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this OrganizationJsonldOrganizationItemWrite.


        :param groups: The groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def users(self):
        """Gets the users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this OrganizationJsonldOrganizationItemWrite.


        :param users: The users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def privacies(self):
        """Gets the privacies of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The privacies of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._privacies

    @privacies.setter
    def privacies(self, privacies):
        """Sets the privacies of this OrganizationJsonldOrganizationItemWrite.


        :param privacies: The privacies of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._privacies = privacies

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The terms_of_use of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this OrganizationJsonldOrganizationItemWrite.


        :param terms_of_use: The terms_of_use of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._terms_of_use = terms_of_use

    @property
    def logo(self):
        """Gets the logo of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The logo of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrganizationJsonldOrganizationItemWrite.


        :param logo: The logo of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def mls1_id(self):
        """Gets the mls1_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The mls1_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this OrganizationJsonldOrganizationItemWrite.


        :param mls1_id: The mls1_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    @property
    def former_users(self):
        """Gets the former_users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The former_users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._former_users

    @former_users.setter
    def former_users(self, former_users):
        """Sets the former_users of this OrganizationJsonldOrganizationItemWrite.


        :param former_users: The former_users of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._former_users = former_users

    @property
    def blok_id(self):
        """Gets the blok_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The blok_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: int
        """
        return self._blok_id

    @blok_id.setter
    def blok_id(self, blok_id):
        """Sets the blok_id of this OrganizationJsonldOrganizationItemWrite.


        :param blok_id: The blok_id of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: int
        """

        self._blok_id = blok_id

    @property
    def e_cademy_token(self):
        """Gets the e_cademy_token of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The e_cademy_token of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._e_cademy_token

    @e_cademy_token.setter
    def e_cademy_token(self, e_cademy_token):
        """Sets the e_cademy_token of this OrganizationJsonldOrganizationItemWrite.


        :param e_cademy_token: The e_cademy_token of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._e_cademy_token = e_cademy_token

    @property
    def scorms(self):
        """Gets the scorms of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The scorms of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._scorms

    @scorms.setter
    def scorms(self, scorms):
        """Sets the scorms of this OrganizationJsonldOrganizationItemWrite.


        :param scorms: The scorms of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._scorms = scorms

    @property
    def jobs(self):
        """Gets the jobs of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The jobs of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this OrganizationJsonldOrganizationItemWrite.


        :param jobs: The jobs of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._jobs = jobs

    @property
    def equipment(self):
        """Gets the equipment of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The equipment of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this OrganizationJsonldOrganizationItemWrite.


        :param equipment: The equipment of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._equipment = equipment

    @property
    def background_file(self):
        """Gets the background_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The background_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._background_file

    @background_file.setter
    def background_file(self, background_file):
        """Sets the background_file of this OrganizationJsonldOrganizationItemWrite.


        :param background_file: The background_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._background_file = background_file

    @property
    def christiani_ids(self):
        """Gets the christiani_ids of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The christiani_ids of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._christiani_ids

    @christiani_ids.setter
    def christiani_ids(self, christiani_ids):
        """Sets the christiani_ids of this OrganizationJsonldOrganizationItemWrite.


        :param christiani_ids: The christiani_ids of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._christiani_ids = christiani_ids

    @property
    def scorm_groups(self):
        """Gets the scorm_groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The scorm_groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._scorm_groups

    @scorm_groups.setter
    def scorm_groups(self, scorm_groups):
        """Sets the scorm_groups of this OrganizationJsonldOrganizationItemWrite.


        :param scorm_groups: The scorm_groups of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._scorm_groups = scorm_groups

    @property
    def equipment_locations(self):
        """Gets the equipment_locations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The equipment_locations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipment_locations

    @equipment_locations.setter
    def equipment_locations(self, equipment_locations):
        """Sets the equipment_locations of this OrganizationJsonldOrganizationItemWrite.


        :param equipment_locations: The equipment_locations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._equipment_locations = equipment_locations

    @property
    def app_tags(self):
        """Gets the app_tags of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The app_tags of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_tags

    @app_tags.setter
    def app_tags(self, app_tags):
        """Sets the app_tags of this OrganizationJsonldOrganizationItemWrite.


        :param app_tags: The app_tags of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._app_tags = app_tags

    @property
    def organization_head_file(self):
        """Gets the organization_head_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The organization_head_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization_head_file

    @organization_head_file.setter
    def organization_head_file(self, organization_head_file):
        """Sets the organization_head_file of this OrganizationJsonldOrganizationItemWrite.


        :param organization_head_file: The organization_head_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._organization_head_file = organization_head_file

    @property
    def organization_footer_file(self):
        """Gets the organization_footer_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The organization_footer_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization_footer_file

    @organization_footer_file.setter
    def organization_footer_file(self, organization_footer_file):
        """Sets the organization_footer_file of this OrganizationJsonldOrganizationItemWrite.


        :param organization_footer_file: The organization_footer_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._organization_footer_file = organization_footer_file

    @property
    def organization_header_file(self):
        """Gets the organization_header_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The organization_header_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization_header_file

    @organization_header_file.setter
    def organization_header_file(self, organization_header_file):
        """Sets the organization_header_file of this OrganizationJsonldOrganizationItemWrite.


        :param organization_header_file: The organization_header_file of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._organization_header_file = organization_header_file

    @property
    def shared_task_sets(self):
        """Gets the shared_task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The shared_task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_task_sets

    @shared_task_sets.setter
    def shared_task_sets(self, shared_task_sets):
        """Sets the shared_task_sets of this OrganizationJsonldOrganizationItemWrite.


        :param shared_task_sets: The shared_task_sets of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._shared_task_sets = shared_task_sets

    @property
    def user_invitations(self):
        """Gets the user_invitations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The user_invitations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_invitations

    @user_invitations.setter
    def user_invitations(self, user_invitations):
        """Sets the user_invitations of this OrganizationJsonldOrganizationItemWrite.


        :param user_invitations: The user_invitations of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._user_invitations = user_invitations

    @property
    def organization_in_group(self):
        """Gets the organization_in_group of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The organization_in_group of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization_in_group

    @organization_in_group.setter
    def organization_in_group(self, organization_in_group):
        """Sets the organization_in_group of this OrganizationJsonldOrganizationItemWrite.


        :param organization_in_group: The organization_in_group of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._organization_in_group = organization_in_group

    @property
    def autofachmann_subscription_no(self):
        """Gets the autofachmann_subscription_no of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501


        :return: The autofachmann_subscription_no of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._autofachmann_subscription_no

    @autofachmann_subscription_no.setter
    def autofachmann_subscription_no(self, autofachmann_subscription_no):
        """Sets the autofachmann_subscription_no of this OrganizationJsonldOrganizationItemWrite.


        :param autofachmann_subscription_no: The autofachmann_subscription_no of this OrganizationJsonldOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._autofachmann_subscription_no = autofachmann_subscription_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationJsonldOrganizationItemWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationJsonldOrganizationItemWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
