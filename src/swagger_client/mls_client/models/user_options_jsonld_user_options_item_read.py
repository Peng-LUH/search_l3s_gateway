# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserOptionsJsonldUserOptionsItemRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfUserOptionsJsonldUserOptionsItemReadContext',
        'id': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'color_schema': 'str',
        'user': 'str',
        'app_jobs': 'list[str]',
        'infinite_scroll_tip': 'bool',
        'editor_auto_save': 'bool',
        'notifications': 'list[str]',
        'dashboard_widgets': 'list[str]',
        'employed': 'datetime',
        'expected_end': 'datetime',
        'last_used_tags': 'list[str]',
        'ilias_courses': 'list[str]',
        'teams_webhook_url': 'str',
        'has_autofachmann': 'bool'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'color_schema': 'colorSchema',
        'user': 'user',
        'app_jobs': 'appJobs',
        'infinite_scroll_tip': 'infiniteScrollTip',
        'editor_auto_save': 'editorAutoSave',
        'notifications': 'notifications',
        'dashboard_widgets': 'dashboardWidgets',
        'employed': 'employed',
        'expected_end': 'expectedEnd',
        'last_used_tags': 'lastUsedTags',
        'ilias_courses': 'iliasCourses',
        'teams_webhook_url': 'teamsWebhookURL',
        'has_autofachmann': 'hasAutofachmann'
    }

    def __init__(self, context=None, id=None, type=None, created_at=None, updated_at=None, color_schema=None, user=None, app_jobs=None, infinite_scroll_tip=True, editor_auto_save=True, notifications=None, dashboard_widgets=None, employed=None, expected_end=None, last_used_tags=None, ilias_courses=None, teams_webhook_url='nulL', has_autofachmann=None):  # noqa: E501
        """UserOptionsJsonldUserOptionsItemRead - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self._color_schema = None
        self._user = None
        self._app_jobs = None
        self._infinite_scroll_tip = None
        self._editor_auto_save = None
        self._notifications = None
        self._dashboard_widgets = None
        self._employed = None
        self._expected_end = None
        self._last_used_tags = None
        self._ilias_courses = None
        self._teams_webhook_url = None
        self._has_autofachmann = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if color_schema is not None:
            self.color_schema = color_schema
        if user is not None:
            self.user = user
        if app_jobs is not None:
            self.app_jobs = app_jobs
        if infinite_scroll_tip is not None:
            self.infinite_scroll_tip = infinite_scroll_tip
        if editor_auto_save is not None:
            self.editor_auto_save = editor_auto_save
        if notifications is not None:
            self.notifications = notifications
        if dashboard_widgets is not None:
            self.dashboard_widgets = dashboard_widgets
        self.employed = employed
        if expected_end is not None:
            self.expected_end = expected_end
        if last_used_tags is not None:
            self.last_used_tags = last_used_tags
        if ilias_courses is not None:
            self.ilias_courses = ilias_courses
        if teams_webhook_url is not None:
            self.teams_webhook_url = teams_webhook_url
        if has_autofachmann is not None:
            self.has_autofachmann = has_autofachmann

    @property
    def context(self):
        """Gets the context of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The context of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: OneOfUserOptionsJsonldUserOptionsItemReadContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this UserOptionsJsonldUserOptionsItemRead.


        :param context: The context of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: OneOfUserOptionsJsonldUserOptionsItemReadContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The id of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserOptionsJsonldUserOptionsItemRead.


        :param id: The id of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The type of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserOptionsJsonldUserOptionsItemRead.


        :param type: The type of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The created_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserOptionsJsonldUserOptionsItemRead.


        :param created_at: The created_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The updated_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserOptionsJsonldUserOptionsItemRead.


        :param updated_at: The updated_at of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def color_schema(self):
        """Gets the color_schema of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The color_schema of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: str
        """
        return self._color_schema

    @color_schema.setter
    def color_schema(self, color_schema):
        """Sets the color_schema of this UserOptionsJsonldUserOptionsItemRead.


        :param color_schema: The color_schema of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: str
        """

        self._color_schema = color_schema

    @property
    def user(self):
        """Gets the user of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The user of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserOptionsJsonldUserOptionsItemRead.


        :param user: The user of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def app_jobs(self):
        """Gets the app_jobs of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The app_jobs of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_jobs

    @app_jobs.setter
    def app_jobs(self, app_jobs):
        """Sets the app_jobs of this UserOptionsJsonldUserOptionsItemRead.


        :param app_jobs: The app_jobs of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: list[str]
        """

        self._app_jobs = app_jobs

    @property
    def infinite_scroll_tip(self):
        """Gets the infinite_scroll_tip of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The infinite_scroll_tip of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: bool
        """
        return self._infinite_scroll_tip

    @infinite_scroll_tip.setter
    def infinite_scroll_tip(self, infinite_scroll_tip):
        """Sets the infinite_scroll_tip of this UserOptionsJsonldUserOptionsItemRead.


        :param infinite_scroll_tip: The infinite_scroll_tip of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: bool
        """

        self._infinite_scroll_tip = infinite_scroll_tip

    @property
    def editor_auto_save(self):
        """Gets the editor_auto_save of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The editor_auto_save of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: bool
        """
        return self._editor_auto_save

    @editor_auto_save.setter
    def editor_auto_save(self, editor_auto_save):
        """Sets the editor_auto_save of this UserOptionsJsonldUserOptionsItemRead.


        :param editor_auto_save: The editor_auto_save of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: bool
        """

        self._editor_auto_save = editor_auto_save

    @property
    def notifications(self):
        """Gets the notifications of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The notifications of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this UserOptionsJsonldUserOptionsItemRead.


        :param notifications: The notifications of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: list[str]
        """

        self._notifications = notifications

    @property
    def dashboard_widgets(self):
        """Gets the dashboard_widgets of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The dashboard_widgets of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._dashboard_widgets

    @dashboard_widgets.setter
    def dashboard_widgets(self, dashboard_widgets):
        """Sets the dashboard_widgets of this UserOptionsJsonldUserOptionsItemRead.


        :param dashboard_widgets: The dashboard_widgets of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: list[str]
        """

        self._dashboard_widgets = dashboard_widgets

    @property
    def employed(self):
        """Gets the employed of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The employed of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._employed

    @employed.setter
    def employed(self, employed):
        """Sets the employed of this UserOptionsJsonldUserOptionsItemRead.


        :param employed: The employed of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: datetime
        """
        if employed is None:
            raise ValueError("Invalid value for `employed`, must not be `None`")  # noqa: E501

        self._employed = employed

    @property
    def expected_end(self):
        """Gets the expected_end of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The expected_end of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_end

    @expected_end.setter
    def expected_end(self, expected_end):
        """Sets the expected_end of this UserOptionsJsonldUserOptionsItemRead.


        :param expected_end: The expected_end of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: datetime
        """

        self._expected_end = expected_end

    @property
    def last_used_tags(self):
        """Gets the last_used_tags of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The last_used_tags of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._last_used_tags

    @last_used_tags.setter
    def last_used_tags(self, last_used_tags):
        """Sets the last_used_tags of this UserOptionsJsonldUserOptionsItemRead.


        :param last_used_tags: The last_used_tags of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: list[str]
        """

        self._last_used_tags = last_used_tags

    @property
    def ilias_courses(self):
        """Gets the ilias_courses of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The ilias_courses of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._ilias_courses

    @ilias_courses.setter
    def ilias_courses(self, ilias_courses):
        """Sets the ilias_courses of this UserOptionsJsonldUserOptionsItemRead.


        :param ilias_courses: The ilias_courses of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: list[str]
        """

        self._ilias_courses = ilias_courses

    @property
    def teams_webhook_url(self):
        """Gets the teams_webhook_url of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The teams_webhook_url of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: str
        """
        return self._teams_webhook_url

    @teams_webhook_url.setter
    def teams_webhook_url(self, teams_webhook_url):
        """Sets the teams_webhook_url of this UserOptionsJsonldUserOptionsItemRead.


        :param teams_webhook_url: The teams_webhook_url of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: str
        """

        self._teams_webhook_url = teams_webhook_url

    @property
    def has_autofachmann(self):
        """Gets the has_autofachmann of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501


        :return: The has_autofachmann of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :rtype: bool
        """
        return self._has_autofachmann

    @has_autofachmann.setter
    def has_autofachmann(self, has_autofachmann):
        """Sets the has_autofachmann of this UserOptionsJsonldUserOptionsItemRead.


        :param has_autofachmann: The has_autofachmann of this UserOptionsJsonldUserOptionsItemRead.  # noqa: E501
        :type: bool
        """

        self._has_autofachmann = has_autofachmann

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserOptionsJsonldUserOptionsItemRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserOptionsJsonldUserOptionsItemRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
