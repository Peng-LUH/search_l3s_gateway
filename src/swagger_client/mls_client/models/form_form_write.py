# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormFormWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'creator': 'str',
        'last_editor': 'str',
        'archived': 'bool',
        'form_set': 'str',
        'content': 'list[str]',
        'solutions': 'list[str]',
        'will_be_rated': 'bool',
        'is_template': 'bool',
        'has_shuffle_mode': 'bool',
        'amount_of_shuffle_questions': 'int',
        'app_tags': 'list[str]',
        'files': 'list[str]',
        'is_task_inline': 'bool',
        'mls1_id': 'int',
        'mls1_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'creator': 'creator',
        'last_editor': 'lastEditor',
        'archived': 'archived',
        'form_set': 'formSet',
        'content': 'content',
        'solutions': 'solutions',
        'will_be_rated': 'willBeRated',
        'is_template': 'isTemplate',
        'has_shuffle_mode': 'hasShuffleMode',
        'amount_of_shuffle_questions': 'amountOfShuffleQuestions',
        'app_tags': 'appTags',
        'files': 'files',
        'is_task_inline': 'isTaskInline',
        'mls1_id': 'mls1Id',
        'mls1_type': 'mls1Type'
    }

    def __init__(self, id=None, title=None, creator=None, last_editor=None, archived=None, form_set=None, content=None, solutions=None, will_be_rated=None, is_template=None, has_shuffle_mode=None, amount_of_shuffle_questions=None, app_tags=None, files=None, is_task_inline=None, mls1_id=None, mls1_type=None):  # noqa: E501
        """FormFormWrite - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._creator = None
        self._last_editor = None
        self._archived = None
        self._form_set = None
        self._content = None
        self._solutions = None
        self._will_be_rated = None
        self._is_template = None
        self._has_shuffle_mode = None
        self._amount_of_shuffle_questions = None
        self._app_tags = None
        self._files = None
        self._is_task_inline = None
        self._mls1_id = None
        self._mls1_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.title = title
        if creator is not None:
            self.creator = creator
        if last_editor is not None:
            self.last_editor = last_editor
        if archived is not None:
            self.archived = archived
        self.form_set = form_set
        self.content = content
        self.solutions = solutions
        self.will_be_rated = will_be_rated
        self.is_template = is_template
        self.has_shuffle_mode = has_shuffle_mode
        self.amount_of_shuffle_questions = amount_of_shuffle_questions
        if app_tags is not None:
            self.app_tags = app_tags
        if files is not None:
            self.files = files
        self.is_task_inline = is_task_inline
        if mls1_id is not None:
            self.mls1_id = mls1_id
        if mls1_type is not None:
            self.mls1_type = mls1_type

    @property
    def id(self):
        """Gets the id of this FormFormWrite.  # noqa: E501


        :return: The id of this FormFormWrite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormFormWrite.


        :param id: The id of this FormFormWrite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this FormFormWrite.  # noqa: E501


        :return: The title of this FormFormWrite.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FormFormWrite.


        :param title: The title of this FormFormWrite.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def creator(self):
        """Gets the creator of this FormFormWrite.  # noqa: E501


        :return: The creator of this FormFormWrite.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this FormFormWrite.


        :param creator: The creator of this FormFormWrite.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def last_editor(self):
        """Gets the last_editor of this FormFormWrite.  # noqa: E501


        :return: The last_editor of this FormFormWrite.  # noqa: E501
        :rtype: str
        """
        return self._last_editor

    @last_editor.setter
    def last_editor(self, last_editor):
        """Sets the last_editor of this FormFormWrite.


        :param last_editor: The last_editor of this FormFormWrite.  # noqa: E501
        :type: str
        """

        self._last_editor = last_editor

    @property
    def archived(self):
        """Gets the archived of this FormFormWrite.  # noqa: E501


        :return: The archived of this FormFormWrite.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this FormFormWrite.


        :param archived: The archived of this FormFormWrite.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def form_set(self):
        """Gets the form_set of this FormFormWrite.  # noqa: E501


        :return: The form_set of this FormFormWrite.  # noqa: E501
        :rtype: str
        """
        return self._form_set

    @form_set.setter
    def form_set(self, form_set):
        """Sets the form_set of this FormFormWrite.


        :param form_set: The form_set of this FormFormWrite.  # noqa: E501
        :type: str
        """
        if form_set is None:
            raise ValueError("Invalid value for `form_set`, must not be `None`")  # noqa: E501

        self._form_set = form_set

    @property
    def content(self):
        """Gets the content of this FormFormWrite.  # noqa: E501


        :return: The content of this FormFormWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this FormFormWrite.


        :param content: The content of this FormFormWrite.  # noqa: E501
        :type: list[str]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def solutions(self):
        """Gets the solutions of this FormFormWrite.  # noqa: E501


        :return: The solutions of this FormFormWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this FormFormWrite.


        :param solutions: The solutions of this FormFormWrite.  # noqa: E501
        :type: list[str]
        """
        if solutions is None:
            raise ValueError("Invalid value for `solutions`, must not be `None`")  # noqa: E501

        self._solutions = solutions

    @property
    def will_be_rated(self):
        """Gets the will_be_rated of this FormFormWrite.  # noqa: E501


        :return: The will_be_rated of this FormFormWrite.  # noqa: E501
        :rtype: bool
        """
        return self._will_be_rated

    @will_be_rated.setter
    def will_be_rated(self, will_be_rated):
        """Sets the will_be_rated of this FormFormWrite.


        :param will_be_rated: The will_be_rated of this FormFormWrite.  # noqa: E501
        :type: bool
        """
        if will_be_rated is None:
            raise ValueError("Invalid value for `will_be_rated`, must not be `None`")  # noqa: E501

        self._will_be_rated = will_be_rated

    @property
    def is_template(self):
        """Gets the is_template of this FormFormWrite.  # noqa: E501


        :return: The is_template of this FormFormWrite.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this FormFormWrite.


        :param is_template: The is_template of this FormFormWrite.  # noqa: E501
        :type: bool
        """
        if is_template is None:
            raise ValueError("Invalid value for `is_template`, must not be `None`")  # noqa: E501

        self._is_template = is_template

    @property
    def has_shuffle_mode(self):
        """Gets the has_shuffle_mode of this FormFormWrite.  # noqa: E501


        :return: The has_shuffle_mode of this FormFormWrite.  # noqa: E501
        :rtype: bool
        """
        return self._has_shuffle_mode

    @has_shuffle_mode.setter
    def has_shuffle_mode(self, has_shuffle_mode):
        """Sets the has_shuffle_mode of this FormFormWrite.


        :param has_shuffle_mode: The has_shuffle_mode of this FormFormWrite.  # noqa: E501
        :type: bool
        """
        if has_shuffle_mode is None:
            raise ValueError("Invalid value for `has_shuffle_mode`, must not be `None`")  # noqa: E501

        self._has_shuffle_mode = has_shuffle_mode

    @property
    def amount_of_shuffle_questions(self):
        """Gets the amount_of_shuffle_questions of this FormFormWrite.  # noqa: E501


        :return: The amount_of_shuffle_questions of this FormFormWrite.  # noqa: E501
        :rtype: int
        """
        return self._amount_of_shuffle_questions

    @amount_of_shuffle_questions.setter
    def amount_of_shuffle_questions(self, amount_of_shuffle_questions):
        """Sets the amount_of_shuffle_questions of this FormFormWrite.


        :param amount_of_shuffle_questions: The amount_of_shuffle_questions of this FormFormWrite.  # noqa: E501
        :type: int
        """
        if amount_of_shuffle_questions is None:
            raise ValueError("Invalid value for `amount_of_shuffle_questions`, must not be `None`")  # noqa: E501

        self._amount_of_shuffle_questions = amount_of_shuffle_questions

    @property
    def app_tags(self):
        """Gets the app_tags of this FormFormWrite.  # noqa: E501


        :return: The app_tags of this FormFormWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_tags

    @app_tags.setter
    def app_tags(self, app_tags):
        """Sets the app_tags of this FormFormWrite.


        :param app_tags: The app_tags of this FormFormWrite.  # noqa: E501
        :type: list[str]
        """

        self._app_tags = app_tags

    @property
    def files(self):
        """Gets the files of this FormFormWrite.  # noqa: E501


        :return: The files of this FormFormWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FormFormWrite.


        :param files: The files of this FormFormWrite.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def is_task_inline(self):
        """Gets the is_task_inline of this FormFormWrite.  # noqa: E501


        :return: The is_task_inline of this FormFormWrite.  # noqa: E501
        :rtype: bool
        """
        return self._is_task_inline

    @is_task_inline.setter
    def is_task_inline(self, is_task_inline):
        """Sets the is_task_inline of this FormFormWrite.


        :param is_task_inline: The is_task_inline of this FormFormWrite.  # noqa: E501
        :type: bool
        """
        if is_task_inline is None:
            raise ValueError("Invalid value for `is_task_inline`, must not be `None`")  # noqa: E501

        self._is_task_inline = is_task_inline

    @property
    def mls1_id(self):
        """Gets the mls1_id of this FormFormWrite.  # noqa: E501


        :return: The mls1_id of this FormFormWrite.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this FormFormWrite.


        :param mls1_id: The mls1_id of this FormFormWrite.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    @property
    def mls1_type(self):
        """Gets the mls1_type of this FormFormWrite.  # noqa: E501


        :return: The mls1_type of this FormFormWrite.  # noqa: E501
        :rtype: str
        """
        return self._mls1_type

    @mls1_type.setter
    def mls1_type(self, mls1_type):
        """Sets the mls1_type of this FormFormWrite.


        :param mls1_type: The mls1_type of this FormFormWrite.  # noqa: E501
        :type: str
        """

        self._mls1_type = mls1_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormFormWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormFormWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
