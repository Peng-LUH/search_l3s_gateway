# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScormScoScormScoRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'scorm': 'str',
        'organization': 'str',
        'position': 'int',
        'parent': 'AnyOfScormScoScormScoReadParent',
        'children': 'list[ScormScoScormScoRead]',
        'identifier': 'str',
        'launch': 'str',
        'scorm_type': 'str',
        'title': 'str',
        'data': 'list[ScormScoesDataScormScoRead]',
        'seq_ruleconds': 'list[ScormSeqRulecondsScormScoRead]',
        'seq_rollup_rules': 'list[ScormSeqRollupRuleScormScoRead]',
        'seq_objectives': 'list[ScormSeqObjectiveScormScoRead]'
    }

    attribute_map = {
        'id': 'id',
        'scorm': 'scorm',
        'organization': 'organization',
        'position': 'position',
        'parent': 'parent',
        'children': 'children',
        'identifier': 'identifier',
        'launch': 'launch',
        'scorm_type': 'scormType',
        'title': 'title',
        'data': 'data',
        'seq_ruleconds': 'seqRuleconds',
        'seq_rollup_rules': 'seqRollupRules',
        'seq_objectives': 'seqObjectives'
    }

    def __init__(self, id=None, scorm=None, organization=None, position=None, parent=None, children=None, identifier=None, launch=None, scorm_type=None, title=None, data=None, seq_ruleconds=None, seq_rollup_rules=None, seq_objectives=None):  # noqa: E501
        """ScormScoScormScoRead - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._scorm = None
        self._organization = None
        self._position = None
        self._parent = None
        self._children = None
        self._identifier = None
        self._launch = None
        self._scorm_type = None
        self._title = None
        self._data = None
        self._seq_ruleconds = None
        self._seq_rollup_rules = None
        self._seq_objectives = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if scorm is not None:
            self.scorm = scorm
        if organization is not None:
            self.organization = organization
        if position is not None:
            self.position = position
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if identifier is not None:
            self.identifier = identifier
        if launch is not None:
            self.launch = launch
        if scorm_type is not None:
            self.scorm_type = scorm_type
        if title is not None:
            self.title = title
        if data is not None:
            self.data = data
        if seq_ruleconds is not None:
            self.seq_ruleconds = seq_ruleconds
        if seq_rollup_rules is not None:
            self.seq_rollup_rules = seq_rollup_rules
        if seq_objectives is not None:
            self.seq_objectives = seq_objectives

    @property
    def id(self):
        """Gets the id of this ScormScoScormScoRead.  # noqa: E501


        :return: The id of this ScormScoScormScoRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScormScoScormScoRead.


        :param id: The id of this ScormScoScormScoRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def scorm(self):
        """Gets the scorm of this ScormScoScormScoRead.  # noqa: E501


        :return: The scorm of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._scorm

    @scorm.setter
    def scorm(self, scorm):
        """Sets the scorm of this ScormScoScormScoRead.


        :param scorm: The scorm of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._scorm = scorm

    @property
    def organization(self):
        """Gets the organization of this ScormScoScormScoRead.  # noqa: E501


        :return: The organization of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ScormScoScormScoRead.


        :param organization: The organization of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def position(self):
        """Gets the position of this ScormScoScormScoRead.  # noqa: E501


        :return: The position of this ScormScoScormScoRead.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ScormScoScormScoRead.


        :param position: The position of this ScormScoScormScoRead.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def parent(self):
        """Gets the parent of this ScormScoScormScoRead.  # noqa: E501


        :return: The parent of this ScormScoScormScoRead.  # noqa: E501
        :rtype: AnyOfScormScoScormScoReadParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ScormScoScormScoRead.


        :param parent: The parent of this ScormScoScormScoRead.  # noqa: E501
        :type: AnyOfScormScoScormScoReadParent
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this ScormScoScormScoRead.  # noqa: E501


        :return: The children of this ScormScoScormScoRead.  # noqa: E501
        :rtype: list[ScormScoScormScoRead]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ScormScoScormScoRead.


        :param children: The children of this ScormScoScormScoRead.  # noqa: E501
        :type: list[ScormScoScormScoRead]
        """

        self._children = children

    @property
    def identifier(self):
        """Gets the identifier of this ScormScoScormScoRead.  # noqa: E501


        :return: The identifier of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ScormScoScormScoRead.


        :param identifier: The identifier of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def launch(self):
        """Gets the launch of this ScormScoScormScoRead.  # noqa: E501


        :return: The launch of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._launch

    @launch.setter
    def launch(self, launch):
        """Sets the launch of this ScormScoScormScoRead.


        :param launch: The launch of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._launch = launch

    @property
    def scorm_type(self):
        """Gets the scorm_type of this ScormScoScormScoRead.  # noqa: E501


        :return: The scorm_type of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._scorm_type

    @scorm_type.setter
    def scorm_type(self, scorm_type):
        """Sets the scorm_type of this ScormScoScormScoRead.


        :param scorm_type: The scorm_type of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._scorm_type = scorm_type

    @property
    def title(self):
        """Gets the title of this ScormScoScormScoRead.  # noqa: E501


        :return: The title of this ScormScoScormScoRead.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScormScoScormScoRead.


        :param title: The title of this ScormScoScormScoRead.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def data(self):
        """Gets the data of this ScormScoScormScoRead.  # noqa: E501


        :return: The data of this ScormScoScormScoRead.  # noqa: E501
        :rtype: list[ScormScoesDataScormScoRead]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ScormScoScormScoRead.


        :param data: The data of this ScormScoScormScoRead.  # noqa: E501
        :type: list[ScormScoesDataScormScoRead]
        """

        self._data = data

    @property
    def seq_ruleconds(self):
        """Gets the seq_ruleconds of this ScormScoScormScoRead.  # noqa: E501


        :return: The seq_ruleconds of this ScormScoScormScoRead.  # noqa: E501
        :rtype: list[ScormSeqRulecondsScormScoRead]
        """
        return self._seq_ruleconds

    @seq_ruleconds.setter
    def seq_ruleconds(self, seq_ruleconds):
        """Sets the seq_ruleconds of this ScormScoScormScoRead.


        :param seq_ruleconds: The seq_ruleconds of this ScormScoScormScoRead.  # noqa: E501
        :type: list[ScormSeqRulecondsScormScoRead]
        """

        self._seq_ruleconds = seq_ruleconds

    @property
    def seq_rollup_rules(self):
        """Gets the seq_rollup_rules of this ScormScoScormScoRead.  # noqa: E501


        :return: The seq_rollup_rules of this ScormScoScormScoRead.  # noqa: E501
        :rtype: list[ScormSeqRollupRuleScormScoRead]
        """
        return self._seq_rollup_rules

    @seq_rollup_rules.setter
    def seq_rollup_rules(self, seq_rollup_rules):
        """Sets the seq_rollup_rules of this ScormScoScormScoRead.


        :param seq_rollup_rules: The seq_rollup_rules of this ScormScoScormScoRead.  # noqa: E501
        :type: list[ScormSeqRollupRuleScormScoRead]
        """

        self._seq_rollup_rules = seq_rollup_rules

    @property
    def seq_objectives(self):
        """Gets the seq_objectives of this ScormScoScormScoRead.  # noqa: E501


        :return: The seq_objectives of this ScormScoScormScoRead.  # noqa: E501
        :rtype: list[ScormSeqObjectiveScormScoRead]
        """
        return self._seq_objectives

    @seq_objectives.setter
    def seq_objectives(self, seq_objectives):
        """Sets the seq_objectives of this ScormScoScormScoRead.


        :param seq_objectives: The seq_objectives of this ScormScoScormScoRead.  # noqa: E501
        :type: list[ScormSeqObjectiveScormScoRead]
        """

        self._seq_objectives = seq_objectives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScormScoScormScoRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScormScoScormScoRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
