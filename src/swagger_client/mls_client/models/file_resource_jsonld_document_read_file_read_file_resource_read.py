# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileResourceJsonldDocumentReadFileReadFileResourceRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfFileResourceJsonldDocumentReadFileReadFileResourceReadContext',
        'id': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'filename': 'str',
        'original_filename': 'str',
        'mime_type': 'str',
        'size': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'filename': 'filename',
        'original_filename': 'originalFilename',
        'mime_type': 'mimeType',
        'size': 'size'
    }

    def __init__(self, context=None, id=None, type=None, created_at=None, updated_at=None, id=None, filename=None, original_filename=None, mime_type=None, size=None):  # noqa: E501
        """FileResourceJsonldDocumentReadFileReadFileResourceRead - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._filename = None
        self._original_filename = None
        self._mime_type = None
        self._size = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        if filename is not None:
            self.filename = filename
        if original_filename is not None:
            self.original_filename = original_filename
        if mime_type is not None:
            self.mime_type = mime_type
        if size is not None:
            self.size = size

    @property
    def context(self):
        """Gets the context of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The context of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: OneOfFileResourceJsonldDocumentReadFileReadFileResourceReadContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param context: The context of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: OneOfFileResourceJsonldDocumentReadFileReadFileResourceReadContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param id: The id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param type: The type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The created_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param created_at: The created_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The updated_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param updated_at: The updated_at of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param id: The id of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param filename: The filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def original_filename(self):
        """Gets the original_filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The original_filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param original_filename: The original_filename of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    @property
    def mime_type(self):
        """Gets the mime_type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The mime_type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param mime_type: The mime_type of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def size(self):
        """Gets the size of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501


        :return: The size of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileResourceJsonldDocumentReadFileReadFileResourceRead.


        :param size: The size of this FileResourceJsonldDocumentReadFileReadFileResourceRead.  # noqa: E501
        :type: str
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileResourceJsonldDocumentReadFileReadFileResourceRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileResourceJsonldDocumentReadFileReadFileResourceRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
