# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationSettingsJsonldOrganizationSettingsRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'organization': 'str',
        'organization_relation': 'list[str]',
        'taskeditor': 'bool',
        'trainee_stop_task': 'bool',
        'trainee_documents': 'bool',
        'trainee_documents_readonly': 'bool',
        'organizations_in_group': 'list[str]'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'organization': 'organization',
        'organization_relation': 'organizationRelation',
        'taskeditor': 'taskeditor',
        'trainee_stop_task': 'traineeStopTask',
        'trainee_documents': 'traineeDocuments',
        'trainee_documents_readonly': 'traineeDocumentsReadonly',
        'organizations_in_group': 'organizationsInGroup'
    }

    def __init__(self, id=None, type=None, created_at=None, updated_at=None, id=None, organization=None, organization_relation=None, taskeditor=True, trainee_stop_task=None, trainee_documents=None, trainee_documents_readonly=None, organizations_in_group=None):  # noqa: E501
        """OrganizationSettingsJsonldOrganizationSettingsRead - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._organization = None
        self._organization_relation = None
        self._taskeditor = None
        self._trainee_stop_task = None
        self._trainee_documents = None
        self._trainee_documents_readonly = None
        self._organizations_in_group = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        self.organization = organization
        if organization_relation is not None:
            self.organization_relation = organization_relation
        if taskeditor is not None:
            self.taskeditor = taskeditor
        if trainee_stop_task is not None:
            self.trainee_stop_task = trainee_stop_task
        if trainee_documents is not None:
            self.trainee_documents = trainee_documents
        if trainee_documents_readonly is not None:
            self.trainee_documents_readonly = trainee_documents_readonly
        if organizations_in_group is not None:
            self.organizations_in_group = organizations_in_group

    @property
    def id(self):
        """Gets the id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param id: The id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The type of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param type: The type of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The created_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param created_at: The created_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The updated_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param updated_at: The updated_at of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param id: The id of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organization(self):
        """Gets the organization of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The organization of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param organization: The organization of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def organization_relation(self):
        """Gets the organization_relation of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The organization_relation of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_relation

    @organization_relation.setter
    def organization_relation(self, organization_relation):
        """Sets the organization_relation of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param organization_relation: The organization_relation of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: list[str]
        """

        self._organization_relation = organization_relation

    @property
    def taskeditor(self):
        """Gets the taskeditor of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The taskeditor of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: bool
        """
        return self._taskeditor

    @taskeditor.setter
    def taskeditor(self, taskeditor):
        """Sets the taskeditor of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param taskeditor: The taskeditor of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: bool
        """

        self._taskeditor = taskeditor

    @property
    def trainee_stop_task(self):
        """Gets the trainee_stop_task of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The trainee_stop_task of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_stop_task

    @trainee_stop_task.setter
    def trainee_stop_task(self, trainee_stop_task):
        """Sets the trainee_stop_task of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param trainee_stop_task: The trainee_stop_task of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: bool
        """

        self._trainee_stop_task = trainee_stop_task

    @property
    def trainee_documents(self):
        """Gets the trainee_documents of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The trainee_documents of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_documents

    @trainee_documents.setter
    def trainee_documents(self, trainee_documents):
        """Sets the trainee_documents of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param trainee_documents: The trainee_documents of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: bool
        """

        self._trainee_documents = trainee_documents

    @property
    def trainee_documents_readonly(self):
        """Gets the trainee_documents_readonly of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The trainee_documents_readonly of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: bool
        """
        return self._trainee_documents_readonly

    @trainee_documents_readonly.setter
    def trainee_documents_readonly(self, trainee_documents_readonly):
        """Sets the trainee_documents_readonly of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param trainee_documents_readonly: The trainee_documents_readonly of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: bool
        """

        self._trainee_documents_readonly = trainee_documents_readonly

    @property
    def organizations_in_group(self):
        """Gets the organizations_in_group of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501


        :return: The organizations_in_group of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations_in_group

    @organizations_in_group.setter
    def organizations_in_group(self, organizations_in_group):
        """Sets the organizations_in_group of this OrganizationSettingsJsonldOrganizationSettingsRead.


        :param organizations_in_group: The organizations_in_group of this OrganizationSettingsJsonldOrganizationSettingsRead.  # noqa: E501
        :type: list[str]
        """

        self._organizations_in_group = organizations_in_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationSettingsJsonldOrganizationSettingsRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationSettingsJsonldOrganizationSettingsRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
