# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectProjectsItemWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'organization': 'str',
        'creator': 'str',
        'description': 'str',
        'type': 'str',
        'archived': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'organization': 'organization',
        'creator': 'creator',
        'description': 'description',
        'type': 'type',
        'archived': 'archived'
    }

    def __init__(self, id=None, title=None, organization=None, creator=None, description=None, type=None, archived=None):  # noqa: E501
        """ProjectProjectsItemWrite - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._organization = None
        self._creator = None
        self._description = None
        self._type = None
        self._archived = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if organization is not None:
            self.organization = organization
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if archived is not None:
            self.archived = archived

    @property
    def id(self):
        """Gets the id of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The id of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectProjectsItemWrite.


        :param id: The id of this ProjectProjectsItemWrite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The title of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectProjectsItemWrite.


        :param title: The title of this ProjectProjectsItemWrite.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def organization(self):
        """Gets the organization of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The organization of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ProjectProjectsItemWrite.


        :param organization: The organization of this ProjectProjectsItemWrite.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def creator(self):
        """Gets the creator of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The creator of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ProjectProjectsItemWrite.


        :param creator: The creator of this ProjectProjectsItemWrite.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The description of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectProjectsItemWrite.


        :param description: The description of this ProjectProjectsItemWrite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The type of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectProjectsItemWrite.


        :param type: The type of this ProjectProjectsItemWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def archived(self):
        """Gets the archived of this ProjectProjectsItemWrite.  # noqa: E501


        :return: The archived of this ProjectProjectsItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProjectProjectsItemWrite.


        :param archived: The archived of this ProjectProjectsItemWrite.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectProjectsItemWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectProjectsItemWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
