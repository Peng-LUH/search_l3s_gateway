# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskTodoJsonldTaskTodoWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfTaskTodoJsonldTaskTodoWriteContext',
        'id': 'str',
        'type': 'str',
        'task': 'str',
        'task_todo_info': 'AnyOfTaskTodoJsonldTaskTodoWriteTaskTodoInfo',
        'shuffle_questions': 'list[str]',
        'form_answers': 'list[str]',
        'scorm_answers': 'list[str]',
        'assigner': 'str',
        'user': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'note': 'str',
        'instructors_to_notify': 'list[str]',
        'used_helping_topics': 'list[str]',
        'equipments': 'list[str]',
        'mls1_id': 'int',
        'notice': 'str',
        'organization': 'str',
        'equipment_maintenance': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'task': 'task',
        'task_todo_info': 'taskTodoInfo',
        'shuffle_questions': 'shuffleQuestions',
        'form_answers': 'formAnswers',
        'scorm_answers': 'scormAnswers',
        'assigner': 'assigner',
        'user': 'user',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'note': 'note',
        'instructors_to_notify': 'instructorsToNotify',
        'used_helping_topics': 'usedHelpingTopics',
        'equipments': 'equipments',
        'mls1_id': 'mls1Id',
        'notice': 'notice',
        'organization': 'organization',
        'equipment_maintenance': 'equipmentMaintenance'
    }

    def __init__(self, context=None, id=None, type=None, task=None, task_todo_info=None, shuffle_questions=None, form_answers=None, scorm_answers=None, assigner=None, user=None, start_time=None, end_time=None, note=None, instructors_to_notify=None, used_helping_topics=None, equipments=None, mls1_id=None, notice=None, organization=None, equipment_maintenance=None):  # noqa: E501
        """TaskTodoJsonldTaskTodoWrite - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._task = None
        self._task_todo_info = None
        self._shuffle_questions = None
        self._form_answers = None
        self._scorm_answers = None
        self._assigner = None
        self._user = None
        self._start_time = None
        self._end_time = None
        self._note = None
        self._instructors_to_notify = None
        self._used_helping_topics = None
        self._equipments = None
        self._mls1_id = None
        self._notice = None
        self._organization = None
        self._equipment_maintenance = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        self.task = task
        if task_todo_info is not None:
            self.task_todo_info = task_todo_info
        if shuffle_questions is not None:
            self.shuffle_questions = shuffle_questions
        if form_answers is not None:
            self.form_answers = form_answers
        if scorm_answers is not None:
            self.scorm_answers = scorm_answers
        if assigner is not None:
            self.assigner = assigner
        self.user = user
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if note is not None:
            self.note = note
        if instructors_to_notify is not None:
            self.instructors_to_notify = instructors_to_notify
        if used_helping_topics is not None:
            self.used_helping_topics = used_helping_topics
        if equipments is not None:
            self.equipments = equipments
        if mls1_id is not None:
            self.mls1_id = mls1_id
        if notice is not None:
            self.notice = notice
        if organization is not None:
            self.organization = organization
        if equipment_maintenance is not None:
            self.equipment_maintenance = equipment_maintenance

    @property
    def context(self):
        """Gets the context of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The context of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: OneOfTaskTodoJsonldTaskTodoWriteContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TaskTodoJsonldTaskTodoWrite.


        :param context: The context of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: OneOfTaskTodoJsonldTaskTodoWriteContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTodoJsonldTaskTodoWrite.


        :param id: The id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The type of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskTodoJsonldTaskTodoWrite.


        :param type: The type of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def task(self):
        """Gets the task of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The task of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskTodoJsonldTaskTodoWrite.


        :param task: The task of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def task_todo_info(self):
        """Gets the task_todo_info of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The task_todo_info of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: AnyOfTaskTodoJsonldTaskTodoWriteTaskTodoInfo
        """
        return self._task_todo_info

    @task_todo_info.setter
    def task_todo_info(self, task_todo_info):
        """Sets the task_todo_info of this TaskTodoJsonldTaskTodoWrite.


        :param task_todo_info: The task_todo_info of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: AnyOfTaskTodoJsonldTaskTodoWriteTaskTodoInfo
        """

        self._task_todo_info = task_todo_info

    @property
    def shuffle_questions(self):
        """Gets the shuffle_questions of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The shuffle_questions of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._shuffle_questions

    @shuffle_questions.setter
    def shuffle_questions(self, shuffle_questions):
        """Sets the shuffle_questions of this TaskTodoJsonldTaskTodoWrite.


        :param shuffle_questions: The shuffle_questions of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._shuffle_questions = shuffle_questions

    @property
    def form_answers(self):
        """Gets the form_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The form_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_answers

    @form_answers.setter
    def form_answers(self, form_answers):
        """Sets the form_answers of this TaskTodoJsonldTaskTodoWrite.


        :param form_answers: The form_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._form_answers = form_answers

    @property
    def scorm_answers(self):
        """Gets the scorm_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The scorm_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._scorm_answers

    @scorm_answers.setter
    def scorm_answers(self, scorm_answers):
        """Sets the scorm_answers of this TaskTodoJsonldTaskTodoWrite.


        :param scorm_answers: The scorm_answers of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._scorm_answers = scorm_answers

    @property
    def assigner(self):
        """Gets the assigner of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The assigner of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this TaskTodoJsonldTaskTodoWrite.


        :param assigner: The assigner of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._assigner = assigner

    @property
    def user(self):
        """Gets the user of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The user of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TaskTodoJsonldTaskTodoWrite.


        :param user: The user of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def start_time(self):
        """Gets the start_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The start_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskTodoJsonldTaskTodoWrite.


        :param start_time: The start_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The end_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskTodoJsonldTaskTodoWrite.


        :param end_time: The end_time of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def note(self):
        """Gets the note of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The note of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TaskTodoJsonldTaskTodoWrite.


        :param note: The note of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def instructors_to_notify(self):
        """Gets the instructors_to_notify of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The instructors_to_notify of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._instructors_to_notify

    @instructors_to_notify.setter
    def instructors_to_notify(self, instructors_to_notify):
        """Sets the instructors_to_notify of this TaskTodoJsonldTaskTodoWrite.


        :param instructors_to_notify: The instructors_to_notify of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._instructors_to_notify = instructors_to_notify

    @property
    def used_helping_topics(self):
        """Gets the used_helping_topics of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The used_helping_topics of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._used_helping_topics

    @used_helping_topics.setter
    def used_helping_topics(self, used_helping_topics):
        """Sets the used_helping_topics of this TaskTodoJsonldTaskTodoWrite.


        :param used_helping_topics: The used_helping_topics of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._used_helping_topics = used_helping_topics

    @property
    def equipments(self):
        """Gets the equipments of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The equipments of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """Sets the equipments of this TaskTodoJsonldTaskTodoWrite.


        :param equipments: The equipments of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: list[str]
        """

        self._equipments = equipments

    @property
    def mls1_id(self):
        """Gets the mls1_id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The mls1_id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this TaskTodoJsonldTaskTodoWrite.


        :param mls1_id: The mls1_id of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    @property
    def notice(self):
        """Gets the notice of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The notice of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this TaskTodoJsonldTaskTodoWrite.


        :param notice: The notice of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._notice = notice

    @property
    def organization(self):
        """Gets the organization of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The organization of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TaskTodoJsonldTaskTodoWrite.


        :param organization: The organization of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def equipment_maintenance(self):
        """Gets the equipment_maintenance of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501


        :return: The equipment_maintenance of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :rtype: str
        """
        return self._equipment_maintenance

    @equipment_maintenance.setter
    def equipment_maintenance(self, equipment_maintenance):
        """Sets the equipment_maintenance of this TaskTodoJsonldTaskTodoWrite.


        :param equipment_maintenance: The equipment_maintenance of this TaskTodoJsonldTaskTodoWrite.  # noqa: E501
        :type: str
        """

        self._equipment_maintenance = equipment_maintenance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTodoJsonldTaskTodoWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTodoJsonldTaskTodoWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
