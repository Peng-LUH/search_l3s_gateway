# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskTodoInfoTaskTodoRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_at': 'datetime',
        'status': 'str',
        'steps_processed': 'int',
        'locking_steps_processed': 'int',
        'max_steps_processed': 'int',
        'lock_after_step': 'list[str]',
        'working_time_intervals': 'list[str]',
        'due_time': 'int'
    }

    attribute_map = {
        'updated_at': 'updatedAt',
        'status': 'status',
        'steps_processed': 'stepsProcessed',
        'locking_steps_processed': 'lockingStepsProcessed',
        'max_steps_processed': 'maxStepsProcessed',
        'lock_after_step': 'lockAfterStep',
        'working_time_intervals': 'workingTimeIntervals',
        'due_time': 'dueTime'
    }

    def __init__(self, updated_at=None, status=None, steps_processed=None, locking_steps_processed=None, max_steps_processed=None, lock_after_step=None, working_time_intervals=None, due_time=None):  # noqa: E501
        """TaskTodoInfoTaskTodoRead - a model defined in Swagger"""  # noqa: E501
        self._updated_at = None
        self._status = None
        self._steps_processed = None
        self._locking_steps_processed = None
        self._max_steps_processed = None
        self._lock_after_step = None
        self._working_time_intervals = None
        self._due_time = None
        self.discriminator = None
        if updated_at is not None:
            self.updated_at = updated_at
        self.status = status
        if steps_processed is not None:
            self.steps_processed = steps_processed
        if locking_steps_processed is not None:
            self.locking_steps_processed = locking_steps_processed
        if max_steps_processed is not None:
            self.max_steps_processed = max_steps_processed
        if lock_after_step is not None:
            self.lock_after_step = lock_after_step
        if working_time_intervals is not None:
            self.working_time_intervals = working_time_intervals
        if due_time is not None:
            self.due_time = due_time

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The updated_at of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskTodoInfoTaskTodoRead.


        :param updated_at: The updated_at of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def status(self):
        """Gets the status of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The status of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskTodoInfoTaskTodoRead.


        :param status: The status of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def steps_processed(self):
        """Gets the steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: int
        """
        return self._steps_processed

    @steps_processed.setter
    def steps_processed(self, steps_processed):
        """Sets the steps_processed of this TaskTodoInfoTaskTodoRead.


        :param steps_processed: The steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: int
        """

        self._steps_processed = steps_processed

    @property
    def locking_steps_processed(self):
        """Gets the locking_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The locking_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: int
        """
        return self._locking_steps_processed

    @locking_steps_processed.setter
    def locking_steps_processed(self, locking_steps_processed):
        """Sets the locking_steps_processed of this TaskTodoInfoTaskTodoRead.


        :param locking_steps_processed: The locking_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: int
        """

        self._locking_steps_processed = locking_steps_processed

    @property
    def max_steps_processed(self):
        """Gets the max_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The max_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: int
        """
        return self._max_steps_processed

    @max_steps_processed.setter
    def max_steps_processed(self, max_steps_processed):
        """Sets the max_steps_processed of this TaskTodoInfoTaskTodoRead.


        :param max_steps_processed: The max_steps_processed of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: int
        """

        self._max_steps_processed = max_steps_processed

    @property
    def lock_after_step(self):
        """Gets the lock_after_step of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The lock_after_step of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._lock_after_step

    @lock_after_step.setter
    def lock_after_step(self, lock_after_step):
        """Sets the lock_after_step of this TaskTodoInfoTaskTodoRead.


        :param lock_after_step: The lock_after_step of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: list[str]
        """

        self._lock_after_step = lock_after_step

    @property
    def working_time_intervals(self):
        """Gets the working_time_intervals of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The working_time_intervals of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._working_time_intervals

    @working_time_intervals.setter
    def working_time_intervals(self, working_time_intervals):
        """Sets the working_time_intervals of this TaskTodoInfoTaskTodoRead.


        :param working_time_intervals: The working_time_intervals of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: list[str]
        """

        self._working_time_intervals = working_time_intervals

    @property
    def due_time(self):
        """Gets the due_time of this TaskTodoInfoTaskTodoRead.  # noqa: E501


        :return: The due_time of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :rtype: int
        """
        return self._due_time

    @due_time.setter
    def due_time(self, due_time):
        """Sets the due_time of this TaskTodoInfoTaskTodoRead.


        :param due_time: The due_time of this TaskTodoInfoTaskTodoRead.  # noqa: E501
        :type: int
        """

        self._due_time = due_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTodoInfoTaskTodoRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTodoInfoTaskTodoRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
