# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplierHeaderFileJsonld(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfSupplierHeaderFileJsonldContext',
        'id': 'str',
        'type': 'str',
        'supplier': 'str',
        'url': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'custom_filename': 'str',
        'file_resource': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'supplier': 'supplier',
        'url': 'url',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'custom_filename': 'customFilename',
        'file_resource': 'fileResource'
    }

    def __init__(self, context=None, id=None, type=None, supplier=None, url=None, created_at=None, updated_at=None, id=None, custom_filename=None, file_resource=None):  # noqa: E501
        """SupplierHeaderFileJsonld - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._supplier = None
        self._url = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._custom_filename = None
        self._file_resource = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if supplier is not None:
            self.supplier = supplier
        if url is not None:
            self.url = url
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        if custom_filename is not None:
            self.custom_filename = custom_filename
        if file_resource is not None:
            self.file_resource = file_resource

    @property
    def context(self):
        """Gets the context of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The context of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: OneOfSupplierHeaderFileJsonldContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SupplierHeaderFileJsonld.


        :param context: The context of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: OneOfSupplierHeaderFileJsonldContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The id of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplierHeaderFileJsonld.


        :param id: The id of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The type of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupplierHeaderFileJsonld.


        :param type: The type of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def supplier(self):
        """Gets the supplier of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The supplier of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this SupplierHeaderFileJsonld.


        :param supplier: The supplier of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def url(self):
        """Gets the url of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The url of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SupplierHeaderFileJsonld.


        :param url: The url of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def created_at(self):
        """Gets the created_at of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The created_at of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SupplierHeaderFileJsonld.


        :param created_at: The created_at of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The updated_at of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SupplierHeaderFileJsonld.


        :param updated_at: The updated_at of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The id of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplierHeaderFileJsonld.


        :param id: The id of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def custom_filename(self):
        """Gets the custom_filename of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The custom_filename of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._custom_filename

    @custom_filename.setter
    def custom_filename(self, custom_filename):
        """Sets the custom_filename of this SupplierHeaderFileJsonld.


        :param custom_filename: The custom_filename of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._custom_filename = custom_filename

    @property
    def file_resource(self):
        """Gets the file_resource of this SupplierHeaderFileJsonld.  # noqa: E501


        :return: The file_resource of this SupplierHeaderFileJsonld.  # noqa: E501
        :rtype: str
        """
        return self._file_resource

    @file_resource.setter
    def file_resource(self, file_resource):
        """Sets the file_resource of this SupplierHeaderFileJsonld.


        :param file_resource: The file_resource of this SupplierHeaderFileJsonld.  # noqa: E501
        :type: str
        """

        self._file_resource = file_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierHeaderFileJsonld, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierHeaderFileJsonld):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
