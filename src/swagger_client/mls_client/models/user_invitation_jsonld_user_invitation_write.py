# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserInvitationJsonldUserInvitationWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfUserInvitationJsonldUserInvitationWriteContext',
        'id': 'str',
        'type': 'str',
        'email': 'str',
        'role': 'str',
        'organization': 'str',
        'groups': 'list[str]'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'email': 'email',
        'role': 'role',
        'organization': 'organization',
        'groups': 'groups'
    }

    def __init__(self, context=None, id=None, type=None, email=None, role=None, organization=None, groups=None):  # noqa: E501
        """UserInvitationJsonldUserInvitationWrite - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._email = None
        self._role = None
        self._organization = None
        self._groups = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        self.email = email
        self.role = role
        self.organization = organization
        if groups is not None:
            self.groups = groups

    @property
    def context(self):
        """Gets the context of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The context of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: OneOfUserInvitationJsonldUserInvitationWriteContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this UserInvitationJsonldUserInvitationWrite.


        :param context: The context of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: OneOfUserInvitationJsonldUserInvitationWriteContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The id of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInvitationJsonldUserInvitationWrite.


        :param id: The id of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The type of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserInvitationJsonldUserInvitationWrite.


        :param type: The type of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def email(self):
        """Gets the email of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The email of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInvitationJsonldUserInvitationWrite.


        :param email: The email of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The role of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserInvitationJsonldUserInvitationWrite.


        :param role: The role of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def organization(self):
        """Gets the organization of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The organization of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserInvitationJsonldUserInvitationWrite.


        :param organization: The organization of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def groups(self):
        """Gets the groups of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501


        :return: The groups of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserInvitationJsonldUserInvitationWrite.


        :param groups: The groups of this UserInvitationJsonldUserInvitationWrite.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInvitationJsonldUserInvitationWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInvitationJsonldUserInvitationWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
