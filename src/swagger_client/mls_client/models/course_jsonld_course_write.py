# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseJsonldCourseWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfCourseJsonldCourseWriteContext',
        'id': 'str',
        'type': 'str',
        'title': 'str',
        'description': 'str',
        'learning_goal': 'str',
        'learning_stages': 'list[str]',
        'target_audience': 'str',
        'organization': 'str',
        'lifecycle': 'str',
        'prerequisites': 'list[str]'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'title': 'title',
        'description': 'description',
        'learning_goal': 'learningGoal',
        'learning_stages': 'learningStages',
        'target_audience': 'targetAudience',
        'organization': 'organization',
        'lifecycle': 'lifecycle',
        'prerequisites': 'prerequisites'
    }

    def __init__(self, context=None, id=None, type=None, title=None, description=None, learning_goal=None, learning_stages=None, target_audience=None, organization=None, lifecycle=None, prerequisites=None):  # noqa: E501
        """CourseJsonldCourseWrite - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._title = None
        self._description = None
        self._learning_goal = None
        self._learning_stages = None
        self._target_audience = None
        self._organization = None
        self._lifecycle = None
        self._prerequisites = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if learning_goal is not None:
            self.learning_goal = learning_goal
        if learning_stages is not None:
            self.learning_stages = learning_stages
        if target_audience is not None:
            self.target_audience = target_audience
        if organization is not None:
            self.organization = organization
        if lifecycle is not None:
            self.lifecycle = lifecycle
        if prerequisites is not None:
            self.prerequisites = prerequisites

    @property
    def context(self):
        """Gets the context of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The context of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: OneOfCourseJsonldCourseWriteContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CourseJsonldCourseWrite.


        :param context: The context of this CourseJsonldCourseWrite.  # noqa: E501
        :type: OneOfCourseJsonldCourseWriteContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The id of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CourseJsonldCourseWrite.


        :param id: The id of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The type of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CourseJsonldCourseWrite.


        :param type: The type of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """Gets the title of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The title of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CourseJsonldCourseWrite.


        :param title: The title of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The description of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CourseJsonldCourseWrite.


        :param description: The description of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def learning_goal(self):
        """Gets the learning_goal of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The learning_goal of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._learning_goal

    @learning_goal.setter
    def learning_goal(self, learning_goal):
        """Sets the learning_goal of this CourseJsonldCourseWrite.


        :param learning_goal: The learning_goal of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._learning_goal = learning_goal

    @property
    def learning_stages(self):
        """Gets the learning_stages of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The learning_stages of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._learning_stages

    @learning_stages.setter
    def learning_stages(self, learning_stages):
        """Sets the learning_stages of this CourseJsonldCourseWrite.


        :param learning_stages: The learning_stages of this CourseJsonldCourseWrite.  # noqa: E501
        :type: list[str]
        """

        self._learning_stages = learning_stages

    @property
    def target_audience(self):
        """Gets the target_audience of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The target_audience of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._target_audience

    @target_audience.setter
    def target_audience(self, target_audience):
        """Sets the target_audience of this CourseJsonldCourseWrite.


        :param target_audience: The target_audience of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._target_audience = target_audience

    @property
    def organization(self):
        """Gets the organization of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The organization of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CourseJsonldCourseWrite.


        :param organization: The organization of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def lifecycle(self):
        """Gets the lifecycle of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The lifecycle of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this CourseJsonldCourseWrite.


        :param lifecycle: The lifecycle of this CourseJsonldCourseWrite.  # noqa: E501
        :type: str
        """

        self._lifecycle = lifecycle

    @property
    def prerequisites(self):
        """Gets the prerequisites of this CourseJsonldCourseWrite.  # noqa: E501


        :return: The prerequisites of this CourseJsonldCourseWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites):
        """Sets the prerequisites of this CourseJsonldCourseWrite.


        :param prerequisites: The prerequisites of this CourseJsonldCourseWrite.  # noqa: E501
        :type: list[str]
        """

        self._prerequisites = prerequisites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseJsonldCourseWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseJsonldCourseWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
