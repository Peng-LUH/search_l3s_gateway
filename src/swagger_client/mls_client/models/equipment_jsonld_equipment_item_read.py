# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentJsonldEquipmentItemRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfEquipmentJsonldEquipmentItemReadContext',
        'id': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'name': 'str',
        'serial': 'str',
        'creator': 'str',
        'organization': 'str',
        'manufacturer': 'EquipmentManufacturerJsonldEquipmentItemRead',
        'category': 'EquipmentCategoryJsonldEquipmentItemRead',
        'image': 'AnyOfEquipmentJsonldEquipmentItemReadImage',
        'location': 'str',
        'specification_category': 'list[str]',
        'files': 'list[EquipmentFilesJsonldEquipmentItemRead]',
        'file_links': 'list[str]',
        'task_todos': 'list[str]',
        'group_task_todos': 'list[str]',
        'equipment_maintenances': 'list[EquipmentMaintenanceJsonldEquipmentItemRead]'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'name': 'name',
        'serial': 'serial',
        'creator': 'creator',
        'organization': 'organization',
        'manufacturer': 'manufacturer',
        'category': 'category',
        'image': 'image',
        'location': 'location',
        'specification_category': 'specificationCategory',
        'files': 'files',
        'file_links': 'fileLinks',
        'task_todos': 'taskTodos',
        'group_task_todos': 'groupTaskTodos',
        'equipment_maintenances': 'equipmentMaintenances'
    }

    def __init__(self, context=None, id=None, type=None, created_at=None, updated_at=None, id=None, name=None, serial=None, creator=None, organization=None, manufacturer=None, category=None, image=None, location=None, specification_category=None, files=None, file_links=None, task_todos=None, group_task_todos=None, equipment_maintenances=None):  # noqa: E501
        """EquipmentJsonldEquipmentItemRead - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._name = None
        self._serial = None
        self._creator = None
        self._organization = None
        self._manufacturer = None
        self._category = None
        self._image = None
        self._location = None
        self._specification_category = None
        self._files = None
        self._file_links = None
        self._task_todos = None
        self._group_task_todos = None
        self._equipment_maintenances = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if serial is not None:
            self.serial = serial
        if creator is not None:
            self.creator = creator
        if organization is not None:
            self.organization = organization
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if category is not None:
            self.category = category
        if image is not None:
            self.image = image
        if location is not None:
            self.location = location
        if specification_category is not None:
            self.specification_category = specification_category
        if files is not None:
            self.files = files
        if file_links is not None:
            self.file_links = file_links
        if task_todos is not None:
            self.task_todos = task_todos
        if group_task_todos is not None:
            self.group_task_todos = group_task_todos
        if equipment_maintenances is not None:
            self.equipment_maintenances = equipment_maintenances

    @property
    def context(self):
        """Gets the context of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The context of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: OneOfEquipmentJsonldEquipmentItemReadContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this EquipmentJsonldEquipmentItemRead.


        :param context: The context of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: OneOfEquipmentJsonldEquipmentItemReadContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentJsonldEquipmentItemRead.


        :param id: The id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The type of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EquipmentJsonldEquipmentItemRead.


        :param type: The type of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The created_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EquipmentJsonldEquipmentItemRead.


        :param created_at: The created_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The updated_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EquipmentJsonldEquipmentItemRead.


        :param updated_at: The updated_at of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentJsonldEquipmentItemRead.


        :param id: The id of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The name of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EquipmentJsonldEquipmentItemRead.


        :param name: The name of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The serial of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this EquipmentJsonldEquipmentItemRead.


        :param serial: The serial of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def creator(self):
        """Gets the creator of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The creator of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this EquipmentJsonldEquipmentItemRead.


        :param creator: The creator of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def organization(self):
        """Gets the organization of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The organization of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this EquipmentJsonldEquipmentItemRead.


        :param organization: The organization of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def manufacturer(self):
        """Gets the manufacturer of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The manufacturer of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: EquipmentManufacturerJsonldEquipmentItemRead
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this EquipmentJsonldEquipmentItemRead.


        :param manufacturer: The manufacturer of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: EquipmentManufacturerJsonldEquipmentItemRead
        """

        self._manufacturer = manufacturer

    @property
    def category(self):
        """Gets the category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: EquipmentCategoryJsonldEquipmentItemRead
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EquipmentJsonldEquipmentItemRead.


        :param category: The category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: EquipmentCategoryJsonldEquipmentItemRead
        """

        self._category = category

    @property
    def image(self):
        """Gets the image of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The image of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: AnyOfEquipmentJsonldEquipmentItemReadImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EquipmentJsonldEquipmentItemRead.


        :param image: The image of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: AnyOfEquipmentJsonldEquipmentItemReadImage
        """

        self._image = image

    @property
    def location(self):
        """Gets the location of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The location of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EquipmentJsonldEquipmentItemRead.


        :param location: The location of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def specification_category(self):
        """Gets the specification_category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The specification_category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._specification_category

    @specification_category.setter
    def specification_category(self, specification_category):
        """Sets the specification_category of this EquipmentJsonldEquipmentItemRead.


        :param specification_category: The specification_category of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[str]
        """

        self._specification_category = specification_category

    @property
    def files(self):
        """Gets the files of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The files of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[EquipmentFilesJsonldEquipmentItemRead]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this EquipmentJsonldEquipmentItemRead.


        :param files: The files of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[EquipmentFilesJsonldEquipmentItemRead]
        """

        self._files = files

    @property
    def file_links(self):
        """Gets the file_links of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The file_links of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_links

    @file_links.setter
    def file_links(self, file_links):
        """Sets the file_links of this EquipmentJsonldEquipmentItemRead.


        :param file_links: The file_links of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[str]
        """

        self._file_links = file_links

    @property
    def task_todos(self):
        """Gets the task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_todos

    @task_todos.setter
    def task_todos(self, task_todos):
        """Sets the task_todos of this EquipmentJsonldEquipmentItemRead.


        :param task_todos: The task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[str]
        """

        self._task_todos = task_todos

    @property
    def group_task_todos(self):
        """Gets the group_task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The group_task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_task_todos

    @group_task_todos.setter
    def group_task_todos(self, group_task_todos):
        """Sets the group_task_todos of this EquipmentJsonldEquipmentItemRead.


        :param group_task_todos: The group_task_todos of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[str]
        """

        self._group_task_todos = group_task_todos

    @property
    def equipment_maintenances(self):
        """Gets the equipment_maintenances of this EquipmentJsonldEquipmentItemRead.  # noqa: E501


        :return: The equipment_maintenances of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :rtype: list[EquipmentMaintenanceJsonldEquipmentItemRead]
        """
        return self._equipment_maintenances

    @equipment_maintenances.setter
    def equipment_maintenances(self, equipment_maintenances):
        """Sets the equipment_maintenances of this EquipmentJsonldEquipmentItemRead.


        :param equipment_maintenances: The equipment_maintenances of this EquipmentJsonldEquipmentItemRead.  # noqa: E501
        :type: list[EquipmentMaintenanceJsonldEquipmentItemRead]
        """

        self._equipment_maintenances = equipment_maintenances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentJsonldEquipmentItemRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentJsonldEquipmentItemRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
