# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskTodoTaskTodoItemWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task': 'str',
        'task_todo_info': 'AnyOfTaskTodoTaskTodoItemWriteTaskTodoInfo',
        'form_answers': 'list[str]',
        'scorm_answers': 'list[str]',
        'instructors_to_notify': 'list[str]',
        'files': 'list[str]',
        'reactivated': 'bool',
        'archived': 'bool',
        'show_to_learners': 'bool',
        'show_in_statistic': 'bool',
        'used_helping_topics': 'list[str]',
        'equipments': 'list[str]',
        'notice': 'str',
        'equipment_maintenance': 'str'
    }

    attribute_map = {
        'task': 'task',
        'task_todo_info': 'taskTodoInfo',
        'form_answers': 'formAnswers',
        'scorm_answers': 'scormAnswers',
        'instructors_to_notify': 'instructorsToNotify',
        'files': 'files',
        'reactivated': 'reactivated',
        'archived': 'archived',
        'show_to_learners': 'showToLearners',
        'show_in_statistic': 'showInStatistic',
        'used_helping_topics': 'usedHelpingTopics',
        'equipments': 'equipments',
        'notice': 'notice',
        'equipment_maintenance': 'equipmentMaintenance'
    }

    def __init__(self, task=None, task_todo_info=None, form_answers=None, scorm_answers=None, instructors_to_notify=None, files=None, reactivated=None, archived=None, show_to_learners=True, show_in_statistic=True, used_helping_topics=None, equipments=None, notice=None, equipment_maintenance=None):  # noqa: E501
        """TaskTodoTaskTodoItemWrite - a model defined in Swagger"""  # noqa: E501
        self._task = None
        self._task_todo_info = None
        self._form_answers = None
        self._scorm_answers = None
        self._instructors_to_notify = None
        self._files = None
        self._reactivated = None
        self._archived = None
        self._show_to_learners = None
        self._show_in_statistic = None
        self._used_helping_topics = None
        self._equipments = None
        self._notice = None
        self._equipment_maintenance = None
        self.discriminator = None
        self.task = task
        if task_todo_info is not None:
            self.task_todo_info = task_todo_info
        if form_answers is not None:
            self.form_answers = form_answers
        if scorm_answers is not None:
            self.scorm_answers = scorm_answers
        if instructors_to_notify is not None:
            self.instructors_to_notify = instructors_to_notify
        if files is not None:
            self.files = files
        if reactivated is not None:
            self.reactivated = reactivated
        if archived is not None:
            self.archived = archived
        if show_to_learners is not None:
            self.show_to_learners = show_to_learners
        if show_in_statistic is not None:
            self.show_in_statistic = show_in_statistic
        if used_helping_topics is not None:
            self.used_helping_topics = used_helping_topics
        if equipments is not None:
            self.equipments = equipments
        if notice is not None:
            self.notice = notice
        if equipment_maintenance is not None:
            self.equipment_maintenance = equipment_maintenance

    @property
    def task(self):
        """Gets the task of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The task of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskTodoTaskTodoItemWrite.


        :param task: The task of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def task_todo_info(self):
        """Gets the task_todo_info of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The task_todo_info of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: AnyOfTaskTodoTaskTodoItemWriteTaskTodoInfo
        """
        return self._task_todo_info

    @task_todo_info.setter
    def task_todo_info(self, task_todo_info):
        """Sets the task_todo_info of this TaskTodoTaskTodoItemWrite.


        :param task_todo_info: The task_todo_info of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: AnyOfTaskTodoTaskTodoItemWriteTaskTodoInfo
        """

        self._task_todo_info = task_todo_info

    @property
    def form_answers(self):
        """Gets the form_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The form_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_answers

    @form_answers.setter
    def form_answers(self, form_answers):
        """Sets the form_answers of this TaskTodoTaskTodoItemWrite.


        :param form_answers: The form_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._form_answers = form_answers

    @property
    def scorm_answers(self):
        """Gets the scorm_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The scorm_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._scorm_answers

    @scorm_answers.setter
    def scorm_answers(self, scorm_answers):
        """Sets the scorm_answers of this TaskTodoTaskTodoItemWrite.


        :param scorm_answers: The scorm_answers of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._scorm_answers = scorm_answers

    @property
    def instructors_to_notify(self):
        """Gets the instructors_to_notify of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The instructors_to_notify of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._instructors_to_notify

    @instructors_to_notify.setter
    def instructors_to_notify(self, instructors_to_notify):
        """Sets the instructors_to_notify of this TaskTodoTaskTodoItemWrite.


        :param instructors_to_notify: The instructors_to_notify of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._instructors_to_notify = instructors_to_notify

    @property
    def files(self):
        """Gets the files of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The files of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this TaskTodoTaskTodoItemWrite.


        :param files: The files of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def reactivated(self):
        """Gets the reactivated of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The reactivated of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._reactivated

    @reactivated.setter
    def reactivated(self, reactivated):
        """Sets the reactivated of this TaskTodoTaskTodoItemWrite.


        :param reactivated: The reactivated of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: bool
        """

        self._reactivated = reactivated

    @property
    def archived(self):
        """Gets the archived of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The archived of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TaskTodoTaskTodoItemWrite.


        :param archived: The archived of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def show_to_learners(self):
        """Gets the show_to_learners of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The show_to_learners of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._show_to_learners

    @show_to_learners.setter
    def show_to_learners(self, show_to_learners):
        """Sets the show_to_learners of this TaskTodoTaskTodoItemWrite.


        :param show_to_learners: The show_to_learners of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: bool
        """

        self._show_to_learners = show_to_learners

    @property
    def show_in_statistic(self):
        """Gets the show_in_statistic of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The show_in_statistic of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_statistic

    @show_in_statistic.setter
    def show_in_statistic(self, show_in_statistic):
        """Sets the show_in_statistic of this TaskTodoTaskTodoItemWrite.


        :param show_in_statistic: The show_in_statistic of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: bool
        """

        self._show_in_statistic = show_in_statistic

    @property
    def used_helping_topics(self):
        """Gets the used_helping_topics of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The used_helping_topics of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._used_helping_topics

    @used_helping_topics.setter
    def used_helping_topics(self, used_helping_topics):
        """Sets the used_helping_topics of this TaskTodoTaskTodoItemWrite.


        :param used_helping_topics: The used_helping_topics of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._used_helping_topics = used_helping_topics

    @property
    def equipments(self):
        """Gets the equipments of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The equipments of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """Sets the equipments of this TaskTodoTaskTodoItemWrite.


        :param equipments: The equipments of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._equipments = equipments

    @property
    def notice(self):
        """Gets the notice of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The notice of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this TaskTodoTaskTodoItemWrite.


        :param notice: The notice of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: str
        """

        self._notice = notice

    @property
    def equipment_maintenance(self):
        """Gets the equipment_maintenance of this TaskTodoTaskTodoItemWrite.  # noqa: E501


        :return: The equipment_maintenance of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._equipment_maintenance

    @equipment_maintenance.setter
    def equipment_maintenance(self, equipment_maintenance):
        """Sets the equipment_maintenance of this TaskTodoTaskTodoItemWrite.


        :param equipment_maintenance: The equipment_maintenance of this TaskTodoTaskTodoItemWrite.  # noqa: E501
        :type: str
        """

        self._equipment_maintenance = equipment_maintenance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTodoTaskTodoItemWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTodoTaskTodoItemWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
