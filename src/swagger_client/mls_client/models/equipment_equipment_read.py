# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentEquipmentRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'serial': 'str',
        'creator': 'str',
        'organization': 'OrganizationEquipmentRead',
        'manufacturer': 'EquipmentManufacturerEquipmentRead',
        'category': 'EquipmentCategoryEquipmentRead',
        'image': 'AnyOfEquipmentEquipmentReadImage',
        'location': 'str',
        'specification_category': 'list[str]',
        'files': 'list[EquipmentFilesEquipmentRead]',
        'file_links': 'list[str]',
        'equipment_maintenances': 'list[EquipmentMaintenanceEquipmentRead]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'serial': 'serial',
        'creator': 'creator',
        'organization': 'organization',
        'manufacturer': 'manufacturer',
        'category': 'category',
        'image': 'image',
        'location': 'location',
        'specification_category': 'specificationCategory',
        'files': 'files',
        'file_links': 'fileLinks',
        'equipment_maintenances': 'equipmentMaintenances'
    }

    def __init__(self, id=None, name=None, serial=None, creator=None, organization=None, manufacturer=None, category=None, image=None, location=None, specification_category=None, files=None, file_links=None, equipment_maintenances=None):  # noqa: E501
        """EquipmentEquipmentRead - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._serial = None
        self._creator = None
        self._organization = None
        self._manufacturer = None
        self._category = None
        self._image = None
        self._location = None
        self._specification_category = None
        self._files = None
        self._file_links = None
        self._equipment_maintenances = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if serial is not None:
            self.serial = serial
        if creator is not None:
            self.creator = creator
        if organization is not None:
            self.organization = organization
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if category is not None:
            self.category = category
        if image is not None:
            self.image = image
        if location is not None:
            self.location = location
        if specification_category is not None:
            self.specification_category = specification_category
        if files is not None:
            self.files = files
        if file_links is not None:
            self.file_links = file_links
        if equipment_maintenances is not None:
            self.equipment_maintenances = equipment_maintenances

    @property
    def id(self):
        """Gets the id of this EquipmentEquipmentRead.  # noqa: E501


        :return: The id of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentEquipmentRead.


        :param id: The id of this EquipmentEquipmentRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EquipmentEquipmentRead.  # noqa: E501


        :return: The name of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EquipmentEquipmentRead.


        :param name: The name of this EquipmentEquipmentRead.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this EquipmentEquipmentRead.  # noqa: E501


        :return: The serial of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this EquipmentEquipmentRead.


        :param serial: The serial of this EquipmentEquipmentRead.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def creator(self):
        """Gets the creator of this EquipmentEquipmentRead.  # noqa: E501


        :return: The creator of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this EquipmentEquipmentRead.


        :param creator: The creator of this EquipmentEquipmentRead.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def organization(self):
        """Gets the organization of this EquipmentEquipmentRead.  # noqa: E501


        :return: The organization of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: OrganizationEquipmentRead
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this EquipmentEquipmentRead.


        :param organization: The organization of this EquipmentEquipmentRead.  # noqa: E501
        :type: OrganizationEquipmentRead
        """

        self._organization = organization

    @property
    def manufacturer(self):
        """Gets the manufacturer of this EquipmentEquipmentRead.  # noqa: E501


        :return: The manufacturer of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: EquipmentManufacturerEquipmentRead
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this EquipmentEquipmentRead.


        :param manufacturer: The manufacturer of this EquipmentEquipmentRead.  # noqa: E501
        :type: EquipmentManufacturerEquipmentRead
        """

        self._manufacturer = manufacturer

    @property
    def category(self):
        """Gets the category of this EquipmentEquipmentRead.  # noqa: E501


        :return: The category of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: EquipmentCategoryEquipmentRead
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EquipmentEquipmentRead.


        :param category: The category of this EquipmentEquipmentRead.  # noqa: E501
        :type: EquipmentCategoryEquipmentRead
        """

        self._category = category

    @property
    def image(self):
        """Gets the image of this EquipmentEquipmentRead.  # noqa: E501


        :return: The image of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: AnyOfEquipmentEquipmentReadImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EquipmentEquipmentRead.


        :param image: The image of this EquipmentEquipmentRead.  # noqa: E501
        :type: AnyOfEquipmentEquipmentReadImage
        """

        self._image = image

    @property
    def location(self):
        """Gets the location of this EquipmentEquipmentRead.  # noqa: E501


        :return: The location of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EquipmentEquipmentRead.


        :param location: The location of this EquipmentEquipmentRead.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def specification_category(self):
        """Gets the specification_category of this EquipmentEquipmentRead.  # noqa: E501


        :return: The specification_category of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._specification_category

    @specification_category.setter
    def specification_category(self, specification_category):
        """Sets the specification_category of this EquipmentEquipmentRead.


        :param specification_category: The specification_category of this EquipmentEquipmentRead.  # noqa: E501
        :type: list[str]
        """

        self._specification_category = specification_category

    @property
    def files(self):
        """Gets the files of this EquipmentEquipmentRead.  # noqa: E501


        :return: The files of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: list[EquipmentFilesEquipmentRead]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this EquipmentEquipmentRead.


        :param files: The files of this EquipmentEquipmentRead.  # noqa: E501
        :type: list[EquipmentFilesEquipmentRead]
        """

        self._files = files

    @property
    def file_links(self):
        """Gets the file_links of this EquipmentEquipmentRead.  # noqa: E501


        :return: The file_links of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_links

    @file_links.setter
    def file_links(self, file_links):
        """Sets the file_links of this EquipmentEquipmentRead.


        :param file_links: The file_links of this EquipmentEquipmentRead.  # noqa: E501
        :type: list[str]
        """

        self._file_links = file_links

    @property
    def equipment_maintenances(self):
        """Gets the equipment_maintenances of this EquipmentEquipmentRead.  # noqa: E501


        :return: The equipment_maintenances of this EquipmentEquipmentRead.  # noqa: E501
        :rtype: list[EquipmentMaintenanceEquipmentRead]
        """
        return self._equipment_maintenances

    @equipment_maintenances.setter
    def equipment_maintenances(self, equipment_maintenances):
        """Sets the equipment_maintenances of this EquipmentEquipmentRead.


        :param equipment_maintenances: The equipment_maintenances of this EquipmentEquipmentRead.  # noqa: E501
        :type: list[EquipmentMaintenanceEquipmentRead]
        """

        self._equipment_maintenances = equipment_maintenances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentEquipmentRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentEquipmentRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
