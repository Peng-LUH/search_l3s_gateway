# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfExternalContentOrganizationJsonldExternalContentOrganizationItemWriteContext',
        'id': 'str',
        'type': 'str',
        'original_license_count': 'int',
        'current_license_count': 'int',
        'projects': 'list[str]',
        'tasks': 'list[str]',
        'forms': 'list[str]',
        'directories_for_all': 'list[str]',
        'directories_for_apprentice': 'list[str]',
        'directories_for_instructor': 'list[str]',
        'elearnings': 'list[str]',
        'no_mls_contents': 'list[str]',
        'allow_copy': 'bool',
        'links': 'list[str]'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'original_license_count': 'originalLicenseCount',
        'current_license_count': 'currentLicenseCount',
        'projects': 'projects',
        'tasks': 'tasks',
        'forms': 'forms',
        'directories_for_all': 'directoriesForAll',
        'directories_for_apprentice': 'directoriesForApprentice',
        'directories_for_instructor': 'directoriesForInstructor',
        'elearnings': 'elearnings',
        'no_mls_contents': 'noMlsContents',
        'allow_copy': 'allowCopy',
        'links': 'links'
    }

    def __init__(self, context=None, id=None, type=None, original_license_count=None, current_license_count=None, projects=None, tasks=None, forms=None, directories_for_all=None, directories_for_apprentice=None, directories_for_instructor=None, elearnings=None, no_mls_contents=None, allow_copy=None, links=None):  # noqa: E501
        """ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._original_license_count = None
        self._current_license_count = None
        self._projects = None
        self._tasks = None
        self._forms = None
        self._directories_for_all = None
        self._directories_for_apprentice = None
        self._directories_for_instructor = None
        self._elearnings = None
        self._no_mls_contents = None
        self._allow_copy = None
        self._links = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if original_license_count is not None:
            self.original_license_count = original_license_count
        if current_license_count is not None:
            self.current_license_count = current_license_count
        if projects is not None:
            self.projects = projects
        if tasks is not None:
            self.tasks = tasks
        if forms is not None:
            self.forms = forms
        if directories_for_all is not None:
            self.directories_for_all = directories_for_all
        if directories_for_apprentice is not None:
            self.directories_for_apprentice = directories_for_apprentice
        if directories_for_instructor is not None:
            self.directories_for_instructor = directories_for_instructor
        if elearnings is not None:
            self.elearnings = elearnings
        if no_mls_contents is not None:
            self.no_mls_contents = no_mls_contents
        if allow_copy is not None:
            self.allow_copy = allow_copy
        if links is not None:
            self.links = links

    @property
    def context(self):
        """Gets the context of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The context of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: OneOfExternalContentOrganizationJsonldExternalContentOrganizationItemWriteContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param context: The context of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: OneOfExternalContentOrganizationJsonldExternalContentOrganizationItemWriteContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The id of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param id: The id of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The type of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param type: The type of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def original_license_count(self):
        """Gets the original_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The original_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: int
        """
        return self._original_license_count

    @original_license_count.setter
    def original_license_count(self, original_license_count):
        """Sets the original_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param original_license_count: The original_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: int
        """

        self._original_license_count = original_license_count

    @property
    def current_license_count(self):
        """Gets the current_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The current_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: int
        """
        return self._current_license_count

    @current_license_count.setter
    def current_license_count(self, current_license_count):
        """Sets the current_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param current_license_count: The current_license_count of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: int
        """

        self._current_license_count = current_license_count

    @property
    def projects(self):
        """Gets the projects of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The projects of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param projects: The projects of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._projects = projects

    @property
    def tasks(self):
        """Gets the tasks of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The tasks of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param tasks: The tasks of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._tasks = tasks

    @property
    def forms(self):
        """Gets the forms of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The forms of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._forms

    @forms.setter
    def forms(self, forms):
        """Sets the forms of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param forms: The forms of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._forms = forms

    @property
    def directories_for_all(self):
        """Gets the directories_for_all of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The directories_for_all of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._directories_for_all

    @directories_for_all.setter
    def directories_for_all(self, directories_for_all):
        """Sets the directories_for_all of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param directories_for_all: The directories_for_all of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._directories_for_all = directories_for_all

    @property
    def directories_for_apprentice(self):
        """Gets the directories_for_apprentice of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The directories_for_apprentice of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._directories_for_apprentice

    @directories_for_apprentice.setter
    def directories_for_apprentice(self, directories_for_apprentice):
        """Sets the directories_for_apprentice of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param directories_for_apprentice: The directories_for_apprentice of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._directories_for_apprentice = directories_for_apprentice

    @property
    def directories_for_instructor(self):
        """Gets the directories_for_instructor of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The directories_for_instructor of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._directories_for_instructor

    @directories_for_instructor.setter
    def directories_for_instructor(self, directories_for_instructor):
        """Sets the directories_for_instructor of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param directories_for_instructor: The directories_for_instructor of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._directories_for_instructor = directories_for_instructor

    @property
    def elearnings(self):
        """Gets the elearnings of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The elearnings of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._elearnings

    @elearnings.setter
    def elearnings(self, elearnings):
        """Sets the elearnings of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param elearnings: The elearnings of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._elearnings = elearnings

    @property
    def no_mls_contents(self):
        """Gets the no_mls_contents of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The no_mls_contents of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._no_mls_contents

    @no_mls_contents.setter
    def no_mls_contents(self, no_mls_contents):
        """Sets the no_mls_contents of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param no_mls_contents: The no_mls_contents of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._no_mls_contents = no_mls_contents

    @property
    def allow_copy(self):
        """Gets the allow_copy of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The allow_copy of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: bool
        """
        return self._allow_copy

    @allow_copy.setter
    def allow_copy(self, allow_copy):
        """Sets the allow_copy of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param allow_copy: The allow_copy of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: bool
        """

        self._allow_copy = allow_copy

    @property
    def links(self):
        """Gets the links of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501


        :return: The links of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :rtype: list[str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.


        :param links: The links of this ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite.  # noqa: E501
        :type: list[str]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalContentOrganizationJsonldExternalContentOrganizationItemWrite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
