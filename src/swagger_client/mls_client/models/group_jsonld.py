# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupJsonld(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfGroupJsonldContext',
        'id': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'title': 'str',
        'organization': 'str',
        'users': 'list[str]',
        'shared_directories': 'list[str]',
        'shared_documents': 'list[str]',
        'chats': 'list[str]',
        'root_id': 'str',
        'assigned_users': 'list[str]',
        'mls1_id': 'int'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'title': 'title',
        'organization': 'organization',
        'users': 'users',
        'shared_directories': 'sharedDirectories',
        'shared_documents': 'sharedDocuments',
        'chats': 'chats',
        'root_id': 'rootId',
        'assigned_users': 'assignedUsers',
        'mls1_id': 'mls1Id'
    }

    def __init__(self, context=None, id=None, type=None, created_at=None, updated_at=None, id=None, title=None, organization=None, users=None, shared_directories=None, shared_documents=None, chats=None, root_id=None, assigned_users=None, mls1_id=None):  # noqa: E501
        """GroupJsonld - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._title = None
        self._organization = None
        self._users = None
        self._shared_directories = None
        self._shared_documents = None
        self._chats = None
        self._root_id = None
        self._assigned_users = None
        self._mls1_id = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        self.title = title
        self.organization = organization
        if users is not None:
            self.users = users
        if shared_directories is not None:
            self.shared_directories = shared_directories
        if shared_documents is not None:
            self.shared_documents = shared_documents
        if chats is not None:
            self.chats = chats
        if root_id is not None:
            self.root_id = root_id
        if assigned_users is not None:
            self.assigned_users = assigned_users
        if mls1_id is not None:
            self.mls1_id = mls1_id

    @property
    def context(self):
        """Gets the context of this GroupJsonld.  # noqa: E501


        :return: The context of this GroupJsonld.  # noqa: E501
        :rtype: OneOfGroupJsonldContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GroupJsonld.


        :param context: The context of this GroupJsonld.  # noqa: E501
        :type: OneOfGroupJsonldContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this GroupJsonld.  # noqa: E501


        :return: The id of this GroupJsonld.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupJsonld.


        :param id: The id of this GroupJsonld.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this GroupJsonld.  # noqa: E501


        :return: The type of this GroupJsonld.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupJsonld.


        :param type: The type of this GroupJsonld.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this GroupJsonld.  # noqa: E501


        :return: The created_at of this GroupJsonld.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GroupJsonld.


        :param created_at: The created_at of this GroupJsonld.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GroupJsonld.  # noqa: E501


        :return: The updated_at of this GroupJsonld.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GroupJsonld.


        :param updated_at: The updated_at of this GroupJsonld.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this GroupJsonld.  # noqa: E501


        :return: The id of this GroupJsonld.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupJsonld.


        :param id: The id of this GroupJsonld.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this GroupJsonld.  # noqa: E501


        :return: The title of this GroupJsonld.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GroupJsonld.


        :param title: The title of this GroupJsonld.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def organization(self):
        """Gets the organization of this GroupJsonld.  # noqa: E501


        :return: The organization of this GroupJsonld.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this GroupJsonld.


        :param organization: The organization of this GroupJsonld.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def users(self):
        """Gets the users of this GroupJsonld.  # noqa: E501


        :return: The users of this GroupJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this GroupJsonld.


        :param users: The users of this GroupJsonld.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def shared_directories(self):
        """Gets the shared_directories of this GroupJsonld.  # noqa: E501


        :return: The shared_directories of this GroupJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_directories

    @shared_directories.setter
    def shared_directories(self, shared_directories):
        """Sets the shared_directories of this GroupJsonld.


        :param shared_directories: The shared_directories of this GroupJsonld.  # noqa: E501
        :type: list[str]
        """

        self._shared_directories = shared_directories

    @property
    def shared_documents(self):
        """Gets the shared_documents of this GroupJsonld.  # noqa: E501


        :return: The shared_documents of this GroupJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_documents

    @shared_documents.setter
    def shared_documents(self, shared_documents):
        """Sets the shared_documents of this GroupJsonld.


        :param shared_documents: The shared_documents of this GroupJsonld.  # noqa: E501
        :type: list[str]
        """

        self._shared_documents = shared_documents

    @property
    def chats(self):
        """Gets the chats of this GroupJsonld.  # noqa: E501


        :return: The chats of this GroupJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._chats

    @chats.setter
    def chats(self, chats):
        """Sets the chats of this GroupJsonld.


        :param chats: The chats of this GroupJsonld.  # noqa: E501
        :type: list[str]
        """

        self._chats = chats

    @property
    def root_id(self):
        """Gets the root_id of this GroupJsonld.  # noqa: E501


        :return: The root_id of this GroupJsonld.  # noqa: E501
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this GroupJsonld.


        :param root_id: The root_id of this GroupJsonld.  # noqa: E501
        :type: str
        """

        self._root_id = root_id

    @property
    def assigned_users(self):
        """Gets the assigned_users of this GroupJsonld.  # noqa: E501


        :return: The assigned_users of this GroupJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_users

    @assigned_users.setter
    def assigned_users(self, assigned_users):
        """Sets the assigned_users of this GroupJsonld.


        :param assigned_users: The assigned_users of this GroupJsonld.  # noqa: E501
        :type: list[str]
        """

        self._assigned_users = assigned_users

    @property
    def mls1_id(self):
        """Gets the mls1_id of this GroupJsonld.  # noqa: E501


        :return: The mls1_id of this GroupJsonld.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this GroupJsonld.


        :param mls1_id: The mls1_id of this GroupJsonld.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupJsonld, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupJsonld):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
