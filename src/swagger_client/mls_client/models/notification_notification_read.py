# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationNotificationRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'id': 'int',
        'receiver': 'str',
        'link': 'str',
        'translation_key': 'str',
        'key_parameter': 'list[str]'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'receiver': 'receiver',
        'link': 'link',
        'translation_key': 'translationKey',
        'key_parameter': 'keyParameter'
    }

    def __init__(self, created_at=None, id=None, receiver=None, link=None, translation_key=None, key_parameter=None):  # noqa: E501
        """NotificationNotificationRead - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._id = None
        self._receiver = None
        self._link = None
        self._translation_key = None
        self._key_parameter = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        self.receiver = receiver
        if link is not None:
            self.link = link
        if translation_key is not None:
            self.translation_key = translation_key
        if key_parameter is not None:
            self.key_parameter = key_parameter

    @property
    def created_at(self):
        """Gets the created_at of this NotificationNotificationRead.  # noqa: E501


        :return: The created_at of this NotificationNotificationRead.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NotificationNotificationRead.


        :param created_at: The created_at of this NotificationNotificationRead.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this NotificationNotificationRead.  # noqa: E501


        :return: The id of this NotificationNotificationRead.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationNotificationRead.


        :param id: The id of this NotificationNotificationRead.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def receiver(self):
        """Gets the receiver of this NotificationNotificationRead.  # noqa: E501


        :return: The receiver of this NotificationNotificationRead.  # noqa: E501
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this NotificationNotificationRead.


        :param receiver: The receiver of this NotificationNotificationRead.  # noqa: E501
        :type: str
        """
        if receiver is None:
            raise ValueError("Invalid value for `receiver`, must not be `None`")  # noqa: E501

        self._receiver = receiver

    @property
    def link(self):
        """Gets the link of this NotificationNotificationRead.  # noqa: E501


        :return: The link of this NotificationNotificationRead.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this NotificationNotificationRead.


        :param link: The link of this NotificationNotificationRead.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def translation_key(self):
        """Gets the translation_key of this NotificationNotificationRead.  # noqa: E501


        :return: The translation_key of this NotificationNotificationRead.  # noqa: E501
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """Sets the translation_key of this NotificationNotificationRead.


        :param translation_key: The translation_key of this NotificationNotificationRead.  # noqa: E501
        :type: str
        """

        self._translation_key = translation_key

    @property
    def key_parameter(self):
        """Gets the key_parameter of this NotificationNotificationRead.  # noqa: E501


        :return: The key_parameter of this NotificationNotificationRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_parameter

    @key_parameter.setter
    def key_parameter(self, key_parameter):
        """Sets the key_parameter of this NotificationNotificationRead.


        :param key_parameter: The key_parameter of this NotificationNotificationRead.  # noqa: E501
        :type: list[str]
        """

        self._key_parameter = key_parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationNotificationRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationNotificationRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
