# coding: utf-8

"""
    MLS2 API

    Central API  # noqa: E501

    OpenAPI spec version: 0.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskTodo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'id': 'int',
        'task': 'str',
        'task_todo_info': 'str',
        'shuffle_questions': 'list[str]',
        'form_solutions': 'list[str]',
        'form_answers': 'list[str]',
        'form_corrections': 'list[str]',
        'form_comments': 'list[str]',
        'scorm_answers': 'list[str]',
        'assigner': 'str',
        'user': 'str',
        'scored_points': 'float',
        'max_points': 'float',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'note': 'str',
        'instructors_to_notify': 'list[str]',
        'rater': 'str',
        'files': 'list[str]',
        'project_todo': 'str',
        'reactivated': 'bool',
        'archived': 'bool',
        'show_to_learners': 'bool',
        'show_in_statistic': 'bool',
        'used_helping_topics': 'list[str]',
        'trainee_notices': 'list[str]',
        'equipments': 'list[str]',
        'mls1_id': 'int',
        'form_points': 'list[str]',
        'weighted_max_points': 'float',
        'weighted_scored_points': 'float',
        'notice': 'str',
        'organization': 'str',
        'equipment_maintenance': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'id': 'id',
        'task': 'task',
        'task_todo_info': 'taskTodoInfo',
        'shuffle_questions': 'shuffleQuestions',
        'form_solutions': 'formSolutions',
        'form_answers': 'formAnswers',
        'form_corrections': 'formCorrections',
        'form_comments': 'formComments',
        'scorm_answers': 'scormAnswers',
        'assigner': 'assigner',
        'user': 'user',
        'scored_points': 'scoredPoints',
        'max_points': 'maxPoints',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'note': 'note',
        'instructors_to_notify': 'instructorsToNotify',
        'rater': 'rater',
        'files': 'files',
        'project_todo': 'projectTodo',
        'reactivated': 'reactivated',
        'archived': 'archived',
        'show_to_learners': 'showToLearners',
        'show_in_statistic': 'showInStatistic',
        'used_helping_topics': 'usedHelpingTopics',
        'trainee_notices': 'traineeNotices',
        'equipments': 'equipments',
        'mls1_id': 'mls1Id',
        'form_points': 'formPoints',
        'weighted_max_points': 'weightedMaxPoints',
        'weighted_scored_points': 'weightedScoredPoints',
        'notice': 'notice',
        'organization': 'organization',
        'equipment_maintenance': 'equipmentMaintenance'
    }

    def __init__(self, created_at=None, updated_at=None, id=None, task=None, task_todo_info=None, shuffle_questions=None, form_solutions=None, form_answers=None, form_corrections=None, form_comments=None, scorm_answers=None, assigner=None, user=None, scored_points=None, max_points=None, start_time=None, end_time=None, note=None, instructors_to_notify=None, rater=None, files=None, project_todo=None, reactivated=None, archived=None, show_to_learners=True, show_in_statistic=True, used_helping_topics=None, trainee_notices=None, equipments=None, mls1_id=None, form_points=None, weighted_max_points=None, weighted_scored_points=None, notice=None, organization=None, equipment_maintenance=None):  # noqa: E501
        """TaskTodo - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._task = None
        self._task_todo_info = None
        self._shuffle_questions = None
        self._form_solutions = None
        self._form_answers = None
        self._form_corrections = None
        self._form_comments = None
        self._scorm_answers = None
        self._assigner = None
        self._user = None
        self._scored_points = None
        self._max_points = None
        self._start_time = None
        self._end_time = None
        self._note = None
        self._instructors_to_notify = None
        self._rater = None
        self._files = None
        self._project_todo = None
        self._reactivated = None
        self._archived = None
        self._show_to_learners = None
        self._show_in_statistic = None
        self._used_helping_topics = None
        self._trainee_notices = None
        self._equipments = None
        self._mls1_id = None
        self._form_points = None
        self._weighted_max_points = None
        self._weighted_scored_points = None
        self._notice = None
        self._organization = None
        self._equipment_maintenance = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        self.task = task
        if task_todo_info is not None:
            self.task_todo_info = task_todo_info
        if shuffle_questions is not None:
            self.shuffle_questions = shuffle_questions
        if form_solutions is not None:
            self.form_solutions = form_solutions
        if form_answers is not None:
            self.form_answers = form_answers
        if form_corrections is not None:
            self.form_corrections = form_corrections
        if form_comments is not None:
            self.form_comments = form_comments
        if scorm_answers is not None:
            self.scorm_answers = scorm_answers
        if assigner is not None:
            self.assigner = assigner
        if user is not None:
            self.user = user
        if scored_points is not None:
            self.scored_points = scored_points
        if max_points is not None:
            self.max_points = max_points
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if note is not None:
            self.note = note
        if instructors_to_notify is not None:
            self.instructors_to_notify = instructors_to_notify
        if rater is not None:
            self.rater = rater
        if files is not None:
            self.files = files
        if project_todo is not None:
            self.project_todo = project_todo
        if reactivated is not None:
            self.reactivated = reactivated
        if archived is not None:
            self.archived = archived
        if show_to_learners is not None:
            self.show_to_learners = show_to_learners
        if show_in_statistic is not None:
            self.show_in_statistic = show_in_statistic
        if used_helping_topics is not None:
            self.used_helping_topics = used_helping_topics
        if trainee_notices is not None:
            self.trainee_notices = trainee_notices
        if equipments is not None:
            self.equipments = equipments
        if mls1_id is not None:
            self.mls1_id = mls1_id
        if form_points is not None:
            self.form_points = form_points
        if weighted_max_points is not None:
            self.weighted_max_points = weighted_max_points
        if weighted_scored_points is not None:
            self.weighted_scored_points = weighted_scored_points
        if notice is not None:
            self.notice = notice
        if organization is not None:
            self.organization = organization
        if equipment_maintenance is not None:
            self.equipment_maintenance = equipment_maintenance

    @property
    def created_at(self):
        """Gets the created_at of this TaskTodo.  # noqa: E501


        :return: The created_at of this TaskTodo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskTodo.


        :param created_at: The created_at of this TaskTodo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskTodo.  # noqa: E501


        :return: The updated_at of this TaskTodo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskTodo.


        :param updated_at: The updated_at of this TaskTodo.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this TaskTodo.  # noqa: E501


        :return: The id of this TaskTodo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTodo.


        :param id: The id of this TaskTodo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def task(self):
        """Gets the task of this TaskTodo.  # noqa: E501


        :return: The task of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskTodo.


        :param task: The task of this TaskTodo.  # noqa: E501
        :type: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def task_todo_info(self):
        """Gets the task_todo_info of this TaskTodo.  # noqa: E501


        :return: The task_todo_info of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._task_todo_info

    @task_todo_info.setter
    def task_todo_info(self, task_todo_info):
        """Sets the task_todo_info of this TaskTodo.


        :param task_todo_info: The task_todo_info of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._task_todo_info = task_todo_info

    @property
    def shuffle_questions(self):
        """Gets the shuffle_questions of this TaskTodo.  # noqa: E501


        :return: The shuffle_questions of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._shuffle_questions

    @shuffle_questions.setter
    def shuffle_questions(self, shuffle_questions):
        """Sets the shuffle_questions of this TaskTodo.


        :param shuffle_questions: The shuffle_questions of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._shuffle_questions = shuffle_questions

    @property
    def form_solutions(self):
        """Gets the form_solutions of this TaskTodo.  # noqa: E501


        :return: The form_solutions of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_solutions

    @form_solutions.setter
    def form_solutions(self, form_solutions):
        """Sets the form_solutions of this TaskTodo.


        :param form_solutions: The form_solutions of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._form_solutions = form_solutions

    @property
    def form_answers(self):
        """Gets the form_answers of this TaskTodo.  # noqa: E501


        :return: The form_answers of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_answers

    @form_answers.setter
    def form_answers(self, form_answers):
        """Sets the form_answers of this TaskTodo.


        :param form_answers: The form_answers of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._form_answers = form_answers

    @property
    def form_corrections(self):
        """Gets the form_corrections of this TaskTodo.  # noqa: E501


        :return: The form_corrections of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_corrections

    @form_corrections.setter
    def form_corrections(self, form_corrections):
        """Sets the form_corrections of this TaskTodo.


        :param form_corrections: The form_corrections of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._form_corrections = form_corrections

    @property
    def form_comments(self):
        """Gets the form_comments of this TaskTodo.  # noqa: E501


        :return: The form_comments of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_comments

    @form_comments.setter
    def form_comments(self, form_comments):
        """Sets the form_comments of this TaskTodo.


        :param form_comments: The form_comments of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._form_comments = form_comments

    @property
    def scorm_answers(self):
        """Gets the scorm_answers of this TaskTodo.  # noqa: E501


        :return: The scorm_answers of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._scorm_answers

    @scorm_answers.setter
    def scorm_answers(self, scorm_answers):
        """Sets the scorm_answers of this TaskTodo.


        :param scorm_answers: The scorm_answers of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._scorm_answers = scorm_answers

    @property
    def assigner(self):
        """Gets the assigner of this TaskTodo.  # noqa: E501


        :return: The assigner of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this TaskTodo.


        :param assigner: The assigner of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._assigner = assigner

    @property
    def user(self):
        """Gets the user of this TaskTodo.  # noqa: E501


        :return: The user of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TaskTodo.


        :param user: The user of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def scored_points(self):
        """Gets the scored_points of this TaskTodo.  # noqa: E501


        :return: The scored_points of this TaskTodo.  # noqa: E501
        :rtype: float
        """
        return self._scored_points

    @scored_points.setter
    def scored_points(self, scored_points):
        """Sets the scored_points of this TaskTodo.


        :param scored_points: The scored_points of this TaskTodo.  # noqa: E501
        :type: float
        """

        self._scored_points = scored_points

    @property
    def max_points(self):
        """Gets the max_points of this TaskTodo.  # noqa: E501


        :return: The max_points of this TaskTodo.  # noqa: E501
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this TaskTodo.


        :param max_points: The max_points of this TaskTodo.  # noqa: E501
        :type: float
        """

        self._max_points = max_points

    @property
    def start_time(self):
        """Gets the start_time of this TaskTodo.  # noqa: E501


        :return: The start_time of this TaskTodo.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskTodo.


        :param start_time: The start_time of this TaskTodo.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TaskTodo.  # noqa: E501


        :return: The end_time of this TaskTodo.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskTodo.


        :param end_time: The end_time of this TaskTodo.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def note(self):
        """Gets the note of this TaskTodo.  # noqa: E501


        :return: The note of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TaskTodo.


        :param note: The note of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def instructors_to_notify(self):
        """Gets the instructors_to_notify of this TaskTodo.  # noqa: E501


        :return: The instructors_to_notify of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._instructors_to_notify

    @instructors_to_notify.setter
    def instructors_to_notify(self, instructors_to_notify):
        """Sets the instructors_to_notify of this TaskTodo.


        :param instructors_to_notify: The instructors_to_notify of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._instructors_to_notify = instructors_to_notify

    @property
    def rater(self):
        """Gets the rater of this TaskTodo.  # noqa: E501


        :return: The rater of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._rater

    @rater.setter
    def rater(self, rater):
        """Sets the rater of this TaskTodo.


        :param rater: The rater of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._rater = rater

    @property
    def files(self):
        """Gets the files of this TaskTodo.  # noqa: E501


        :return: The files of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this TaskTodo.


        :param files: The files of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def project_todo(self):
        """Gets the project_todo of this TaskTodo.  # noqa: E501


        :return: The project_todo of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._project_todo

    @project_todo.setter
    def project_todo(self, project_todo):
        """Sets the project_todo of this TaskTodo.


        :param project_todo: The project_todo of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._project_todo = project_todo

    @property
    def reactivated(self):
        """Gets the reactivated of this TaskTodo.  # noqa: E501


        :return: The reactivated of this TaskTodo.  # noqa: E501
        :rtype: bool
        """
        return self._reactivated

    @reactivated.setter
    def reactivated(self, reactivated):
        """Sets the reactivated of this TaskTodo.


        :param reactivated: The reactivated of this TaskTodo.  # noqa: E501
        :type: bool
        """

        self._reactivated = reactivated

    @property
    def archived(self):
        """Gets the archived of this TaskTodo.  # noqa: E501


        :return: The archived of this TaskTodo.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TaskTodo.


        :param archived: The archived of this TaskTodo.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def show_to_learners(self):
        """Gets the show_to_learners of this TaskTodo.  # noqa: E501


        :return: The show_to_learners of this TaskTodo.  # noqa: E501
        :rtype: bool
        """
        return self._show_to_learners

    @show_to_learners.setter
    def show_to_learners(self, show_to_learners):
        """Sets the show_to_learners of this TaskTodo.


        :param show_to_learners: The show_to_learners of this TaskTodo.  # noqa: E501
        :type: bool
        """

        self._show_to_learners = show_to_learners

    @property
    def show_in_statistic(self):
        """Gets the show_in_statistic of this TaskTodo.  # noqa: E501


        :return: The show_in_statistic of this TaskTodo.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_statistic

    @show_in_statistic.setter
    def show_in_statistic(self, show_in_statistic):
        """Sets the show_in_statistic of this TaskTodo.


        :param show_in_statistic: The show_in_statistic of this TaskTodo.  # noqa: E501
        :type: bool
        """

        self._show_in_statistic = show_in_statistic

    @property
    def used_helping_topics(self):
        """Gets the used_helping_topics of this TaskTodo.  # noqa: E501


        :return: The used_helping_topics of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._used_helping_topics

    @used_helping_topics.setter
    def used_helping_topics(self, used_helping_topics):
        """Sets the used_helping_topics of this TaskTodo.


        :param used_helping_topics: The used_helping_topics of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._used_helping_topics = used_helping_topics

    @property
    def trainee_notices(self):
        """Gets the trainee_notices of this TaskTodo.  # noqa: E501


        :return: The trainee_notices of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._trainee_notices

    @trainee_notices.setter
    def trainee_notices(self, trainee_notices):
        """Sets the trainee_notices of this TaskTodo.


        :param trainee_notices: The trainee_notices of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._trainee_notices = trainee_notices

    @property
    def equipments(self):
        """Gets the equipments of this TaskTodo.  # noqa: E501


        :return: The equipments of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """Sets the equipments of this TaskTodo.


        :param equipments: The equipments of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._equipments = equipments

    @property
    def mls1_id(self):
        """Gets the mls1_id of this TaskTodo.  # noqa: E501


        :return: The mls1_id of this TaskTodo.  # noqa: E501
        :rtype: int
        """
        return self._mls1_id

    @mls1_id.setter
    def mls1_id(self, mls1_id):
        """Sets the mls1_id of this TaskTodo.


        :param mls1_id: The mls1_id of this TaskTodo.  # noqa: E501
        :type: int
        """

        self._mls1_id = mls1_id

    @property
    def form_points(self):
        """Gets the form_points of this TaskTodo.  # noqa: E501


        :return: The form_points of this TaskTodo.  # noqa: E501
        :rtype: list[str]
        """
        return self._form_points

    @form_points.setter
    def form_points(self, form_points):
        """Sets the form_points of this TaskTodo.


        :param form_points: The form_points of this TaskTodo.  # noqa: E501
        :type: list[str]
        """

        self._form_points = form_points

    @property
    def weighted_max_points(self):
        """Gets the weighted_max_points of this TaskTodo.  # noqa: E501


        :return: The weighted_max_points of this TaskTodo.  # noqa: E501
        :rtype: float
        """
        return self._weighted_max_points

    @weighted_max_points.setter
    def weighted_max_points(self, weighted_max_points):
        """Sets the weighted_max_points of this TaskTodo.


        :param weighted_max_points: The weighted_max_points of this TaskTodo.  # noqa: E501
        :type: float
        """

        self._weighted_max_points = weighted_max_points

    @property
    def weighted_scored_points(self):
        """Gets the weighted_scored_points of this TaskTodo.  # noqa: E501


        :return: The weighted_scored_points of this TaskTodo.  # noqa: E501
        :rtype: float
        """
        return self._weighted_scored_points

    @weighted_scored_points.setter
    def weighted_scored_points(self, weighted_scored_points):
        """Sets the weighted_scored_points of this TaskTodo.


        :param weighted_scored_points: The weighted_scored_points of this TaskTodo.  # noqa: E501
        :type: float
        """

        self._weighted_scored_points = weighted_scored_points

    @property
    def notice(self):
        """Gets the notice of this TaskTodo.  # noqa: E501


        :return: The notice of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this TaskTodo.


        :param notice: The notice of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._notice = notice

    @property
    def organization(self):
        """Gets the organization of this TaskTodo.  # noqa: E501


        :return: The organization of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TaskTodo.


        :param organization: The organization of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def equipment_maintenance(self):
        """Gets the equipment_maintenance of this TaskTodo.  # noqa: E501


        :return: The equipment_maintenance of this TaskTodo.  # noqa: E501
        :rtype: str
        """
        return self._equipment_maintenance

    @equipment_maintenance.setter
    def equipment_maintenance(self, equipment_maintenance):
        """Sets the equipment_maintenance of this TaskTodo.


        :param equipment_maintenance: The equipment_maintenance of this TaskTodo.  # noqa: E501
        :type: str
        """

        self._equipment_maintenance = equipment_maintenance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTodo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTodo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
