# coding: utf-8

"""
    L3S Search Service for SEARCH

    Welcome to the Swagger UI documentation site test!  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BM25Indexer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_name': 'str',
        'json_collection': 'str',
        'generator': 'str',
        'threads': 'int'
    }

    attribute_map = {
        'dataset_name': 'dataset_name',
        'json_collection': 'json_collection',
        'generator': 'generator',
        'threads': 'threads'
    }

    def __init__(self, dataset_name=None, json_collection='JsonCollection', generator='DefaultLuceneDocumentGenerator', threads=None):  # noqa: E501
        """BM25Indexer - a model defined in Swagger"""  # noqa: E501
        self._dataset_name = None
        self._json_collection = None
        self._generator = None
        self._threads = None
        self.discriminator = None
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if json_collection is not None:
            self.json_collection = json_collection
        if generator is not None:
            self.generator = generator
        if threads is not None:
            self.threads = threads

    @property
    def dataset_name(self):
        """Gets the dataset_name of this BM25Indexer.  # noqa: E501


        :return: The dataset_name of this BM25Indexer.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this BM25Indexer.


        :param dataset_name: The dataset_name of this BM25Indexer.  # noqa: E501
        :type: str
        """

        self._dataset_name = dataset_name

    @property
    def json_collection(self):
        """Gets the json_collection of this BM25Indexer.  # noqa: E501


        :return: The json_collection of this BM25Indexer.  # noqa: E501
        :rtype: str
        """
        return self._json_collection

    @json_collection.setter
    def json_collection(self, json_collection):
        """Sets the json_collection of this BM25Indexer.


        :param json_collection: The json_collection of this BM25Indexer.  # noqa: E501
        :type: str
        """

        self._json_collection = json_collection

    @property
    def generator(self):
        """Gets the generator of this BM25Indexer.  # noqa: E501


        :return: The generator of this BM25Indexer.  # noqa: E501
        :rtype: str
        """
        return self._generator

    @generator.setter
    def generator(self, generator):
        """Sets the generator of this BM25Indexer.


        :param generator: The generator of this BM25Indexer.  # noqa: E501
        :type: str
        """

        self._generator = generator

    @property
    def threads(self):
        """Gets the threads of this BM25Indexer.  # noqa: E501


        :return: The threads of this BM25Indexer.  # noqa: E501
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this BM25Indexer.


        :param threads: The threads of this BM25Indexer.  # noqa: E501
        :type: int
        """

        self._threads = threads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BM25Indexer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BM25Indexer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
