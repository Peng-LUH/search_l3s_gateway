# coding: utf-8

"""
    L3S Search Service for SEARCH

    Welcome to the Swagger UI documentation site test!  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndexerInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encode_type': 'str',
        'model_name': 'str',
        'index_method': 'str',
        'dataset_name': 'str'
    }

    attribute_map = {
        'encode_type': 'encode_type',
        'model_name': 'model_name',
        'index_method': 'index_method',
        'dataset_name': 'dataset_name'
    }

    def __init__(self, encode_type='e.g., dense, traditional', model_name='bert-base-german-cased', index_method='e.g. flat-l2, flat-ip', dataset_name='e.g. mls-tasks'):  # noqa: E501
        """IndexerInput - a model defined in Swagger"""  # noqa: E501
        self._encode_type = None
        self._model_name = None
        self._index_method = None
        self._dataset_name = None
        self.discriminator = None
        if encode_type is not None:
            self.encode_type = encode_type
        if model_name is not None:
            self.model_name = model_name
        if index_method is not None:
            self.index_method = index_method
        if dataset_name is not None:
            self.dataset_name = dataset_name

    @property
    def encode_type(self):
        """Gets the encode_type of this IndexerInput.  # noqa: E501


        :return: The encode_type of this IndexerInput.  # noqa: E501
        :rtype: str
        """
        return self._encode_type

    @encode_type.setter
    def encode_type(self, encode_type):
        """Sets the encode_type of this IndexerInput.


        :param encode_type: The encode_type of this IndexerInput.  # noqa: E501
        :type: str
        """

        self._encode_type = encode_type

    @property
    def model_name(self):
        """Gets the model_name of this IndexerInput.  # noqa: E501


        :return: The model_name of this IndexerInput.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this IndexerInput.


        :param model_name: The model_name of this IndexerInput.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def index_method(self):
        """Gets the index_method of this IndexerInput.  # noqa: E501


        :return: The index_method of this IndexerInput.  # noqa: E501
        :rtype: str
        """
        return self._index_method

    @index_method.setter
    def index_method(self, index_method):
        """Sets the index_method of this IndexerInput.


        :param index_method: The index_method of this IndexerInput.  # noqa: E501
        :type: str
        """

        self._index_method = index_method

    @property
    def dataset_name(self):
        """Gets the dataset_name of this IndexerInput.  # noqa: E501


        :return: The dataset_name of this IndexerInput.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this IndexerInput.


        :param dataset_name: The dataset_name of this IndexerInput.  # noqa: E501
        :type: str
        """

        self._dataset_name = dataset_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndexerInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexerInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
